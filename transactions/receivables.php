<?php
// transactions/receivables.php
session_start();
require_once '../db.php'; // Assumes $conn (mysqli object) is created here

// --- Include FPDF ---
$fpdf_path = __DIR__ . '/../fpdf/fpdf.php';
if (file_exists($fpdf_path)) {
    require_once($fpdf_path);
} else {
    define('FPDF_MISSING', true); // Flag missing library
}

if (!isset($_SESSION['user_id'])) { // Check user_id
    header("Location: ../index.php");
    exit();
}

// Use name from session, fallback to username
$current_display_name = $_SESSION['name'] ?? $_SESSION['username'] ?? 'User';
$role = $_SESSION['role'] ?? 'user';

// --- Enhanced FPDF Class (Keep as before) ---
class PDF extends FPDF {
    private $reportTitle = 'Report'; private $periodLabel = ''; private $generatedBy = '';
    private $colorAccent = [216, 76, 115]; private $colorLightPink = [255, 240, 246]; private $colorMuted = [107, 74, 87]; private $colorDark = [61, 26, 42]; private $colorBorder = [243, 208, 220];

    function setReportHeader($title, $period, $user) {
        if (function_exists('iconv')) {
            $this->reportTitle = @iconv('UTF-8', 'cp1252//IGNORE', $title) ?: $title;
            $this->periodLabel = @iconv('UTF-8', 'cp1252//IGNORE', $period) ?: $period;
            $this->generatedBy = @iconv('UTF-8', 'cp1252//IGNORE', $user) ?: $user;
        } else { $this->reportTitle = $title; $this->periodLabel = $period; $this->generatedBy = $user; }
    }
    function Header() { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->Rect(0, 0, $this->GetPageWidth(), 25, 'F'); $this->SetTextColor(255); $this->SetFont('Arial', 'B', 14); $this->SetY(8); $this->Cell(0, 8, 'RCRAO Accounting - '.$this->reportTitle, 0, 1, 'C'); $this->SetFont('Arial', '', 10); $this->Cell(0, 6, $this->periodLabel, 0, 1, 'C'); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetY(30); }
    function Footer() { $this->SetY(-15); $this->SetFont('Arial', 'I', 8); $this->SetTextColor(150); $generatedByStr = 'Generated By: ' . $this->generatedBy . ' on ' . date('Y-m-d H:i'); if (function_exists('iconv')) { $generatedByStr = @iconv('UTF-8', 'cp1252//IGNORE', $generatedByStr) ?: $generatedByStr; } $this->Cell(0, 5, $generatedByStr, 0, 1, 'L'); $this->Cell(0, 5, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C'); }
    function BasicTable($header, $data) { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->SetTextColor(255); $this->SetDrawColor(max(0, $this->colorAccent[0]-20), max(0, $this->colorAccent[1]-20), max(0, $this->colorAccent[2]-20)); $this->SetLineWidth(.3); $this->SetFont('', 'B', 9); $widths = $this->CalculateWidths($header, $data); for ($i = 0; $i < count($header); $i++) { $headerText = function_exists('iconv') ? @iconv('UTF-8', 'cp1252//IGNORE', $header[$i]) ?: $header[$i] : $header[$i]; $this->Cell($widths[$i], 7, $headerText, 1, 0, 'C', true); } $this->Ln(); $this->SetFont('Arial', '', 8); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetFillColor(255); $this->SetDrawColor($this->colorBorder[0], $this->colorBorder[1], $this->colorBorder[2]); $fill = false;
        foreach ($data as $row) {
            $this->SetFillColor($fill ? 245 : 255);
            for ($i = 0; $i < count($header); $i++) {
                 $cellValue = $row[$i] ?? ''; $originalValue = $cellValue;
                if (function_exists('iconv') && mb_detect_encoding((string)$cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', (string)$cellValue)) {
                    $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', (string)$cellValue);
                    if ($convertedValue !== false) $cellValue = $convertedValue;
                }
                $cleanOriginalValue = preg_replace('/[^0-9.]/', '', $originalValue);
                $align = 'L'; if (strpos((string)$originalValue, '₱') !== false) { $align = 'R'; } elseif (in_array($header[$i], ['Status'])) { $align = 'C'; }
                $this->Cell($widths[$i], 6, (string)$cellValue, 'LR', 0, $align, true);
            }
            $this->Ln();
            $fill = !$fill;
        }
        $this->Cell(array_sum($widths), 0, '', 'T'); $this->Ln(4);
    }

    function CalculateWidths($header, $data) {
        $num_cols = count($header);
        $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin;
        $widths = [];
        for ($i = 0; $i < $num_cols; $i++) { $widths[$i] = $this->GetStringWidth($header[$i]) + 8; }
        $sampleData = array_slice($data, 0, 30);
        foreach ($sampleData as $row) {
             if (!is_array($row)) continue;
            for ($i = 0; $i < $num_cols; $i++) {
                $cellValue = $row[$i] ?? '';
                if (function_exists('iconv') && mb_detect_encoding((string)$cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', (string)$cellValue)) {
                    $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', (string)$cellValue);
                    if($convertedValue !== false) $cellValue = $convertedValue;
                }
                $widths[$i] = max($widths[$i], $this->GetStringWidth((string)$cellValue) + 8);
            }
        }
        $totalWidth = array_sum($widths);
        if ($totalWidth <= 0 || $num_cols === 0) { return []; }
        $scaleFactor = $pageWidth / $totalWidth;
        for ($i = 0; $i < $num_cols; $i++) { $widths[$i] *= $scaleFactor; }
        return $widths;
    }
}
// --- END FPDF Class ---

// --- Handle POST actions ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';
    function required($key) { return isset($_POST[$key]) && trim((string)$_POST[$key]) !== ''; } // Helper

    // --- PDF Generation Action ---
     if ($action === 'generate_current_view_pdf') {
        if (defined('FPDF_MISSING') || !file_exists($fpdf_path)) { die("FPDF library not found."); }

        $jsonData = $_POST['pdf_data'] ?? '[]';
        $data = json_decode($jsonData, true);
        $filters = json_decode($_POST['pdf_filters'] ?? '{}', true);
        if (json_last_error() !== JSON_ERROR_NONE) { die("Error decoding PDF data: ".json_last_error_msg()); }

        $pdf = new PDF('L', 'mm', 'A4'); // Landscape
        $pdf->AliasNbPages();

        $reportTitle = "Receivables - Current View";
        $periodLabel = "Filters: ";
        $filterParts = [];
        if (!empty($filters['search'])) $filterParts[] = "Search='{$filters['search']}'";
        if (!empty($filters['pending'])) $filterParts[] = "Pending Only";
        if (empty($filterParts)) $filterParts[] = "None";
        $periodLabel .= implode(', ', $filterParts);
        $sortKeyLabel = str_replace(['_','only'], [' ',''], $filters['sortKey'] ?? 'Default');
        $periodLabel .= " | Sorted By: " . ucwords($sortKeyLabel) . " " . ($filters['sortAsc'] ? '(Asc)' : '(Desc)');

        $pdf->setReportHeader($reportTitle, $periodLabel, $current_display_name); // Use display name
        $pdf->AddPage();
        $pdf->SetFont('Arial', '', 8);

        if (!empty($data)) {
            // Header for PDF (can choose to include Origin Ref or not)
            $header = ['Date Created', 'Client', 'Affiliation', 'Ref #', 'Amount', 'Paid', 'Balance', 'Mode', 'Status'];
            $table_data = [];
            $total_amount = 0; $total_paid = 0; $total_balance = 0;

            foreach ($data as $row) {
                // Data mapping for PDF - ensure indices match the PDF header array
                $rowData = [
                    $row['date'] ?? '', $row['client'] ?? '', $row['affiliation'] ?? '', $row['ref'] ?? '',
                    $row['amount_display'] ?? '₱ 0.00', $row['paid_display'] ?? '₱ 0.00',
                    $row['balance_display'] ?? '₱ 0.00', $row['mode'] ?? '', $row['status'] ?? '',
                    // $row['origin_ref'] ?? '' // Excluded Origin Ref from PDF for now
                ];
                $table_data[] = $rowData;
                $total_amount += $row['amount'] ?? 0; $total_paid += $row['paid'] ?? 0; $total_balance += $row['balance'] ?? 0;
            }

            $pdf->BasicTable($header, $table_data);
            $pdf->Ln(5);
            $pdf->SetFont('Arial', 'B', 10);

            $totalAmountStr = 'Total Amount: ₱ ' . number_format($total_amount, 2);
            $totalPaidStr = 'Total Paid: ₱ ' . number_format($total_paid, 2);
            $totalBalanceStr = 'Total Outstanding Balance: ₱ ' . number_format($total_balance, 2);
             if (function_exists('iconv')) {
                $totalAmountStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalAmountStr) ?: $totalAmountStr;
                $totalPaidStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalPaidStr) ?: $totalPaidStr;
                $totalBalanceStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalBalanceStr) ?: $totalBalanceStr;
             }
            $pdf->Cell(0, 6, $totalAmountStr, 0, 1, 'R');
            $pdf->Cell(0, 6, $totalPaidStr, 0, 1, 'R');
            $pdf->Cell(0, 6, $totalBalanceStr, 0, 1, 'R');

        } else {
            $pdf->SetFont('Arial', '', 10);
            $pdf->Cell(0, 10, 'No data matching the current view found.', 0, 1, 'C');
        }

        $filename = "Receivables_CurrentView_" . date('Ymd_His') . ".pdf";
        if (ob_get_level()) { ob_end_clean(); }
        $pdf->Output('D', $filename);
        exit();
    }
    // --- End PDF Generation ---

    // ===================================
    // --- START: UPDATED 'ADD' LOGIC ---
    // ===================================
    elseif ($action === 'add') {
        if (required('client_name') && isset($_POST['amount'])) {
            $client_name = trim($_POST['client_name']);
            $affiliation = trim($_POST['affiliation'] ?? '');
            $amount = (float)($_POST['amount'] ?? 0);
            $amount_paid = (float)($_POST['amount_paid'] ?? 0);
            $mode_of_payment = trim($_POST['mode_of_payment'] ?? '');
            $created_at_dt = date('Y-m-d H:i:s');
            $person_in_charge = $current_display_name;

             if ($amount <= 0) { $_SESSION['error_message'] = "Amount must be > 0."; header("Location: receivables.php"); exit(); }
             if ($amount_paid < 0 || $amount_paid > $amount + 0.009) { $_SESSION['error_message'] = "Invalid initial amount paid."; header("Location: receivables.php"); exit(); }
             if ($amount_paid > 0.009 && empty($mode_of_payment)) { $_SESSION['error_message'] = "Mode of Payment required for initial payment."; header("Location: receivables.php"); exit(); }

            $conn->begin_transaction();
            $new_receivable_id = null; $new_collection_id = null;

            try {
                // 1. Insert into receivables (assuming PK is rec_id)
                $receivable_ref = "RCV-" . date('YmdHis') . "-" . rand(1000, 9999);
                $balance = $amount - $amount_paid;
                $is_paid = ($balance <= 0.009) ? 1 : 0;
                $stmt_recv = $conn->prepare("INSERT INTO receivables (client_name, affiliation, amount, amount_paid, mode_of_payment, is_paid, created_at, reference_number) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                 if (!$stmt_recv) throw new Exception("Prepare failed (receivables): " . $conn->error);
                $stmt_recv->bind_param("ssddisss", $client_name, $affiliation, $amount, $amount_paid, $mode_of_payment, $is_paid, $created_at_dt, $receivable_ref);
                if (!$stmt_recv->execute()) throw new Exception("Execute failed (receivables): " . $stmt_recv->error);
                $new_receivable_id = $conn->insert_id; // Get ID (assuming it's rec_id)
                $stmt_recv->close();

                // 2. If initial payment exists, insert into collections and link
                if ($amount_paid > 0.009) {
                    $collection_ref = "COLL-" . date("YmdHis") . "-" . rand(1000, 9999);
                    // Assuming PK is coll_id
                    $stmt_coll = $conn->prepare("INSERT INTO collections (client_name, affiliation, reference_number, amount, cash_received, mode_of_payment, person_in_charge, created_at, transaction_datetime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
                     if (!$stmt_coll) throw new Exception("Prepare failed (collections): " . $conn->error);
                    $stmt_coll->bind_param("sssddssss", $client_name, $affiliation, $collection_ref, $amount_paid, $amount_paid, $mode_of_payment, $person_in_charge, $created_at_dt, $created_at_dt);
                    if (!$stmt_coll->execute()) throw new Exception("Execute failed (collections): " . $stmt_coll->error);
                    $new_collection_id = $conn->insert_id; // Get ID (assuming it's coll_id)
                    $stmt_coll->close();

                    // Insert into linking table
                    $stmt_link = $conn->prepare("INSERT INTO coll_rec_link (coll_id, rec_id) VALUES (?, ?)");
                    if (!$stmt_link) throw new Exception("Prepare failed (link): " . $conn->error);
                    $stmt_link->bind_param("ii", $new_collection_id, $new_receivable_id);
                    if (!$stmt_link->execute()) throw new Exception("Execute failed (link): " . $stmt_link->error);
                    $stmt_link->close();
                    $_SESSION['success_message'] = "Receivable added & initial payment linked.";
                } else {
                     $_SESSION['success_message'] = "Receivable added.";
                }
                $conn->commit();
            } catch (Exception $e) {
                $conn->rollback(); $_SESSION['error_message'] = "Transaction failed: " . $e->getMessage();
            }
        } else { $_SESSION['error_message'] = "Client Name and Amount required."; }
    // =================================
    // --- END: UPDATED 'ADD' LOGIC ---
    // =================================
    }
    elseif ($action === 'edit') {
        // Use rec_id for WHERE clause
        $rec_id = intval($_POST['rec_id'] ?? 0); // Changed from 'id' to 'rec_id'
        if ($rec_id <= 0 || !required('client_name') || !isset($_POST['amount'])) {
             $_SESSION['error_message'] = "Missing required fields."; header("Location: receivables.php"); exit();
        }
        $client_name = trim($_POST['client_name']);
        $affiliation = trim($_POST['affiliation'] ?? '');
        $new_amount = (float)($_POST['amount'] ?? 0);
        $mode_of_payment = trim($_POST['mode_of_payment'] ?? '');

         if ($new_amount <= 0) { $_SESSION['error_message'] = "Amount must be > 0."; header("Location: receivables.php"); exit(); }

        $current_paid = 0;
        // Use rec_id in WHERE
        $stmt_select = $conn->prepare("SELECT amount_paid FROM receivables WHERE rec_id = ?");
        if ($stmt_select) {
            $stmt_select->bind_param("i", $rec_id); $stmt_select->execute(); $stmt_select->bind_result($current_paid); $stmt_select->fetch(); $stmt_select->close();
        } else { $_SESSION['error_message'] = "Fetch failed."; header("Location: receivables.php"); exit(); }
         if ($new_amount < $current_paid - 0.009) { $_SESSION['error_message'] = "New amount < already paid (₱" . number_format($current_paid, 2) . ")."; header("Location: receivables.php"); exit(); }

        // Check links before updating
        $link_count = 0;
        $stmt_check = $conn->prepare("SELECT COUNT(*) FROM coll_rec_link WHERE rec_id = ?");
        if($stmt_check){
            $stmt_check->bind_param("i", $rec_id); $stmt_check->execute(); $stmt_check->bind_result($link_count); $stmt_check->fetch(); $stmt_check->close();
            if ($link_count > 0) { $_SESSION['warning_message'] = "Warning: Editing linked receivable. Verify linked collection amounts."; }
        }

        $new_balance = $new_amount - $current_paid;
        $new_is_paid = ($new_balance <= 0.009) ? 1 : 0;

        // Use rec_id in WHERE
        $stmt_update = $conn->prepare("UPDATE receivables SET client_name = ?, affiliation = ?, amount = ?, mode_of_payment = ?, is_paid = ? WHERE rec_id = ?");
        if ($stmt_update) {
            $stmt_update->bind_param("ssdsdi", $client_name, $affiliation, $new_amount, $mode_of_payment, $new_is_paid, $rec_id); // Use rec_id
            if ($stmt_update->execute()) { $_SESSION['success_message'] = "Receivable updated."; }
            else { $_SESSION['error_message'] = "Error updating: " . $stmt_update->error; }
            $stmt_update->close();
        } else { $_SESSION['error_message'] = "DB error: " . $conn->error; }
    }
    // ===================================
    // --- START: UPDATED 'PAY' LOGIC ---
    // ===================================
    elseif ($action === 'pay') {
        // Use rec_id
        $rec_id_to_pay = (int)$_POST['rec_id'] ?? 0; // Changed from 'id'
        if ($rec_id_to_pay > 0 && isset($_POST['paid_amount'])) {
            $new_payment = (float)($_POST['paid_amount'] ?? 0);
            $payment_time = date('Y-m-d H:i:s');
            $person_in_charge = $current_display_name;
            $payment_mode = trim($_POST['payment_mode'] ?? ''); // Get from pay modal if added

             if ($new_payment <= 0) { $_SESSION['error_message'] = "Payment amount must be > 0."; header("Location: receivables.php"); exit(); }

            $conn->begin_transaction();
            $new_collection_id = null;

            try {
                // 1. Get receivable details & Lock row (use rec_id)
                $current_amount = 0; $current_paid = 0; $client_name = ''; $affiliation = ''; $receivable_ref = ''; $original_mode = '';
                $stmt_select = $conn->prepare("SELECT client_name, affiliation, amount, amount_paid, reference_number, mode_of_payment FROM receivables WHERE rec_id = ? FOR UPDATE");
                if (!$stmt_select) throw new Exception("Prepare failed (select): ".$conn->error);
                $stmt_select->bind_param("i", $rec_id_to_pay); // Use rec_id
                if(!$stmt_select->execute()) throw new Exception("Execute failed (select): ".$stmt_select->error);
                $stmt_select->bind_result($client_name, $affiliation, $current_amount, $current_paid, $receivable_ref, $original_mode);
                if(!$stmt_select->fetch()){ throw new Exception("Receivable not found."); }
                $stmt_select->close();

                // Determine payment mode
                $payment_mode_for_collection = !empty($payment_mode) ? $payment_mode : $original_mode;
                if (empty($payment_mode_for_collection)) $payment_mode_for_collection = 'Cash'; // Default

                 $current_balance = $current_amount - $current_paid;
                 if ($new_payment > $current_balance + 0.009) { /* Allow overpayment for now */ }

                // 2. Update receivable (use rec_id)
                $new_total_paid = $current_paid + $new_payment;
                $new_balance = $current_amount - $new_total_paid;
                $new_is_paid = ($new_balance <= 0.009) ? 1 : 0;
                $stmt_update = $conn->prepare("UPDATE receivables SET amount_paid = ?, is_paid = ? WHERE rec_id = ?");
                 if (!$stmt_update) throw new Exception("Prepare failed (update): ".$conn->error);
                $stmt_update->bind_param("dii", $new_total_paid, $new_is_paid, $rec_id_to_pay); // Use rec_id
                if(!$stmt_update->execute()) throw new Exception("Execute failed (update): ".$stmt_update->error);
                $stmt_update->close();

                // 3. Insert into collections (assuming PK is coll_id)
                $collection_ref = "COLL-" . date("YmdHis") . "-" . rand(1000, 9999);
                $stmt_coll = $conn->prepare("INSERT INTO collections (client_name, affiliation, reference_number, amount, cash_received, mode_of_payment, person_in_charge, created_at, transaction_datetime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
                 if (!$stmt_coll) throw new Exception("Prepare failed (insert coll): " . $conn->error);
                $stmt_coll->bind_param("sssddssss", $client_name, $affiliation, $collection_ref, $new_payment, $new_payment, $payment_mode_for_collection, $person_in_charge, $payment_time, $payment_time);
                if(!$stmt_coll->execute()) throw new Exception("Execute failed (insert coll): ".$stmt_coll->error);
                $new_collection_id = $conn->insert_id; // Get coll_id
                $stmt_coll->close();

                // 4. Insert into linking table
                $stmt_link = $conn->prepare("INSERT INTO coll_rec_link (coll_id, rec_id) VALUES (?, ?)");
                if (!$stmt_link) throw new Exception("Prepare failed (link): " . $conn->error);
                $stmt_link->bind_param("ii", $new_collection_id, $rec_id_to_pay); // Link new collection to this receivable
                if (!$stmt_link->execute()) throw new Exception("Execute failed (link): " . $stmt_link->error);
                $stmt_link->close();

                $conn->commit();
                $_SESSION['success_message'] = "Payment recorded and linked.";
            } catch (Exception $e) {
                $conn->rollback(); $_SESSION['error_message'] = "Transaction failed: " . $e->getMessage();
            }
        } else { $_SESSION['error_message'] = "Missing ID or payment amount."; }
    // =================================
    // --- END: UPDATED 'PAY' LOGIC ---
    // =================================
    }
    elseif ($action === 'delete') {
         // Use rec_id
        $rec_id = intval($_POST['rec_id'] ?? 0); // Changed from 'id'
        if ($rec_id > 0) {
            // Check links (optional, CASCADE handles link table)
             $link_count = 0;
            $stmt_check = $conn->prepare("SELECT COUNT(*) FROM collection_receivable_link WHERE rec_id = ?");
            if($stmt_check){
                $stmt_check->bind_param("i", $rec_id); $stmt_check->execute(); $stmt_check->bind_result($link_count); $stmt_check->fetch(); $stmt_check->close();
                if ($link_count > 0) { $_SESSION['warning_message'] = "Warning: Deleting linked receivable. Related collections remain."; }
            }

            // Use rec_id
            $stmt = $conn->prepare("DELETE FROM receivables WHERE rec_id = ?");
            if ($stmt) {
                $stmt->bind_param("i", $rec_id); // Use rec_id
                if ($stmt->execute()) { $_SESSION['success_message'] = "Receivable deleted."; }
                else { $_SESSION['error_message'] = "Error deleting: " . $stmt->error; }
                $stmt->close();
            } else { $_SESSION['error_message'] = "DB error: " . $conn->error; }
        } else { $_SESSION['error_message'] = "Invalid ID."; }
    }

    header("Location: receivables.php");
    exit();
}

// Fetch initial data - Make sure 'rec_id' is selected
$receivables_q = $conn->query("
    SELECT rec_id, client_name, affiliation, amount, amount_paid, mode_of_payment, is_paid, created_at, reference_number,
           IFNULL(amount_paid,0) AS total_paid,
           (amount - IFNULL(amount_paid,0)) AS balance,
           DATE(created_at) as date_created_only
    FROM receivables
    ORDER BY created_at DESC
");

$error_message = $_SESSION['error_message'] ?? null;
$success_message = $_SESSION['success_message'] ?? null;
$warning_message = $_SESSION['warning_message'] ?? null;
unset($_SESSION['error_message'], $_SESSION['success_message'], $_SESSION['warning_message']);

?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Receivables — RCRAO Accounting</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style> /* CSS remains the same */
:root {
  --accent:#d84c73; --accent-light:#ffb6c1; --bg1:#fff0f6; --bg2:#ffe6ee; --card:#fff;
  --muted:#6b4a57; --shadow:0 8px 25px rgba(216,76,115,0.1);
  --sidebar-collapsed:72px; --sidebar-expanded:230px;
    --accent-dark: #b83b5e; --success: #28a745; --danger: #dc3545; --warning: #ffc107;
}
*{box-sizing:border-box;font-family:"Poppins",sans-serif;margin:0;padding:0}
body{background:linear-gradient(135deg,var(--bg1),var(--bg2));color:var(--muted);overflow-x:hidden}
.sidebar{position:fixed;top:0;left:0;height:100vh;width:var(--sidebar-collapsed);background:linear-gradient(180deg,var(--accent) 0%,#ff7ea1 100%); display:flex;flex-direction:column;justify-content:space-between;padding:12px;transition:width .3s ease;z-index:1001}
.sidebar:hover,.sidebar.expanded{width:var(--sidebar-expanded);box-shadow:var(--shadow)}
nav.side-menu{margin-top:20px;display:flex;flex-direction:column;gap:8px}
nav.side-menu a{display:flex;align-items:center;gap:15px;padding:12px;color:#fff;text-decoration:none;border-radius:8px;font-weight:500;transition: all .2s ease;}
nav.side-menu a i{width:24px;text-align:center; font-size: 1.1em; transition: transform 0.2s ease;}
nav.side-menu a .label{display:none; white-space: nowrap; opacity: 0; transition: opacity 0.2s ease;}
.sidebar:hover nav.side-menu a .label,.sidebar.expanded nav.side-menu a .label{display:inline; opacity: 1;}
nav.side-menu a:hover{background:rgba(255,255,255,0.2);transform:translateX(8px); }
nav.side-menu a.active{background:rgba(255,255,255,0.15);}
nav.side-menu a:hover i { transform: scale(1.1); }
.main{margin-left:var(--sidebar-collapsed);padding:28px;transition: margin-left .3s ease;}
.header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}
.header h1{color:var(--accent-dark);font-size:24px;font-weight:700}
.user-info{font-size:14px;font-weight:600;background:var(--card);padding:10px 14px;border-radius:10px;box-shadow:var(--shadow)}
.toolbar{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:18px;background:var(--card);padding:14px 16px;border-radius:12px;box-shadow:var(--shadow)}
.toolbar input{padding:8px 12px;border-radius:8px;border:1px solid #ccc;width:220px}
.btn{ border: none; border-radius: 8px; padding: 10px 18px; font-weight: 600; cursor: pointer; transition: all 0.25s ease; background: var(--accent-light); color: var(--accent-dark); margin: 0 5px; font-family:"Poppins",sans-serif; font-size: 14px;}
.btn:hover { background: var(--accent); color: #fff; transform: translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.2);}
.btn.primary{ background:var(--accent); color:#fff;}
.btn.primary:hover{ background: var(--accent-dark); transform:translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.3);}
.btn.pending{background:#f5a3b0;color:#fff}
.btn.pending:hover{background:#ff91a4}
.btn.small{padding:8px 12px;font-size:13px}
.btn i { margin-right: 8px; }
.top-tabs{display:flex;gap:8px;margin-bottom:18px}
.top-tabs .tab{background:var(--card);padding:10px 16px;border-radius:8px;cursor:pointer;font-weight:600;color:var(--muted);box-shadow:var(--shadow);transition:.2s}
.top-tabs .tab.active{background:var(--accent);color:#fff}
.table-card{background:var(--card);border-radius:14px;padding:16px;box-shadow:var(--shadow);overflow-x:auto}
table{width:100%;border-collapse:collapse;text-align:left; font-size: 13px;}
th,td{padding:10px 12px;border-bottom:1px solid #f3d0dc; white-space: nowrap;}
th{background:#ffd6e5;color:#6b4a57;cursor:pointer;user-select:none;position:relative; font-weight: 600;}
th .sort-icon{margin-left:6px;font-size:11px;color:#888}
tr:hover{background:#fff6f9}
.unpaid-row{background:#fff0f4; font-weight: 500;}
.icon-btn{background:none;border:none;color:var(--accent);cursor:pointer;font-size:15px;margin:0 4px;transition:.2s}
.icon-btn:hover{transform:scale(1.15); color: var(--accent-dark);}
.pagination{text-align:center;margin-top:18px;display:flex;justify-content:center;gap:6px;flex-wrap:wrap}
.pagination button{border:none;background:var(--accent);color:#fff;padding:6px 12px;border-radius:6px;cursor:pointer; font-size: 13px;}
.pagination button.active{background:#ff91a4}
.modal { position: fixed; inset: 0; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(5px); padding: 15px;}
.modal.active { display: flex; animation: fadeIn .3s ease; }
.modal-content { background: var(--card); border-radius: 16px; padding: 30px; width: 450px; max-width: 95%; box-shadow: 0 10px 40px rgba(0,0,0,0.15); animation: slideUp .35s ease; position: relative; }
.modal h2 { color: var(--accent-dark); text-align: center; margin-bottom: 25px; font-weight: 700; font-size: 20px;}
.modal form label { font-size: 14px; font-weight: 600; color: var(--muted); display: block; margin-top: 15px; margin-bottom: 5px; }
.modal form input, .modal form select { width: 100%; padding: 12px 15px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9; font-size: 14px; transition: all 0.2s ease; font-family:"Poppins",sans-serif; }
.modal form input:focus, .modal form select:focus { outline: none; border-color: var(--accent); background: #fff; box-shadow: 0 0 0 3px rgba(216, 76, 115, 0.15); }
.modal .actions { display: flex; justify-content: flex-end; margin-top: 25px; gap: 10px; }
@keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
@keyframes slideUp { from { transform: translateY(15px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
.status-paid { color: var(--success); font-weight: 700; }
.status-pending { color: var(--danger); font-weight: 700; }
</style>
</head>
<body>
<aside class="sidebar">
  <nav class="side-menu">
    <a href="../dashboard.php"><i class="fa fa-chart-pie"></i><span class="label">Dashboard</span></a>
    <a href="collections.php"><i class="fa fa-cash-register"></i><span class="label">Transactions</span></a> <?php if ($role === 'admin'): ?>
    <a href="../users.php"><i class="fa fa-users-cog"></i><span class="label">Users</span></a>
    <?php endif; ?>
    <a href="../logout.php"><i class="fa fa-sign-out-alt"></i><span class="label">Logout</span></a>
  </nav>
</aside>

<main class="main">
  <div class="header">
    <h1>Receivables</h1>
    <div class="user-info">Logged in as: <b><?= htmlspecialchars($current_display_name) ?></b></div>
  </div>

  <div class="top-tabs">
    <div class="tab" onclick="location.href='collections.php'">Collections</div>
    <div class="tab active">Receivables</div>
    <div class="tab" onclick="location.href='expenses.php'">Expenses</div>
  </div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="🔍 Search...">
    <button class="btn primary" id="openAddBtn"><i class="fa fa-plus"></i> New Receivable</button>
    <button class="btn small" id="showPendingBtn"><i class="fa fa-clock"></i> Pending Only</button>
    <button class="btn small" id="generatePdfBtn" style="margin-left: 10px;"><i class="fa fa-file-pdf"></i> PDF Current View</button>
    <div style="margin-left:auto">
      <input type="number" id="rowsPerPageInput" placeholder="Rows / page" style="width:120px;padding:8px;border-radius:8px;border:1px solid #ddd" value="8" min="1">
    </div>
  </div>

  <div class="table-card">
    <table id="receivablesTable">
      <thead>
        <tr>
          <th data-key="date_created_only">Date Created <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="client_name">Client <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="affiliation">Affiliation <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="reference_number">Ref # <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="amount">Amount <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="total_paid">Paid <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="balance">Balance <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="mode_of_payment">Mode <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="is_paid">Status <i class="fa fa-sort sort-icon"></i></th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php
        // Check if query was successful
         if ($receivables_q) {
            while ($r = $receivables_q->fetch_assoc()):
                // Ensure primary key exists (assuming rec_id)
                $primary_key = $r['rec_id'] ?? null;
                if ($primary_key === null) continue; // Skip if no PK

                $data = htmlentities(json_encode($r), ENT_QUOTES, 'UTF-8');
                $is_paid = intval($r['is_paid']);
                $row_class = $is_paid ? '' : 'unpaid-row';
                $date_formatted = !empty($r['date_created_only']) ? date('M d, Y', strtotime($r['date_created_only'])) : '';
                $status_text = $is_paid ? 'Paid' : 'Pending';
                $status_class = $is_paid ? 'status-paid' : 'status-pending';
        ?>
          <tr class="<?= $row_class ?>" data-row='<?= $data ?>'>
            <td><?= $date_formatted ?></td>
            <td><?= htmlspecialchars($r['client_name']) ?></td>
            <td><?= htmlspecialchars($r['affiliation']) ?></td>
            <td><?= htmlspecialchars($r['reference_number']) ?></td>
            <td>₱<?= number_format($r['amount'],2) ?></td>
            <td>₱<?= number_format($r['total_paid'],2) ?></td>
            <td>₱<?= number_format($r['balance'],2) ?></td>
            <td><?= htmlspecialchars($r['mode_of_payment']) ?></td>
            <td><span class="<?= $status_class ?>"><?= $status_text ?></span></td>
            <td>
              <?php if (!$is_paid): ?>
                <button class="icon-btn payBtn" title="Record payment"><i class="fa fa-money-bill"></i></button>
              <?php endif; ?>
              <button class="icon-btn editBtn" title="Edit"><i class="fa fa-pen"></i></button>
              <button class="icon-btn deleteBtn" title="Delete"><i class="fa fa-trash"></i></button>
            </td>
          </tr>
        <?php
            endwhile;
            // $receivables_q->free(); // Free result set if using object approach
         } else {
             echo "<tr><td colspan='10'>Error fetching data: " . $conn->error . "</td></tr>";
         }
         ?>
      </tbody>
    </table>
    <div class="pagination" id="pagination"></div>
  </div>
</main>

<div class="modal" id="modalAdd">
  <div class="modal-content">
    <h2 id="addTitle">New Receivable</h2>
    <form method="post" id="formAdd" action="receivables.php">
      <input type="hidden" name="action" id="formAddAction" value="add">
      <input type="hidden" name="rec_id" id="formAddId" value="">
      <label>Client Name</label>
      <input type="text" name="client_name" id="client_name" required>
      <label>Affiliation</label>
      <input type="text" name="affiliation" id="affiliation">
      <label>Amount</label>
      <input type="number" step="0.01" name="amount" id="amount" required min="0.01">
      <label>Amount Paid (optional)</label>
      <input type="number" step="0.01" name="amount_paid" id="amount_paid" placeholder="0.00" min="0">
      <label>Mode of Payment (for initial payment)</label>
      <select name="mode_of_payment" id="mode_of_payment">
        <option value="">-- Select --</option>
        <option value="Cash">Cash</option>
        <option value="Gcash">Gcash</option>
        <option value="Bank">Bank</option>
         <option value="Other">Other</option>
      </select>
      <div class="actions">
        <button type="button" class="btn" id="closeAdd">Cancel</button>
        <button type="submit" class="btn primary">Save</button>
      </div>
    </form>
  </div>
</div>

<div class="modal" id="modalPay">
  <div class="modal-content">
    <h2>Record Payment</h2>
    <form method="post" id="formPay" action="receivables.php">
      <input type="hidden" name="action" value="pay">
       <input type="hidden" name="rec_id" id="pay_receivable_id">
      <p style="text-align: center; margin-bottom: 15px;"><strong>Client:</strong> <span id="pay_client_name" style="font-weight: normal;"></span></p>
      <p style="text-align: center; margin-bottom: 20px;"><strong>Current Balance:</strong> <span style="font-weight: bold; color: var(--danger);">₱<span id="pay_balance"></span></span></p>
      <label>Amount to Pay</label>
      <input type="number" step="0.01" name="paid_amount" id="paid_amount" required min="0.01">
       <label>Mode of Payment</label>
       <select name="payment_mode" id="payment_mode"> <option value="">-- Use Receivable Mode --</option>
           <option value="Cash">Cash</option>
           <option value="Gcash">Gcash</option>
           <option value="Bank">Bank</option>
           <option value="Other">Other</option>
       </select>
      <div class="actions">
        <button type="button" class="btn" id="closePay">Cancel</button>
        <button type="submit" class="btn primary">Confirm Payment</button>
      </div>
    </form>
  </div>
</div>

<form method="POST" action="receivables.php" id="pdfForm" target="_blank" style="display: none;">
    <input type="hidden" name="action" value="generate_current_view_pdf">
    <input type="hidden" name="pdf_data" id="pdfDataInput">
    <input type="hidden" name="pdf_filters" id="pdfFiltersInput">
</form>

<script>
/* DOM helpers & initial state - Same */
const searchInput = document.getElementById('searchInput');
const showPendingBtn = document.getElementById('showPendingBtn');
const rowsPerPageInput = document.getElementById('rowsPerPageInput');
const allRows = Array.from(document.querySelectorAll('#receivablesTable tbody tr'));
const generatePdfBtn = document.getElementById('generatePdfBtn');
const pdfForm = document.getElementById('pdfForm');
const pdfDataInput = document.getElementById('pdfDataInput');
const pdfFiltersInput = document.getElementById('pdfFiltersInput');

let showingPending = false;
let rowsPerPage = parseInt(rowsPerPageInput.value) || 8;
let currentPage = 1;
let currentSortKey = 'created_at';
let currentSortAsc = false;

/* Add / Edit modal wiring */
const modalAdd = document.getElementById('modalAdd');
const formAdd = document.getElementById('formAdd');
const openAddBtn = document.getElementById('openAddBtn');
const closeAdd = document.getElementById('closeAdd');
const addTitle = document.getElementById('addTitle');

openAddBtn.onclick = () => { /* Same */
  formAdd.reset(); document.getElementById('formAddAction').value = 'add';
  document.getElementById('formAddId').value = ''; document.getElementById('amount_paid').disabled = false;
  addTitle.textContent = 'New Receivable'; modalAdd.classList.add('active');
};
closeAdd.onclick = () => modalAdd.classList.remove('active');

document.querySelectorAll('.editBtn').forEach(btn=>{
  btn.onclick = (e)=>{
    const tr = btn.closest('tr'); const data = JSON.parse(tr.dataset.row); formAdd.reset();
    document.getElementById('formAddAction').value = 'edit';
    // Use rec_id from data
    document.getElementById('formAddId').value = data.rec_id; // *** CHANGED data.id to data.rec_id ***
    document.getElementById('client_name').value = data.client_name;
    document.getElementById('affiliation').value = data.affiliation || '';
    document.getElementById('amount').value = parseFloat(data.amount || 0).toFixed(2);
    document.getElementById('amount_paid').value = parseFloat(data.total_paid || 0).toFixed(2);
    document.getElementById('amount_paid').disabled = true;
    document.getElementById('mode_of_payment').value = data.mode_of_payment || '';
    addTitle.textContent = 'Edit Receivable'; modalAdd.classList.add('active');
  }
});

/* Delete - SweetAlert */
document.querySelectorAll('.deleteBtn').forEach(btn=>{
  btn.onclick = ()=>{
    const data = JSON.parse(btn.closest('tr').dataset.row);
    // Use rec_id from data
    const rec_id = data.rec_id; // *** CHANGED data.id to data.rec_id ***
    Swal.fire({
        title: 'Are you sure?', text: `Delete receivable Ref# ${data.reference_number}?`,
        icon: 'warning', showCancelButton: true, confirmButtonText: 'Yes, delete it!',
        buttonsStyling: false, customClass: { confirmButton: 'btn primary', cancelButton: 'btn' }
    }).then((result) => {
        if (result.isConfirmed) {
            const form = document.createElement('form'); form.method = 'POST'; form.action = 'receivables.php';
            // Use rec_id in hidden input
            form.innerHTML = `<input type="hidden" name="action" value="delete"><input type="hidden" name="rec_id" value="${rec_id}">`; // *** CHANGED name="id" to name="rec_id" ***
            document.body.appendChild(form); form.submit();
        }
    });
  }
});

/* Pay modal wiring */
const modalPay = document.getElementById('modalPay');
const closePay = document.getElementById('closePay');
const formPay = document.getElementById('formPay');

document.querySelectorAll('.payBtn').forEach(btn=>{
  btn.onclick = ()=>{
    const data = JSON.parse(btn.closest('tr').dataset.row); formPay.reset();
    // Use rec_id from data
    document.getElementById('pay_receivable_id').value = data.rec_id; // *** CHANGED data.id to data.rec_id ***
    document.getElementById('pay_client_name').textContent = data.client_name;
    const balance = parseFloat(data.balance || 0);
    document.getElementById('pay_balance').textContent = balance.toFixed(2);
    const amountInput = document.getElementById('paid_amount');
    amountInput.value = ''; amountInput.max = balance.toFixed(2);
    amountInput.placeholder = `Enter amount up to ${balance.toFixed(2)}`;
    modalPay.classList.add('active'); // Corrected
  }
});
closePay.onclick = ()=> modalPay.classList.remove('active');

/* --- Filter, Sort, Pagination, PDF Generation --- Same logic, PDF adjusted */
function getFilteredRows() { const q = searchInput.value.toLowerCase().trim(); return allRows.filter(r => { const tc = r.textContent.toLowerCase(); const ms = !q || tc.includes(q); if (!ms) return false; if (showingPending) { const d = JSON.parse(r.dataset.row); const b = parseFloat(d.balance || 0); return b > 0.009; } return true; }); }
function sortRows(rowsToSort, key, asc) { rowsToSort.sort((a, b) => { const A_d = JSON.parse(a.dataset.row); const B_d = JSON.parse(b.dataset.row); let A = A_d[key]; let B = B_d[key]; if (['amount', 'total_paid', 'balance', 'is_paid'].includes(key)) { const nA = parseFloat(A) || 0; const nB = parseFloat(B) || 0; return asc ? (nA - nB) : (nB - nA); } if (key === 'date_created_only') { A = A_d['created_at'] || 0; B = B_d['created_at'] || 0; const dA = new Date(A); const dB = new Date(B); return asc ? dA - dB : dB - dA; } const sa = (A || '').toString().toLowerCase(); const sb = (B || '').toString().toLowerCase(); return asc ? sa.localeCompare(sb) : sb.localeCompare(sa); }); }
function renderTable() { const fr = getFilteredRows(); sortRows(fr, currentSortKey, currentSortAsc); const tb = document.querySelector('#receivablesTable tbody'); tb.innerHTML = ''; const st = (currentPage - 1) * rowsPerPage; const en = st + rowsPerPage; const pr = fr.slice(st, en); pr.forEach(r => tb.appendChild(r)); renderPagination(fr.length); }
function renderPagination(total) { const c = document.getElementById('pagination'); c.innerHTML = ''; const tp = Math.max(1, Math.ceil(total / rowsPerPage)); if (tp <= 1) return; for (let i = 1; i <= tp; i++) { const b = document.createElement('button'); b.textContent = i; if (i === currentPage) b.classList.add('active'); b.onclick = () => { currentPage = i; renderTable(); }; c.appendChild(b); } }

/* --- Event Listeners --- Same */
searchInput.addEventListener('input', () => { currentPage = 1; renderTable(); });
showPendingBtn.onclick = () => { showingPending = !showingPending; showPendingBtn.innerHTML = showingPending ? '<i class="fa fa-list"></i> Show All' : '<i class="fa fa-clock"></i> Pending Only'; showPendingBtn.classList.toggle('pending', showingPending); currentPage = 1; renderTable(); };
rowsPerPageInput.addEventListener('change', () => { let nr = parseInt(rowsPerPageInput.value); if (nr > 0) { rowsPerPage = nr; } else { rowsPerPageInput.value = rowsPerPage; } currentPage = 1; renderTable(); });
document.querySelectorAll('th[data-key]').forEach(th => { th.addEventListener('click', () => { const k = th.dataset.key; if (currentSortKey === k) { currentSortAsc = !currentSortAsc; } else { currentSortKey = k; currentSortAsc = true; } document.querySelectorAll('.sort-icon').forEach(i => i.className = 'fa fa-sort sort-icon'); th.querySelector('.sort-icon').className = currentSortAsc ? 'fa fa-sort-up sort-icon' : 'fa fa-sort-down sort-icon'; currentPage = 1; renderTable(); }); });

/* PDF Generation Button Listener - Adjusted data mapping */
generatePdfBtn.addEventListener('click', () => {
    const filteredRows = getFilteredRows(); sortRows(filteredRows, currentSortKey, currentSortAsc);
    const dataForPdf = filteredRows.map(row => { const rowData = JSON.parse(row.dataset.row); const cells = row.getElementsByTagName('td');
        // Indices match HTML table (without Origin Ref)
        return { date: cells[0]?.textContent||'', client: cells[1]?.textContent||'', affiliation: cells[2]?.textContent||'', ref: cells[3]?.textContent||'', amount_display: cells[4]?.textContent||'₱ 0.00', paid_display: cells[5]?.textContent||'₱ 0.00', balance_display: cells[6]?.textContent||'₱ 0.00', mode: cells[7]?.textContent||'', status: cells[8]?.textContent||'', amount: parseFloat(rowData.amount||0), paid: parseFloat(rowData.total_paid||0), balance: parseFloat(rowData.balance||0) }; });
    const filtersForPdf = { search: searchInput.value, pending: showingPending, sortKey: currentSortKey, sortAsc: currentSortAsc };
    pdfDataInput.value = JSON.stringify(dataForPdf); pdfFiltersInput.value = JSON.stringify(filtersForPdf); pdfForm.submit();
});

/* --- Form Validation & Modal Close --- Same */
renderTable();
formAdd.addEventListener('submit', function(e){ const c = document.getElementById('client_name').value.trim(); const a = parseFloat(document.getElementById('amount').value); const ap = parseFloat(document.getElementById('amount_paid').value || 0); const m = document.getElementById('mode_of_payment').value; let err = ''; if (!c) { err = 'Client name required.'; } else if (isNaN(a) || a <= 0) { err = 'Amount > 0 required.'; } else if (isNaN(ap) || ap < 0) { err = 'Initial paid cannot be negative.'; } else if (ap > a + 0.009) { err = 'Initial paid > amount.'; } else if (ap > 0.009 && !m) { err = 'Mode of Payment required for initial payment.';} if (err) { e.preventDefault(); Swal.fire({ icon: 'error', title: 'Validation Error', text: err, buttonsStyling: false, customClass: { confirmButton: 'btn primary' } }); return false; } });
formPay.addEventListener('submit', function(e){ const amt = parseFloat(document.getElementById('paid_amount').value); const bal = parseFloat(document.getElementById('pay_balance').textContent); let err = ''; if (isNaN(amt) || amt <= 0) { err = 'Enter valid payment > 0.'; } else if (amt > bal + 0.009) { err = `Payment (₱${amt.toFixed(2)}) > balance (₱${bal.toFixed(2)}).`; } if (err) { e.preventDefault(); Swal.fire({ icon: 'error', title: 'Validation Error', text: err, buttonsStyling: false, customClass: { confirmButton: 'btn primary' } }); return false; } });
document.querySelectorAll('.modal').forEach(m=>{ m.addEventListener('click', (ev)=>{ if (ev.target === m) m.classList.remove('active'); }); });
document.addEventListener('DOMContentLoaded', () => { <?php if ($success_message): ?> Swal.fire({ icon: 'success', title: 'Success', text: '<?= addslashes($success_message) ?>', timer: 2500, showConfirmButton: false }); <?php elseif ($error_message): ?> Swal.fire({ icon: 'error', title: 'Error', text: '<?= addslashes($error_message) ?>', confirmButtonText: 'OK', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } }); <?php elseif ($warning_message): ?> Swal.fire({ icon: 'warning', title: 'Warning', text: '<?= addslashes($warning_message) ?>', confirmButtonText: 'OK', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } }); <?php endif; ?> });
</script>
</body>
</html>