<?php
// transactions/receivables.php
session_start();
require_once '../db.php';

// --- Include FPDF ---
$fpdf_path = __DIR__ . '/../fpdf/fpdf.php';
if (file_exists($fpdf_path)) {
    require_once($fpdf_path);
} else {
    define('FPDF_MISSING', true); // Flag missing library
}

if (!isset($_SESSION['username'])) {
    header("Location: ../index.php");
    exit();
}

$username = $_SESSION['username'];
$role = $_SESSION['role'];

// --- Enhanced FPDF Class ---
class PDF extends FPDF {
    private $reportTitle = 'Report'; private $periodLabel = ''; private $generatedBy = '';
    private $colorAccent = [216, 76, 115]; private $colorLightPink = [255, 240, 246]; private $colorMuted = [107, 74, 87]; private $colorDark = [61, 26, 42]; private $colorBorder = [243, 208, 220];

    function setReportHeader($title, $period, $user) {
        if (function_exists('iconv')) {
            $this->reportTitle = @iconv('UTF-8', 'cp1252//IGNORE', $title) ?: $title;
            $this->periodLabel = @iconv('UTF-8', 'cp1252//IGNORE', $period) ?: $period;
            $this->generatedBy = @iconv('UTF-8', 'cp1252//IGNORE', $user) ?: $user;
        } else { $this->reportTitle = $title; $this->periodLabel = $period; $this->generatedBy = $user; }
    }
    function Header() { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->Rect(0, 0, $this->GetPageWidth(), 25, 'F'); $this->SetTextColor(255); $this->SetFont('Arial', 'B', 14); $this->SetY(8); $this->Cell(0, 8, 'RCRAO Accounting - '.$this->reportTitle, 0, 1, 'C'); $this->SetFont('Arial', '', 10); $this->Cell(0, 6, $this->periodLabel, 0, 1, 'C'); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetY(30); }
    function Footer() { $this->SetY(-15); $this->SetFont('Arial', 'I', 8); $this->SetTextColor(150); $generatedByStr = 'Generated By: ' . $this->generatedBy . ' on ' . date('Y-m-d H:i'); if (function_exists('iconv')) { $generatedByStr = @iconv('UTF-8', 'cp1252//IGNORE', $generatedByStr) ?: $generatedByStr; } $this->Cell(0, 5, $generatedByStr, 0, 1, 'L'); $this->Cell(0, 5, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C'); }
    function BasicTable($header, $data) { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->SetTextColor(255); $this->SetDrawColor(max(0, $this->colorAccent[0]-20), max(0, $this->colorAccent[1]-20), max(0, $this->colorAccent[2]-20)); $this->SetLineWidth(.3); $this->SetFont('', 'B', 9); $widths = $this->CalculateWidths($header, $data); for ($i = 0; $i < count($header); $i++) { $headerText = function_exists('iconv') ? @iconv('UTF-8', 'cp1252//IGNORE', $header[$i]) ?: $header[$i] : $header[$i]; $this->Cell($widths[$i], 7, $headerText, 1, 0, 'C', true); } $this->Ln(); $this->SetFont('Arial', '', 8); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetFillColor(255); $this->SetDrawColor($this->colorBorder[0], $this->colorBorder[1], $this->colorBorder[2]); $fill = false;
        foreach ($data as $row) {
            $this->SetFillColor($fill ? 245 : 255);
            for ($i = 0; $i < count($header); $i++) {
                $cellValue = $row[$i] ?? ''; $originalValue = $cellValue;
                if (function_exists('iconv') && mb_detect_encoding($cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', $cellValue)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', $cellValue); if ($convertedValue !== false) { $cellValue = $convertedValue; } }
                $cleanOriginalValue = preg_replace('/[^0-9.]/', '', $originalValue);
                $align = 'L'; if (strpos($originalValue, '₱') !== false) { $align = 'R'; } elseif (in_array($header[$i], ['Status'])) { $align = 'C'; }
                $this->Cell($widths[$i], 6, $cellValue, 'LR', 0, $align, true);
            }
            $this->Ln();
            $fill = !$fill;
        }
        $this->Cell(array_sum($widths), 0, '', 'T'); $this->Ln(4);
    }

    // *** MODIFIED CalculateWidths Function ***
    function CalculateWidths($header, $data) {
        $num_cols = count($header);
        // Use GetPageWidth() and subtract Left/Right margins (default is 10mm each)
        $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin;
        $widths = [];

        // 1. Initialize widths based on header length + padding
        for ($i = 0; $i < $num_cols; $i++) {
            $widths[$i] = $this->GetStringWidth($header[$i]) + 8; // Padding
        }

        // 2. Adjust widths based on sample data length + padding
        $sampleData = array_slice($data, 0, 30);
        foreach ($sampleData as $row) {
            for ($i = 0; $i < $num_cols; $i++) {
                $cellValue = $row[$i] ?? '';
                 // Convert value before calculating width if necessary
                 if (function_exists('iconv') && mb_detect_encoding($cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', $cellValue)) {
                    $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', $cellValue);
                    if($convertedValue !== false) $cellValue = $convertedValue;
                 }
                $widths[$i] = max($widths[$i], $this->GetStringWidth((string)$cellValue) + 8); // Padding
            }
        }

        // 3. Calculate total width based on content
        $totalWidth = array_sum($widths);

        // --- NEW LOGIC TO FILL PAGE WIDTH ---
        if ($totalWidth <= 0 || $num_cols === 0) { // Avoid division by zero
            return []; // Return empty array if no columns
        }

        // Calculate scaling factor to make totalWidth equal pageWidth
        $scaleFactor = $pageWidth / $totalWidth;

        // Apply scaling factor to all columns
        for ($i = 0; $i < $num_cols; $i++) {
            $widths[$i] *= $scaleFactor;
        }
        // --- END NEW LOGIC ---

        return $widths;
    }
    // *** END MODIFIED CalculateWidths ***

    function SummarySection($title, $items) { /* ... keep if needed ... */ }
}
// --- END FPDF Class ---

// Check if receivable_payments table exists (optional)
$has_payments_table = false;

// --- Handle POST actions ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';
    function required($key) { return isset($_POST[$key]) && trim($_POST[$key]) !== ''; }

    // --- PDF Generation Action ---
     if ($action === 'generate_current_view_pdf') {
        if (defined('FPDF_MISSING') || !file_exists($fpdf_path)) { die("FPDF library not found."); }

        $jsonData = $_POST['pdf_data'] ?? '[]';
        $data = json_decode($jsonData, true);
        $filters = json_decode($_POST['pdf_filters'] ?? '{}', true);
        if (json_last_error() !== JSON_ERROR_NONE) { die("Error decoding PDF data."); }

        $pdf = new PDF('L', 'mm', 'A4'); // Landscape for receivables is usually better
        $pdf->AliasNbPages();

        $reportTitle = "Receivables - Current View";
        $periodLabel = "Filters: ";
        $filterParts = [];
        if (!empty($filters['search'])) $filterParts[] = "Search='{$filters['search']}'";
        if (!empty($filters['pending'])) $filterParts[] = "Pending Only";
        if (empty($filterParts)) $filterParts[] = "None";
        $periodLabel .= implode(', ', $filterParts);
        $sortKeyLabel = str_replace(['_','only'], [' ',''], $filters['sortKey'] ?? 'Default');
        $periodLabel .= " | Sorted By: " . ucwords($sortKeyLabel) . " " . ($filters['sortAsc'] ? '(Asc)' : '(Desc)');

        $pdf->setReportHeader($reportTitle, $periodLabel, $username); // iconv handled inside
        $pdf->AddPage();
        $pdf->SetFont('Arial', '', 8);

        if (!empty($data)) {
            $header = ['Date Created', 'Client', 'Affiliation', 'Ref #', 'Amount', 'Paid', 'Balance', 'Mode', 'Status'];
            $table_data = [];
            $total_amount = 0; $total_paid = 0; $total_balance = 0;

            foreach ($data as $row) {
                $rowData = [
                    $row['date'] ?? '', $row['client'] ?? '', $row['affiliation'] ?? '', $row['ref'] ?? '',
                    $row['amount_display'] ?? '₱ 0.00', $row['paid_display'] ?? '₱ 0.00',
                    $row['balance_display'] ?? '₱ 0.00', $row['mode'] ?? '', $row['status'] ?? ''
                ];
                $table_data[] = $rowData;
                $total_amount += $row['amount'] ?? 0; $total_paid += $row['paid'] ?? 0; $total_balance += $row['balance'] ?? 0;
            }

            $pdf->BasicTable($header, $table_data);
            $pdf->Ln(5);
            $pdf->SetFont('Arial', 'B', 10);

            $totalAmountStr = 'Total Amount: ₱ ' . number_format($total_amount, 2);
            $totalPaidStr = 'Total Paid: ₱ ' . number_format($total_paid, 2);
            $totalBalanceStr = 'Total Outstanding Balance: ₱ ' . number_format($total_balance, 2);
             if (function_exists('iconv')) {
                $totalAmountStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalAmountStr) ?: $totalAmountStr;
                $totalPaidStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalPaidStr) ?: $totalPaidStr;
                $totalBalanceStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalBalanceStr) ?: $totalBalanceStr;
            }
            $pdf->Cell(0, 6, $totalAmountStr, 0, 1, 'R');
            $pdf->Cell(0, 6, $totalPaidStr, 0, 1, 'R');
            $pdf->Cell(0, 6, $totalBalanceStr, 0, 1, 'R');

        } else {
            $pdf->SetFont('Arial', '', 10);
            $pdf->Cell(0, 10, 'No data matching the current view found.', 0, 1, 'C');
        }

        $filename = "Receivables_CurrentView_" . date('Ymd_His') . ".pdf";
        if (ob_get_level()) { ob_end_clean(); }
        $pdf->Output('D', $filename);
        exit();
    }
    // --- End PDF Generation ---

    elseif ($action === 'add') { /* ... add logic ... */ }
    elseif ($action === 'edit') { /* ... edit logic ... */ }
    elseif ($action === 'pay') { /* ... pay logic ... */ }
    elseif ($action === 'delete') { /* ... delete logic ... */ }

    header("Location: receivables.php");
    exit();
}

// Fetch initial data
$receivables_q = $conn->query("
    SELECT r.*,
           IFNULL(r.amount_paid,0) AS total_paid,
           (r.amount - IFNULL(r.amount_paid,0)) AS balance,
           DATE(r.created_at) as date_created_only
    FROM receivables r
    ORDER BY r.created_at DESC
");
?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Receivables — RCRAO Accounting</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
:root {
  --accent:#d84c73; --accent-light:#ffb6c1; --bg1:#fff0f6; --bg2:#ffe6ee; --card:#fff;
  --muted:#6b4a57; --shadow:0 8px 25px rgba(216,76,115,0.1);
  --sidebar-collapsed:72px; --sidebar-expanded:230px;
   --accent-dark: #b83b5e; /* Added */
   --success: #28a745; --danger: #dc3545; /* Added status colors */
}
*{box-sizing:border-box;font-family:"Poppins",sans-serif;margin:0;padding:0}
body{background:linear-gradient(135deg,var(--bg1),var(--bg2));color:var(--muted);overflow-x:hidden}
.sidebar{position:fixed;top:0;left:0;height:100vh;width:var(--sidebar-collapsed);background:linear-gradient(180deg,var(--accent) 0%,#ff7ea1 100%); display:flex;flex-direction:column;justify-content:space-between;padding:12px;transition:width .3s ease;z-index:1001}
.sidebar:hover,.sidebar.expanded{width:var(--sidebar-expanded);box-shadow:var(--shadow)}
nav.side-menu{margin-top:20px;display:flex;flex-direction:column;gap:8px}
nav.side-menu a{display:flex;align-items:center;gap:15px;padding:12px;color:#fff;text-decoration:none;border-radius:8px;font-weight:500;transition: all .2s ease;}
nav.side-menu a i{width:24px;text-align:center; font-size: 1.1em; transition: transform 0.2s ease;}
nav.side-menu a .label{display:none; white-space: nowrap; opacity: 0; transition: opacity 0.2s ease;}
.sidebar:hover nav.side-menu a .label,.sidebar.expanded nav.side-menu a .label{display:inline; opacity: 1;}
nav.side-menu a:hover{background:rgba(255,255,255,0.2);transform:translateX(8px); }
nav.side-menu a.active{background:rgba(255,255,255,0.15);}
nav.side-menu a:hover i { transform: scale(1.1); }
.main{margin-left:var(--sidebar-collapsed);padding:28px;transition: margin-left .3s ease;}
.header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}
.header h1{color:var(--accent-dark);font-size:24px;font-weight:700}
.user-info{font-size:14px;font-weight:600;background:var(--card);padding:10px 14px;border-radius:10px;box-shadow:var(--shadow)}
.toolbar{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:18px;background:var(--card);padding:14px 16px;border-radius:12px;box-shadow:var(--shadow)}
.toolbar input{padding:8px 12px;border-radius:8px;border:1px solid #ccc;width:220px}

/* Global Button Styles */
.btn{ border: none; border-radius: 8px; padding: 10px 18px; font-weight: 600; cursor: pointer; transition: all 0.25s ease; background: var(--accent-light); color: var(--accent-dark); margin: 0 5px; font-family:"Poppins",sans-serif; font-size: 14px;}
.btn:hover { background: var(--accent); color: #fff; transform: translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.2);}
.btn.primary{ background:var(--accent); color:#fff;}
.btn.primary:hover{ background: var(--accent-dark); transform:translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.3);}
.btn.pending{background:#f5a3b0;color:#fff}
.btn.pending:hover{background:#ff91a4}
.btn.small{padding:8px 12px;font-size:13px}
.btn i { margin-right: 8px; }

.top-tabs{display:flex;gap:8px;margin-bottom:18px}
.top-tabs .tab{background:var(--card);padding:10px 16px;border-radius:8px;cursor:pointer;font-weight:600;color:var(--muted);box-shadow:var(--shadow);transition:.2s}
.top-tabs .tab.active{background:var(--accent);color:#fff}
.table-card{background:var(--card);border-radius:14px;padding:16px;box-shadow:var(--shadow);overflow-x:auto}
table{width:100%;border-collapse:collapse;text-align:left; font-size: 13px;}
th,td{padding:10px 12px;border-bottom:1px solid #f3d0dc; white-space: nowrap;}
th{background:#ffd6e5;color:#6b4a57;cursor:pointer;user-select:none;position:relative; font-weight: 600;}
th .sort-icon{margin-left:6px;font-size:11px;color:#888}
tr:hover{background:#fff6f9}
.unpaid-row{background:#fff0f4; font-weight: 500;}
.icon-btn{background:none;border:none;color:var(--accent);cursor:pointer;font-size:15px;margin:0 4px;transition:.2s}
.icon-btn:hover{transform:scale(1.15); color: var(--accent-dark);}
.pagination{text-align:center;margin-top:18px;display:flex;justify-content:center;gap:6px;flex-wrap:wrap}
.pagination button{border:none;background:var(--accent);color:#fff;padding:6px 12px;border-radius:6px;cursor:pointer; font-size: 13px;}
.pagination button.active{background:#ff91a4}

/* Modal Styles */
.modal { position: fixed; inset: 0; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(5px); padding: 15px;}
.modal.active { display: flex; animation: fadeIn .3s ease; }
.modal-content { background: var(--card); border-radius: 16px; padding: 30px; width: 450px; max-width: 95%; box-shadow: 0 10px 40px rgba(0,0,0,0.15); animation: slideUp .35s ease; position: relative; }
.modal h2 { color: var(--accent-dark); text-align: center; margin-bottom: 25px; font-weight: 700; font-size: 20px;}
.modal form label { font-size: 14px; font-weight: 600; color: var(--muted); display: block; margin-top: 15px; margin-bottom: 5px; }
.modal form input, .modal form select { width: 100%; padding: 12px 15px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9; font-size: 14px; transition: all 0.2s ease; font-family:"Poppins",sans-serif; }
.modal form input:focus, .modal form select:focus { outline: none; border-color: var(--accent); background: #fff; box-shadow: 0 0 0 3px rgba(216, 76, 115, 0.15); }
.modal .actions { display: flex; justify-content: flex-end; margin-top: 25px; gap: 10px; }
@keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
@keyframes slideUp { from { transform: translateY(15px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }

/* Status styling */
.status-paid { color: var(--success); font-weight: 700; }
.status-pending { color: var(--danger); font-weight: 700; }
</style>
</head>
<body>
<aside class="sidebar">
  <nav class="side-menu">
    <a href="../dashboard.php"><i class="fa fa-chart-pie"></i><span class="label">Dashboard</span></a>
    <a href="collections.php" class="active"><i class="fa fa-cash-register"></i><span class="label">Transactions</span></a>
    <?php if ($role === 'admin'): ?>
    <a href="../users.php"><i class="fa fa-users-cog"></i><span class="label">Users</span></a>
    <?php endif; ?>
    <a href="../logout.php"><i class="fa fa-sign-out-alt"></i><span class="label">Logout</span></a>
  </nav>
</aside>

<main class="main">
  <div class="header">
    <h1>Receivables</h1>
    <div class="user-info">Logged in as: <b><?= htmlspecialchars($username) ?></b></div>
  </div>

  <div class="top-tabs">
    <div class="tab" onclick="location.href='collections.php'">Collections</div>
    <div class="tab active">Receivables</div>
    <div class="tab" onclick="location.href='expenses.php'">Expenses</div>
  </div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="🔍 Search...">
    <button class="btn primary" id="openAddBtn"><i class="fa fa-plus"></i> New Receivable</button>
    <button class="btn small" id="showPendingBtn"><i class="fa fa-clock"></i> Pending Only</button>
    <button class="btn small" id="generatePdfBtn" style="margin-left: 10px;"><i class="fa fa-file-pdf"></i> PDF Current View</button>
    <div style="margin-left:auto">
      <input type="number" id="rowsPerPageInput" placeholder="Rows / page" style="width:120px;padding:8px;border-radius:8px;border:1px solid #ddd" value="8" min="1">
    </div>
  </div>

  <div class="table-card">
    <table id="receivablesTable">
      <thead>
        <tr>
          <th data-key="date_created_only">Date Created <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="client_name">Client <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="affiliation">Affiliation <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="reference_number">Ref # <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="amount">Amount <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="total_paid">Paid <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="balance">Balance <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="mode_of_payment">Mode <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="is_paid">Status <i class="fa fa-sort sort-icon"></i></th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php while ($r = $receivables_q->fetch_assoc()):
            $data = htmlentities(json_encode($r), ENT_QUOTES, 'UTF-8');
            $is_paid = intval($r['is_paid']);
            $row_class = $is_paid ? '' : 'unpaid-row';
            $date_formatted = !empty($r['date_created_only']) ? date('M d, Y', strtotime($r['date_created_only'])) : '';
            $status_text = $is_paid ? 'Paid' : 'Pending';
            $status_class = $is_paid ? 'status-paid' : 'status-pending';
        ?>
          <tr class="<?= $row_class ?>" data-row='<?= $data ?>'>
            <td><?= $date_formatted ?></td>
            <td><?= htmlspecialchars($r['client_name']) ?></td>
            <td><?= htmlspecialchars($r['affiliation']) ?></td>
            <td><?= htmlspecialchars($r['reference_number']) ?></td>
            <td>₱<?= number_format($r['amount'],2) ?></td>
            <td>₱<?= number_format($r['total_paid'],2) ?></td>
            <td>₱<?= number_format($r['balance'],2) ?></td>
            <td><?= htmlspecialchars($r['mode_of_payment']) ?></td>
            <td><span class="<?= $status_class ?>"><?= $status_text ?></span></td>
            <td>
              <?php if (!$is_paid): ?>
                <button class="icon-btn payBtn" title="Record payment"><i class="fa fa-money-bill"></i></button>
              <?php endif; ?>
              <button class="icon-btn editBtn" title="Edit"><i class="fa fa-pen"></i></button>
              <button class="icon-btn deleteBtn" title="Delete"><i class="fa fa-trash"></i></button>
            </td>
          </tr>
        <?php endwhile; ?>
      </tbody>
    </table>
    <div class="pagination" id="pagination"></div>
  </div>
</main>

<div class="modal" id="modalAdd">
  <div class="modal-content">
    <h2 id="addTitle">New Receivable</h2>
    <form method="post" id="formAdd" action="receivables.php">
      <input type="hidden" name="action" id="formAddAction" value="add">
      <input type="hidden" name="id" id="formAddId" value="">
      <label>Client Name</label>
      <input type="text" name="client_name" id="client_name" required>
      <label>Affiliation</label>
      <input type="text" name="affiliation" id="affiliation">
      <label>Amount</label>
      <input type="number" step="0.01" name="amount" id="amount" required>
      <label>Amount Paid (optional)</label>
      <input type="number" step="0.01" name="amount_paid" id="amount_paid" placeholder="0.00">
      <label>Mode of Payment</label>
      <select name="mode_of_payment" id="mode_of_payment">
        <option value="">-- Select --</option>
        <option value="Cash">Cash</option>
        <option value="Gcash">Gcash</option>
        <option value="Bank">Bank</option>
         <option value="Other">Other</option>
      </select>
      <div class="actions">
        <button type="button" class="btn" id="closeAdd">Cancel</button>
        <button type="submit" class="btn primary">Save</button>
      </div>
    </form>
  </div>
</div>

<div class="modal" id="modalPay">
  <div class="modal-content">
    <h2>Record Payment</h2>
    <form method="post" id="formPay" action="receivables.php">
      <input type="hidden" name="action" value="pay">
      <input type="hidden" name="id" id="pay_receivable_id">
      <p style="text-align: center; margin-bottom: 15px;"><strong>Client:</strong> <span id="pay_client_name" style="font-weight: normal;"></span></p>
      <p style="text-align: center; margin-bottom: 20px;"><strong>Current Balance:</strong> <span style="font-weight: bold; color: var(--danger);">₱<span id="pay_balance"></span></span></p>
      <label>Amount to Pay</label>
      <input type="number" step="0.01" name="paid_amount" id="paid_amount" required>
      <div class="actions">
        <button type="button" class="btn" id="closePay">Cancel</button>
        <button type="submit" class="btn primary">Confirm Payment</button>
      </div>
    </form>
  </div>
</div>

<form method="POST" action="receivables.php" id="pdfForm" target="_blank" style="display: none;">
    <input type="hidden" name="action" value="generate_current_view_pdf">
    <input type="hidden" name="pdf_data" id="pdfDataInput">
    <input type="hidden" name="pdf_filters" id="pdfFiltersInput">
</form>

<script>
/* DOM helpers & initial state */
const searchInput = document.getElementById('searchInput');
const showPendingBtn = document.getElementById('showPendingBtn');
const rowsPerPageInput = document.getElementById('rowsPerPageInput');
const allRows = Array.from(document.querySelectorAll('#receivablesTable tbody tr'));
const generatePdfBtn = document.getElementById('generatePdfBtn');
const pdfForm = document.getElementById('pdfForm');
const pdfDataInput = document.getElementById('pdfDataInput');
const pdfFiltersInput = document.getElementById('pdfFiltersInput');


let showingPending = false;
let rowsPerPage = parseInt(rowsPerPageInput.value) || 8;
let currentPage = 1;
let currentSortKey = 'created_at';
let currentSortAsc = false;


/* Add / Edit modal wiring */
const modalAdd = document.getElementById('modalAdd');
const formAdd = document.getElementById('formAdd');
const openAddBtn = document.getElementById('openAddBtn');
const closeAdd = document.getElementById('closeAdd');
const addTitle = document.getElementById('addTitle');

openAddBtn.onclick = () => { /* ... */
  formAdd.reset(); document.getElementById('formAddAction').value = 'add'; document.getElementById('formAddId').value = ''; document.getElementById('amount_paid').disabled = false; addTitle.textContent = 'New Receivable'; modalAdd.classList.add('active');
};
closeAdd.onclick = () => modalAdd.classList.remove('active');

document.querySelectorAll('.editBtn').forEach(btn=>{ /* ... */
  btn.onclick = (e)=>{
    const tr = btn.closest('tr'); const data = JSON.parse(tr.dataset.row); formAdd.reset();
    document.getElementById('formAddAction').value = 'edit'; document.getElementById('formAddId').value = data.id; document.getElementById('client_name').value = data.client_name; document.getElementById('affiliation').value = data.affiliation || ''; document.getElementById('amount').value = parseFloat(data.amount || 0).toFixed(2); document.getElementById('amount_paid').value = parseFloat(data.total_paid || 0).toFixed(2); document.getElementById('amount_paid').disabled = true; document.getElementById('mode_of_payment').value = data.mode_of_payment || ''; addTitle.textContent = 'Edit Receivable'; modalAdd.classList.add('active');
  }
});

/* Delete - SweetAlert */
document.querySelectorAll('.deleteBtn').forEach(btn=>{ /* ... */
  btn.onclick = ()=>{
    const data = JSON.parse(btn.closest('tr').dataset.row); const id = data.id;
    Swal.fire({ title: 'Are you sure?', text: `Delete receivable for ${data.client_name}?`, icon: 'warning', showCancelButton: true, confirmButtonText: 'Yes, delete it!', buttonsStyling: false, customClass: { confirmButton: 'btn primary', cancelButton: 'btn' }
    }).then((result) => { if (result.isConfirmed) { const fd = new FormData(); fd.append('action','delete'); fd.append('id', id); fetch('receivables.php', { method:'POST', body: fd }).then(()=> location.reload()); } });
  }
});

/* Pay modal wiring */
const modalPay = document.getElementById('modalPay');
const closePay = document.getElementById('closePay');
const formPay = document.getElementById('formPay');

document.querySelectorAll('.payBtn').forEach(btn=>{ /* ... */
  btn.onclick = ()=>{
    const data = JSON.parse(btn.closest('tr').dataset.row); formPay.reset();
    document.getElementById('pay_receivable_id').value = data.id; document.getElementById('pay_client_name').textContent = data.client_name; const balance = parseFloat(data.balance || 0); document.getElementById('pay_balance').textContent = balance.toFixed(2); document.getElementById('paid_amount').value = ''; document.getElementById('paid_amount').max = balance.toFixed(2); document.getElementById('paid_amount').placeholder = `Enter amount up to ${balance.toFixed(2)}`; modalPay.classList.add('active');
  }
});
closePay.onclick = ()=> modalPay.classList.remove('active');


/* --- Filter, Sort, Pagination, PDF Generation --- */

function getFilteredRows() { /* ... same ... */
  const q = searchInput.value.toLowerCase().trim();
  return allRows.filter(r => {
    const textContent = r.textContent.toLowerCase(); const matchesSearch = !q || textContent.includes(q); if (!matchesSearch) return false;
    if (showingPending) { const data = JSON.parse(r.dataset.row); const balance = parseFloat(data.balance || 0); return balance > 0.009; }
    return true;
  });
}

function sortRows(rowsToSort, key, asc) { /* ... same ... */
    rowsToSort.sort((a, b) => {
      const A_data = JSON.parse(a.dataset.row); const B_data = JSON.parse(b.dataset.row); const A = A_data[key]; const B = B_data[key];
      if (['amount', 'total_paid', 'balance', 'is_paid'].includes(key)) { const numA = parseFloat(A) || 0; const numB = parseFloat(B) || 0; return asc ? (numA - numB) : (numB - numA); }
      // Use full 'created_at' from original data for accurate date sorting
      if (key === 'date_created_only') { const dateA = new Date(A_data['created_at'] || 0); const dateB = new Date(B_data['created_at'] || 0); return asc ? dateA - dateB : dateB - dateA; }
      const sa = (A || '').toString().toLowerCase(); const sb = (B || '').toString().toLowerCase(); return asc ? sa.localeCompare(sb) : sb.localeCompare(sa);
    });
}


function renderTable() { /* ... same ... */
    const filteredRows = getFilteredRows(); sortRows(filteredRows, currentSortKey, currentSortAsc);
    const tbody = document.querySelector('#receivablesTable tbody'); tbody.innerHTML = '';
    const start = (currentPage - 1) * rowsPerPage; const end = start + rowsPerPage; const pageRows = filteredRows.slice(start, end);
    // Ensure all rows are hidden initially before appending the current page's rows
    allRows.forEach(r => r.style.display = 'none');
    pageRows.forEach(r => {
        r.style.display = ''; // Make sure rows for the current page are visible
        tbody.appendChild(r)
    });
    renderPagination(filteredRows.length);
}


function renderPagination(totalFilteredRows) { /* ... same ... */
  const container = document.getElementById('pagination'); container.innerHTML = ''; const totalPages = Math.max(1, Math.ceil(totalFilteredRows / rowsPerPage));
  if (totalPages <= 1) return;
  for (let i = 1; i <= totalPages; i++) { const b = document.createElement('button'); b.textContent = i; if (i === currentPage) b.classList.add('active'); b.onclick = () => { currentPage = i; renderTable(); }; container.appendChild(b); }
}

/* --- Event Listeners --- */
searchInput.addEventListener('input', () => { currentPage = 1; renderTable(); });
showPendingBtn.onclick = () => { showingPending = !showingPending; showPendingBtn.innerHTML = showingPending ? '<i class="fa fa-list"></i> Show All' : '<i class="fa fa-clock"></i> Pending Only'; showPendingBtn.classList.toggle('pending', showingPending); currentPage = 1; renderTable(); };
rowsPerPageInput.addEventListener('change', () => { let newRows = parseInt(rowsPerPageInput.value); if (newRows > 0) { rowsPerPage = newRows; } else { rowsPerPageInput.value = rowsPerPage; } currentPage = 1; renderTable(); });
document.querySelectorAll('th[data-key]').forEach(th => { /* ... same sort listener ... */
  th.addEventListener('click', () => {
    const key = th.dataset.key; if (currentSortKey === key) { currentSortAsc = !currentSortAsc; } else { currentSortKey = key; currentSortAsc = true; }
    document.querySelectorAll('.sort-icon').forEach(i => i.className = 'fa fa-sort sort-icon'); th.querySelector('.sort-icon').className = currentSortAsc ? 'fa fa-sort-up sort-icon' : 'fa fa-sort-down sort-icon';
    currentPage = 1; renderTable();
  });
});

/* PDF Generation Button Listener */
generatePdfBtn.addEventListener('click', () => {
    // *** Use currently displayed rows (respecting pagination) for PDF ***
    const visibleRows = Array.from(document.querySelectorAll('#receivablesTable tbody tr'))
                                    .filter(row => row.style.display !== 'none');

    // Sort only the visible rows again (to ensure order is exactly as seen)
    // sortRows(visibleRows, currentSortKey, currentSortAsc); // Re-sorting might reorder pagination, skip for now

    const dataForPdf = visibleRows.map(row => { // Map only visible rows
        const rowData = JSON.parse(row.dataset.row); const cells = row.getElementsByTagName('td');
        return {
            date: cells[0]?.textContent || '', client: cells[1]?.textContent || '', affiliation: cells[2]?.textContent || '', ref: cells[3]?.textContent || '',
            amount_display: cells[4]?.textContent || '₱ 0.00', paid_display: cells[5]?.textContent || '₱ 0.00', balance_display: cells[6]?.textContent || '₱ 0.00',
            mode: cells[7]?.textContent || '', status: cells[8]?.textContent || '',
            amount: parseFloat(rowData.amount || 0), paid: parseFloat(rowData.total_paid || 0), balance: parseFloat(rowData.balance || 0)
        };
    });
    const filtersForPdf = { search: searchInput.value, pending: showingPending, sortKey: currentSortKey, sortAsc: currentSortAsc, page: currentPage, perPage: rowsPerPage }; // Add page info
    pdfDataInput.value = JSON.stringify(dataForPdf); pdfFiltersInput.value = JSON.stringify(filtersForPdf); pdfForm.submit();
});


/* --- Form Validation & Modal Close --- */
renderTable(); // Initial render

formAdd.addEventListener('submit', function(e){ /* ... same validation ... */
  const client = document.getElementById('client_name').value.trim(); const amount = parseFloat(document.getElementById('amount').value);
  if (!client || isNaN(amount) || amount <= 0) { e.preventDefault(); Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Client name and valid amount (>0) required.', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } }); return false; }
});
formPay.addEventListener('submit', function(e){ /* ... same validation ... */
  e.preventDefault(); const amt = parseFloat(document.getElementById('paid_amount').value);
  if (isNaN(amt) || amt <= 0) { Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Enter valid payment amount (>0).', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } }); return false; }
  const balance = parseFloat(document.getElementById('pay_balance').textContent);
  if (amt > balance + 0.001) { Swal.fire({ title: 'Overpayment Detected', text: `Amount (₱${amt.toFixed(2)}) > balance (₱${balance.toFixed(2)}). Continue?`, icon: 'warning', showCancelButton: true, confirmButtonText: 'Yes, Overpay!', buttonsStyling: false, customClass: { confirmButton: 'btn primary', cancelButton: 'btn' } }).then((result) => { if (result.isConfirmed) { formPay.submit(); } }); }
  else { formPay.submit(); }
});
document.querySelectorAll('.modal').forEach(m=>{ /* ... same close logic ... */
  m.addEventListener('click', (ev)=>{ if (ev.target === m) m.classList.remove('active'); });
});
</script>
</body>
</html>