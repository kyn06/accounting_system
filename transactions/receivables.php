<?php
// transactions/receivables.php
session_start();

// PREVENT BROWSER CACHING
header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
header("Pragma: no-cache");
header("Expires: 0"); // Expire immediately

require_once '../db.php'; // Assumes $conn (mysqli object) is created here

// --- Include FPDF ---
$fpdf_path = __DIR__ . '/../fpdf/fpdf.php';
if (file_exists($fpdf_path)) {
    require_once($fpdf_path);
} else {
    define('FPDF_MISSING', true); // Flag missing library
}

if (!isset($_SESSION['user_id'])) { // Check user_id
    header("Location: ../index.php");
    exit();
}

// Use name from session, fallback to username, AND CONVERT TO UPPERCASE
$current_display_name = strtoupper($_SESSION['name'] ?? $_SESSION['username'] ?? 'User');
$role = $_SESSION['role'] ?? 'user';
$is_admin = ($role === 'admin');

// --- Enhanced FPDF Class (Keep as before) ---
class PDF extends FPDF {
    private $reportTitle = 'Report'; private $periodLabel = ''; private $generatedBy = '';
    private $colorAccent = [216, 76, 115]; private $colorLightPink = [255, 240, 246]; private $colorMuted = [107, 74, 87]; private $colorDark = [61, 26, 42]; private $colorBorder = [243, 208, 220];

    function setReportHeader($title, $period, $user) {
        if (function_exists('iconv')) {
            $this->reportTitle = @iconv('UTF-8', 'cp1252//IGNORE', $title) ?: $title;
            $this->periodLabel = @iconv('UTF-8', 'cp1252//IGNORE', $period) ?: $period;
            $this->generatedBy = @iconv('UTF-8', 'cp1252//IGNORE', $user) ?: $user;
        } else { $this->reportTitle = $title; $this->periodLabel = $period; $this->generatedBy = $user; }
    }
    function Header() { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->Rect(0, 0, $this->GetPageWidth(), 25, 'F'); $this->SetTextColor(255); $this->SetFont('Arial', 'B', 14); $this->SetY(8); $this->Cell(0, 8, 'RCRAO Accounting - '.$this->reportTitle, 0, 1, 'C'); $this->SetFont('Arial', '', 10); $this->Cell(0, 6, $this->periodLabel, 0, 1, 'C'); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetY(30); }
    function Footer() { $this->SetY(-15); $this->SetFont('Arial', 'I', 8); $this->SetTextColor(150); $generatedByStr = 'Generated By: ' . $this->generatedBy . ' on ' . date('Y-m-d H:i'); if (function_exists('iconv')) { $generatedByStr = @iconv('UTF-8', 'cp1252//IGNORE', $generatedByStr) ?: $generatedByStr; } $this->Cell(0, 5, $generatedByStr, 0, 1, 'L'); $this->Cell(0, 5, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C'); }
    function BasicTable($header, $data) { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->SetTextColor(255); $this->SetDrawColor(max(0, $this->colorAccent[0]-20), max(0, $this->colorAccent[1]-20), max(0, $this->colorAccent[2]-20)); $this->SetLineWidth(.3); $this->SetFont('', 'B', 9); $widths = $this->CalculateWidths($header, $data); for ($i = 0; $i < count($header); $i++) { $headerText = function_exists('iconv') ? @iconv('UTF-8', 'cp1252//IGNORE', $header[$i]) ?: $header[$i] : $header[$i]; $this->Cell($widths[$i], 7, $headerText, 1, 0, 'C', true); } $this->Ln(); $this->SetFont('Arial', '', 8); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetFillColor(255); $this->SetDrawColor($this->colorBorder[0], $this->colorBorder[1], $this->colorBorder[2]); $fill = false;
        foreach ($data as $row) {
            $this->SetFillColor($fill ? 245 : 255);
            for ($i = 0; $i < count($header); $i++) {
                $cellValue = $row[$i] ?? ''; $originalValue = $cellValue;
                if (function_exists('iconv') && mb_detect_encoding((string)$cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', (string)$cellValue)) {
                    $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', (string)$cellValue);
                    if ($convertedValue !== false) $cellValue = $convertedValue;
                }
                $cleanOriginalValue = preg_replace('/[^0-9.]/', '', (string)$originalValue); // Cast to string
                $align = 'L';
                if (strpos((string)$originalValue, '₱') !== false) { // Cast to string
                    $align = 'R';
                } elseif (in_array($header[$i], ['Status', 'In-Charge'])) { // Center Status and In-Charge
                    $align = 'C';
                }
                $this->Cell($widths[$i], 6, (string)$cellValue, 'LR', 0, $align, true); // Cast to string
            }
            $this->Ln();
            $fill = !$fill;
        }
        $this->Cell(array_sum($widths), 0, '', 'T'); $this->Ln(4);
    }
    function CalculateWidths($header, $data) {
        $num_cols = count($header);
        $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin;
        $widths = [];
        for ($i = 0; $i < $num_cols; $i++) { $widths[$i] = $this->GetStringWidth($header[$i]) + 8; }
        $sampleData = array_slice($data, 0, 30);
        foreach ($sampleData as $row) {
            if (!is_array($row)) continue;
            for ($i = 0; $i < $num_cols; $i++) {
                $cellValue = $row[$i] ?? '';
                if (function_exists('iconv') && mb_detect_encoding((string)$cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', (string)$cellValue)) {
                    $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', (string)$cellValue);
                    if($convertedValue !== false) $cellValue = $convertedValue;
                }
                $widths[$i] = max($widths[$i], $this->GetStringWidth((string)$cellValue) + 8);
            }
        }
        $totalWidth = array_sum($widths);
        if ($totalWidth <= 0 || $num_cols === 0) { return []; }
        $scaleFactor = $pageWidth / $totalWidth;
        for ($i = 0; $i < $num_cols; $i++) { $widths[$i] *= $scaleFactor; }
        return $widths;
    }
}
// --- END FPDF Class ---

// --- Handle POST actions ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';
    function required($key) { return isset($_POST[$key]) && trim((string)$_POST[$key]) !== ''; } // Helper

    // --- PDF Generation Action ---
    if ($action === 'generate_current_view_pdf') {
        if (defined('FPDF_MISSING') || !file_exists($fpdf_path)) {
            echo "Error: The PDF library (FPDF) is missing from the server. Please contact an administrator.";
            exit();
        }

        $jsonData = $_POST['pdf_data'] ?? '[]';
        $data = json_decode($jsonData, true);
        $filters = json_decode($_POST['pdf_filters'] ?? '{}', true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            echo "Error: Could not read the data from the page. It may be corrupted. Error: ".json_last_error_msg();
            exit();
        }

        $pdf = new PDF('L', 'mm', 'A4'); // Landscape
        $pdf->AliasNbPages();

        $reportTitle = "Receivables - Current View";
        $periodLabel = "Filters: ";
        $filterParts = [];
        if (!empty($filters['search'])) $filterParts[] = "Search='{$filters['search']}'";
        if (!empty($filters['pending'])) $filterParts[] = "Pending Only";
        if (empty($filterParts)) $filterParts[] = "None";
        $periodLabel .= implode(', ', $filterParts);
        $sortKeyLabel = str_replace(['_','only'], [' ',''], $filters['sortKey'] ?? 'Default');
        $periodLabel .= " | Sorted By: " . ucwords($sortKeyLabel) . " " . ($filters['sortAsc'] ? '(Asc)' : '(Desc)');

        $pdf->setReportHeader($reportTitle, $periodLabel, $current_display_name);
        $pdf->AddPage();
        $pdf->SetFont('Arial', '', 8);

        if (!empty($data)) {
            $header = ['Date Created', 'Client', 'Affiliation', 'Ref #', 'Amount', 'Paid', 'Balance', 'In-Charge', 'Status'];
            $table_data = [];
            $total_amount = 0; $total_paid = 0; $total_balance = 0;

            foreach ($data as $row) {
                $rowData = [
                    $row['date'] ?? '', $row['client'] ?? '', $row['affiliation'] ?? '', $row['ref'] ?? '',
                    $row['amount_display'] ?? '₱ 0.00', $row['paid_display'] ?? '₱ 0.00',
                    $row['balance_display'] ?? '₱ 0.00',
                    $row['incharge'] ?? '', // Added
                    $row['status'] ?? '',
                ];
                $table_data[] = $rowData;
                $total_amount += $row['amount'] ?? 0; $total_paid += $row['paid'] ?? 0; $total_balance += $row['balance'] ?? 0;
            }

            $pdf->BasicTable($header, $table_data);
            $pdf->Ln(5);
            $pdf->SetFont('Arial', 'B', 10);

            $totalAmountStr = 'Total Amount: ₱ ' . number_format($total_amount, 2);
            $totalPaidStr = 'Total Paid: ₱ ' . number_format($total_paid, 2);
            $totalBalanceStr = 'Total Outstanding Balance: ₱ ' . number_format($total_balance, 2);
            if (function_exists('iconv')) {
                $totalAmountStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalAmountStr) ?: $totalAmountStr;
                $totalPaidStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalPaidStr) ?: $totalPaidStr;
                $totalBalanceStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalBalanceStr) ?: $totalBalanceStr;
            }
            $pdf->Cell(0, 6, $totalAmountStr, 0, 1, 'R');
            $pdf->Cell(0, 6, $totalPaidStr, 0, 1, 'R');
            $pdf->Cell(0, 6, $totalBalanceStr, 0, 1, 'R');

        } else {
            $pdf->SetFont('Arial', '', 10);
            $pdf->Cell(0, 10, 'No data matching the current view found.', 0, 1, 'C');
        }

        $filename = "Receivables_CurrentView_" . date('Ymd_His') . ".pdf";
        if (ob_get_level()) { ob_end_clean(); }
        $pdf->Output('D', $filename);
        exit();
    }
    // --- End PDF Generation ---

    elseif ($action === 'add') {
        // Validation
        if (!required('client_name') || !isset($_POST['amount'])) {
            $_SESSION['error_message'] = "Please fill in all required fields: Client Name and Amount.";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            header("Location: receivables.php"); exit();
        }

        $client_name = strtoupper(trim($_POST['client_name']));
        $affiliation = trim($_POST['affiliation'] ?? ''); // Affiliation is optional
        $amount = (float)($_POST['amount'] ?? 0);
        $amount_paid = (float)($_POST['amount_paid'] ?? 0);
        $mode_of_payment_initial = trim($_POST['mode_of_payment'] ?? '');
        $created_at_dt = date('Y-m-d H:i:s');
        $person_in_charge = $current_display_name;

        // MODIFIED: More user-friendly validation
        if ($amount <= 0) {
            $_SESSION['error_message'] = "The 'Amount' must be a positive number (greater than 0).";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            header("Location: receivables.php"); exit();
        }
        if ($amount_paid < 0) {
             $_SESSION['error_message'] = "The 'Amount Paid' cannot be a negative number.";
             $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
             header("Location: receivables.php"); exit();
        }
        if ($amount_paid > $amount + 0.009) {
            $_SESSION['error_message'] = "The 'Amount Paid' (₱" . number_format($amount_paid, 2) . ") cannot be more than the total 'Amount' (₱" . number_format($amount, 2) . ").";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            header("Location: receivables.php"); exit();
        }
        if ($amount_paid > 0.009 && empty($mode_of_payment_initial)) {
            $_SESSION['error_message'] = "Please select a 'Mode of Payment' when adding an initial payment.";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            header("Location: receivables.php"); exit();
        }

        $conn->begin_transaction();
        $new_receivable_id = null; $new_collection_id = null;
        $receivable_ref = "RCV-" . date('YmdHis') . "-" . rand(1000, 9999);

        try {
            $balance = $amount - $amount_paid;
            $is_paid = ($balance <= 0.009) ? 1 : 0;

            $stmt_recv = $conn->prepare("INSERT INTO receivables (client_name, affiliation, amount, amount_paid, person_in_charge, is_paid, created_at, reference_number, transaction_datetime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
            if (!$stmt_recv) throw new Exception("A database error occurred while preparing the receivable. Please try again.");
            $stmt_recv->bind_param("ssddsisss", $client_name, $affiliation, $amount, $amount_paid, $person_in_charge, $is_paid, $created_at_dt, $receivable_ref, $created_at_dt);
            if (!$stmt_recv->execute()) throw new Exception("A database error occurred while saving the receivable. Please check for duplicates and try again.");
            $new_receivable_id = $conn->insert_id;
            $stmt_recv->close();

            if ($amount_paid > 0.009) {
                $collection_ref = "COLL-" . date("YmdHis") . "-" . rand(1000, 9999);
                $stmt_coll = $conn->prepare("INSERT INTO collections (client_name, affiliation, reference_number, amount, cash_received, mode_of_payment, person_in_charge, created_at, transaction_datetime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
                if (!$stmt_coll) throw new Exception("Database error: Could not prepare the initial payment record.");
                $stmt_coll->bind_param("sssddssss", $client_name, $affiliation, $collection_ref, $amount_paid, $amount_paid, $mode_of_payment_initial, $person_in_charge, $created_at_dt, $created_at_dt);
                if (!$stmt_coll->execute()) throw new Exception("Database error: Could not save the initial payment record.");
                $new_collection_id = $conn->insert_id;
                $stmt_coll->close();

                $stmt_link = $conn->prepare("INSERT INTO coll_rec_link (coll_id, rec_id) VALUES (?, ?)");
                if (!$stmt_link) throw new Exception("Database error: Could not link the payment to the receivable.");
                $stmt_link->bind_param("ii", $new_collection_id, $new_receivable_id);
                if (!$stmt_link->execute()) throw new Exception("Database error: Could not finalize the payment link.");
                $stmt_link->close();
                $_SESSION['success_message'] = "Receivable added and the initial payment was recorded successfully.";
            } else {
                $_SESSION['success_message'] = "Receivable added successfully.";
            }
            $conn->commit();

            // --- ADD LOGGING ---
            try {
                $log_user_id = $_SESSION['user_id'] ?? 0;
                $log_username = $person_in_charge; // Already uppercase
                $log_details = "User '{$log_username}' created Receivable {$receivable_ref} for '{$client_name}'. Amount: ₱" . number_format($amount, 2) . ($amount_paid > 0.009 ? " (Initial Payment: ₱".number_format($amount_paid, 2).")" : "");
                $log_stmt = $conn->prepare("INSERT INTO transaction_logs (user_id, username, action_type, entity_type, entity_id, details, log_timestamp) VALUES (?, ?, 'CREATE', 'Receivable', ?, ?, ?)");
                if ($log_stmt) {
                    $log_stmt->bind_param("isiss", $log_user_id, $log_username, $new_receivable_id, $log_details, $created_at_dt);
                    $log_stmt->execute();
                    $log_stmt->close();
                }
            } catch (Exception $log_e) { /* Optional: Log error to file */ }
            // --- END LOGGING ---

        } catch (Exception $e) {
            $conn->rollback();
            $_SESSION['error_message'] = $e->getMessage(); // MODIFIED: Show the user-friendly exception message
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data on transaction fail
        }
    }
    elseif ($action === 'edit') {
        $rec_id = intval($_POST['rec_id'] ?? 0);
        if ($rec_id <= 0 || !required('client_name') || !isset($_POST['amount'])) {
            $_SESSION['error_message'] = "Could not edit. Required information (ID, Client Name, or Amount) was missing.";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            header("Location: receivables.php"); exit();
        }
        
        $client_name = strtoupper(trim($_POST['client_name']));
        $affiliation = trim($_POST['affiliation'] ?? ''); // Affiliation is optional
        $new_amount = (float)($_POST['amount'] ?? 0);

        if ($new_amount <= 0) {
            $_SESSION['error_message'] = "The 'Amount' must be a positive number (greater than 0).";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            header("Location: receivables.php"); exit();
        }

        $current_paid = 0;
        $stmt_select = $conn->prepare("SELECT amount_paid FROM receivables WHERE rec_id = ?");
        if ($stmt_select) {
            $stmt_select->bind_param("i", $rec_id); $stmt_select->execute(); $stmt_select->bind_result($current_paid); $stmt_select->fetch(); $stmt_select->close();
        } else {
            $_SESSION['error_message'] = "Could not find the original receivable record. It might have been deleted.";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            header("Location: receivables.php"); exit();
        }
        
        if ($new_amount < $current_paid - 0.009) {
            $_SESSION['error_message'] = "The new 'Amount' (₱" . number_format($new_amount, 2) . ") cannot be less than the amount already paid (₱" . number_format($current_paid, 2) . ").";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            header("Location: receivables.php"); exit();
        }

        $link_count = 0;
        $stmt_check = $conn->prepare("SELECT COUNT(*) FROM coll_rec_link WHERE rec_id = ?");
        if($stmt_check){
            $stmt_check->bind_param("i", $rec_id); $stmt_check->execute(); $stmt_check->bind_result($link_count); $stmt_check->fetch(); $stmt_check->close();
            if ($link_count > 0) {
                $_SESSION['warning_message'] = "This receivable is linked to {$link_count} payment(s). Please double-check that the linked collection records are still correct.";
            }
        }

        $new_balance = $new_amount - $current_paid;
        $new_is_paid = ($new_balance <= 0.009) ? 1 : 0;

        $stmt_update = $conn->prepare("UPDATE receivables SET client_name = ?, affiliation = ?, amount = ?, is_paid = ?, person_in_charge = ?, transaction_datetime = NOW() WHERE rec_id = ?");
        if ($stmt_update) {
            $stmt_update->bind_param("ssdisi", $client_name, $affiliation, $new_amount, $new_is_paid, $current_display_name, $rec_id);
            if ($stmt_update->execute()) {
                $_SESSION['success_message'] = "Receivable updated successfully.";
                // --- ADD LOGGING ---
                try {
                    $log_user_id = $_SESSION['user_id'] ?? 0;
                    $log_username = $current_display_name; // Already uppercase
                    $log_details = "User '{$log_username}' edited Receivable ID {$rec_id} ('{$client_name}'). New Amount: ₱" . number_format($new_amount, 2);
                    $log_stmt = $conn->prepare("INSERT INTO transaction_logs (user_id, username, action_type, entity_type, entity_id, details) VALUES (?, ?, 'UPDATE', 'Receivable', ?, ?)");
                    if ($log_stmt) {
                        $log_stmt->bind_param("isis", $log_user_id, $log_username, $rec_id, $log_details);
                        $log_stmt->execute();
                        $log_stmt->close();
                    }
                } catch (Exception $log_e) { /* Optional: Log error to file */ }
                // --- END LOGGING ---
            }
            else {
                $_SESSION['error_message'] = "A database error occurred while updating. The changes were not saved.";
                $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
            }
            $stmt_update->close();
        } else {
            $_SESSION['error_message'] = "A database error occurred. Could not prepare the update.";
            $_SESSION['form_data'] = $_POST; // MODIFIED: Keep form data
        }
    }
    elseif ($action === 'pay') {
        $rec_id_to_pay = (int)$_POST['rec_id'] ?? 0;
        
        // MODIFIED: Clearer validation messages
        if ($rec_id_to_pay <= 0 || !isset($_POST['paid_amount'])) {
            $_SESSION['error_message'] = "Could not record payment. The item ID or paid amount was missing.";
            // Not persisting 'pay' modal data as it's simple to re-open
            header("Location: receivables.php"); exit();
        }
        
        $new_payment = (float)($_POST['paid_amount'] ?? 0);
        $payment_time = date('Y-m-d H:i:s');
        $person_in_charge = $current_display_name;
        $payment_mode = trim($_POST['payment_mode'] ?? '');

        if ($new_payment <= 0) {
            $_SESSION['error_message'] = "The 'Amount to Pay' must be a positive number (greater than 0).";
            header("Location: receivables.php"); exit(); // Not persisting
        }
        if (empty($payment_mode)) {
            $_SESSION['error_message'] = "Please select a 'Mode of Payment' for this transaction.";
            header("Location: receivables.php"); exit(); // Not persisting
        }

        $conn->begin_transaction();
        $new_collection_id = null;
        $client_name = ''; $new_balance = 0;

        try {
            $current_amount = 0; $current_paid = 0; $affiliation = ''; $receivable_ref = '';
            $stmt_select = $conn->prepare("SELECT client_name, affiliation, amount, amount_paid, reference_number FROM receivables WHERE rec_id = ? FOR UPDATE");
            if (!$stmt_select) throw new Exception("Database error: Could not find the receivable.");
            $stmt_select->bind_param("i", $rec_id_to_pay);
            if(!$stmt_select->execute()) throw new Exception("Database error: Could not access the receivable record.");
            $stmt_select->bind_result($client_name, $affiliation, $current_amount, $current_paid, $receivable_ref);
            if(!$stmt_select->fetch()){ throw new Exception("Receivable not found. It might have been deleted by another user."); }
            $stmt_select->close();

            $payment_mode_for_collection = $payment_mode; 

            $current_balance = $current_amount - $current_paid;
            if ($new_payment > $current_balance + 0.009) {
                $_SESSION['warning_message'] = "The payment of ₱" . number_format($new_payment, 2) . " was more than the balance of ₱" . number_format($current_balance, 2) . ". The receivable is now marked as paid.";
            }

            $new_total_paid = $current_paid + $new_payment;
            $new_balance = $current_amount - $new_total_paid;
            $new_is_paid = ($new_balance <= 0.009) ? 1 : 0;
            $stmt_update = $conn->prepare("UPDATE receivables SET amount_paid = ?, is_paid = ?, transaction_datetime = ? WHERE rec_id = ?");
            if (!$stmt_update) throw new Exception("Database error: Could not prepare to update the balance.");
            $stmt_update->bind_param("disi", $new_total_paid, $new_is_paid, $payment_time, $rec_id_to_pay);
            if(!$stmt_update->execute()) throw new Exception("Database error: Could not save the new balance.");
            $stmt_update->close();

            $collection_ref = "COLL-" . date("YmdHis") . "-" . rand(1000, 9999);
            $stmt_coll = $conn->prepare("INSERT INTO collections (client_name, affiliation, reference_number, amount, cash_received, mode_of_payment, person_in_charge, created_at, transaction_datetime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
            if (!$stmt_coll) throw new Exception("Database error: Could not prepare to save the payment record.");
            $stmt_coll->bind_param("sssddssss", $client_name, $affiliation, $collection_ref, $new_payment, $new_payment, $payment_mode_for_collection, $person_in_charge, $payment_time, $payment_time);
            if(!$stmt_coll->execute()) throw new Exception("Database error: Could not save the payment record.");
            $new_collection_id = $conn->insert_id;
            $stmt_coll->close();

            $stmt_link = $conn->prepare("INSERT INTO coll_rec_link (coll_id, rec_id) VALUES (?, ?)");
            if (!$stmt_link) throw new Exception("Database error: Could not prepare to link the payment.");
            $stmt_link->bind_param("ii", $new_collection_id, $rec_id_to_pay);
            if (!$stmt_link->execute()) throw new Exception("Database error: Could not finalize the payment link.");
            $stmt_link->close();

            $conn->commit();
            $_SESSION['success_message'] = "Payment of ₱" . number_format($new_payment, 2) . " was recorded successfully.";

            // --- ADD LOGGING for PAYMENT ---
            try {
                $log_user_id = $_SESSION['user_id'] ?? 0;
                $log_username = $person_in_charge; // Already uppercase
                $log_details = "User '{$log_username}' recorded payment of ₱" . number_format($new_payment, 2) . " for Receivable ID {$rec_id_to_pay} ('{$client_name}'). New Balance: ₱" . number_format($new_balance, 2) . ".";
                $log_stmt = $conn->prepare("INSERT INTO transaction_logs (user_id, username, action_type, entity_type, entity_id, details, log_timestamp) VALUES (?, ?, 'PAY', 'Receivable', ?, ?, ?)");
                if ($log_stmt) {
                    $log_stmt->bind_param("isiss", $log_user_id, $log_username, $rec_id_to_pay, $log_details, $payment_time);
                    $log_stmt->execute();
                    $log_stmt->close();
                }
            } catch (Exception $log_e) { /* Optional: Log error to file */ }
            // --- END LOGGING ---

        } catch (Exception $e) {
            $conn->rollback();
            $_SESSION['error_message'] = $e->getMessage(); // MODIFIED: Show the user-friendly exception message
        }
    }
    elseif ($action === 'delete') {
        $rec_id = intval($_POST['rec_id'] ?? 0);
        if ($rec_id > 0) {
            // --- ADD LOGGING ---
            try {
                $ref_num_log = 'ID ' . $rec_id; $client_name_log = 'Unknown Client';
                $stmt_get = $conn->prepare("SELECT reference_number, client_name FROM receivables WHERE rec_id = ?");
                if($stmt_get){
                    $stmt_get->bind_param("i", $rec_id);
                    if($stmt_get->execute()) { $stmt_get->bind_result($ref_num_log, $client_name_log); $stmt_get->fetch(); }
                    $stmt_get->close();
                }
                $log_user_id = $_SESSION['user_id'] ?? 0; $log_username = $current_display_name; // Already uppercase
                $log_details = "User '{$log_username}' DELETED Receivable '{$ref_num_log}' for client '" . strtoupper($client_name_log) . "'."; // Ensure log name is upper
                $log_stmt = $conn->prepare("INSERT INTO transaction_logs (user_id, username, action_type, entity_type, entity_id, details) VALUES (?, ?, 'DELETE', 'Receivable', ?, ?)");
                if ($log_stmt) { $log_stmt->bind_param("isis", $log_user_id, $log_username, $rec_id, $log_details); $log_stmt->execute(); $log_stmt->close(); }
            } catch (Exception $log_e) { /* Optional: Log error to file */ }
            // --- END LOGGING ---

            $link_count = 0;
            $stmt_check = $conn->prepare("SELECT COUNT(*) FROM coll_rec_link WHERE rec_id = ?");
            if($stmt_check){
                $stmt_check->bind_param("i", $rec_id); $stmt_check->execute(); $stmt_check->bind_result($link_count); $stmt_check->fetch(); $stmt_check->close();
                if ($link_count > 0) { $_SESSION['warning_message'] = "Warning: This receivable was linked to {$link_count} payment(s). The original payment record(s) in 'Collections' were NOT deleted."; }
            }

            $stmt = $conn->prepare("DELETE FROM receivables WHERE rec_id = ?");
            if ($stmt) {
                $stmt->bind_param("i", $rec_id);
                if ($stmt->execute()) { $_SESSION['success_message'] = "Receivable deleted successfully."; }
                else { $_SESSION['error_message'] = "Error: Could not delete the receivable. It might be linked to other records."; }
                $stmt->close();
            } else {
                $_SESSION['error_message'] = "A database error occurred. Could not prepare the delete operation.";
            }
        } else { $_SESSION['error_message'] = "Invalid ID. The item could not be found to delete."; }
    }

    header("Location: receivables.php");
    exit();
}

// === Fetch initial data - ADDED person_in_charge ===
$receivables_q = $conn->query("
    SELECT rec_id, client_name, affiliation, amount, amount_paid, person_in_charge, is_paid, created_at, reference_number,
           IFNULL(amount_paid,0) AS total_paid,
           (amount - IFNULL(amount_paid,0)) AS balance,
           DATE(created_at) as date_created_only
    FROM receivables
    ORDER BY created_at DESC
");

$error_message = $_SESSION['error_message'] ?? null;
$success_message = $_SESSION['success_message'] ?? null;
$warning_message = $_SESSION['warning_message'] ?? null;
unset($_SESSION['error_message'], $_SESSION['success_message'], $_SESSION['warning_message']);

// **NEW**: Get form data for repopulating modal
$form_data = $_SESSION['form_data'] ?? null;
$form_action = $form_data['action'] ?? null;
unset($_SESSION['form_data']);

if ($receivables_q === false && !$error_message) {
    $error_message = "A database error occurred while loading receivables. Please refresh the page.";
}

?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Receivables — RCRAO Accounting</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style> /* CSS remains the same */
:root {
  --accent:#d84c73; --accent-light:#ffb6c1; --bg1:#fff0f6; --bg2:#ffe6ee; --card:#fff;
  --muted:#6b4a57; --shadow:0 8px 25px rgba(216,76,115,0.1);
  --sidebar-collapsed:72px; --sidebar-expanded:230px;
    --accent-dark: #b83b5e; --success: #28a745; --danger: #dc3545; --warning: #ffc107;
}
*{box-sizing:border-box;font-family:"Poppins",sans-serif;margin:0;padding:0}
body{background:linear-gradient(135deg,var(--bg1),var(--bg2));color:var(--muted);overflow-x:hidden}
.sidebar{position:fixed;top:0;left:0;height:100vh;width:var(--sidebar-collapsed);background:linear-gradient(180deg,var(--accent) 0%,#ff7ea1 100%); display:flex;flex-direction:column;justify-content:space-between;padding:12px;transition:width .3s ease;z-index:1001}
.sidebar:hover,.sidebar.expanded{width:var(--sidebar-expanded);box-shadow:var(--shadow)}
nav.side-menu{margin-top:20px;display:flex;flex-direction:column;gap:8px}
nav.side-menu a{display:flex;align-items:center;gap:15px;padding:12px;color:#fff;text-decoration:none;border-radius:8px;font-weight:500;transition: all .2s ease;}
nav.side-menu a i{width:24px;text-align:center; font-size: 1.1em; transition: transform 0.2s ease;}
nav.side-menu a .label{display:none; white-space: nowrap; opacity: 0; transition: opacity 0.2s ease;}
.sidebar:hover nav.side-menu a .label,.sidebar.expanded nav.side-menu a .label{display:inline; opacity: 1;}
nav.side-menu a:hover{background:rgba(255,255,255,0.2);transform:translateX(8px); }
nav.side-menu a.active{background:rgba(255,255,255,0.15);}
nav.side-menu a:hover i { transform: scale(1.1); }
.main{margin-left:var(--sidebar-collapsed);padding:28px;transition: margin-left .3s ease;}
.header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}
.header h1{color:var(--accent-dark);font-size:24px;font-weight:700}
.user-info{font-size:14px;font-weight:600;background:var(--card);padding:10px 14px;border-radius:10px;box-shadow:var(--shadow)}
.toolbar{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:18px;background:var(--card);padding:14px 16px;border-radius:12px;box-shadow:var(--shadow)}
.toolbar input{padding:8px 12px;border-radius:8px;border:1px solid #ccc;width:220px}
.btn{ border: none; border-radius: 8px; padding: 10px 18px; font-weight: 600; cursor: pointer; transition: all 0.25s ease; background: var(--accent-light); color: var(--accent-dark); margin: 0 5px; font-family:"Poppins",sans-serif; font-size: 14px;}
.btn:hover { background: var(--accent); color: #fff; transform: translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.2);}
.btn.primary{ background:var(--accent); color:#fff;}
.btn.primary:hover{ background: var(--accent-dark); transform:translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.3);}
.btn.pending{background:#f5a3b0;color:#fff}
.btn.pending:hover{background:#ff91a4}
.btn.small{padding:8px 12px;font-size:13px}
.btn i { margin-right: 8px; }
.top-tabs{display:flex;gap:8px;margin-bottom:18px}
.top-tabs .tab{background:var(--card);padding:10px 16px;border-radius:8px;cursor:pointer;font-weight:600;color:var(--muted);box-shadow:var(--shadow);transition:.2s}
.top-tabs .tab.active{background:var(--accent);color:#fff}
.table-card{background:var(--card);border-radius:14px;padding:16px;box-shadow:var(--shadow);overflow-x:auto}
table{width:100%;border-collapse:collapse;text-align:left; font-size: 13px;}
th,td{padding:10px 12px;border-bottom:1px solid #f3d0dc; white-space: nowrap;}
th{background:#ffd6e5;color:#6b4a57;cursor:pointer;user-select:none;position:relative; font-weight: 600;}
th .sort-icon{margin-left:6px;font-size:11px;color:#888}
tr:hover{background:#fff6f9}
.unpaid-row{background:#fff0f4; font-weight: 500;}
.icon-btn{background:none;border:none;color:var(--accent);cursor:pointer;font-size:15px;margin:0 4px;transition:.2s}
.icon-btn:hover{transform:scale(1.15); color: var(--accent-dark);}
.pagination{text-align:center;margin-top:18px;display:flex;justify-content:center;gap:6px;flex-wrap:wrap}
.pagination button{border:none;background:var(--accent);color:#fff;padding:6px 12px;border-radius:6px;cursor:pointer; font-size: 13px;}
.pagination button.active{background:#ff91a4}
.modal { position: fixed; inset: 0; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(5px); padding: 15px;}
.modal.active { display: flex; animation: fadeIn .3s ease; }
.modal-content { background: var(--card); border-radius: 16px; padding: 30px; width: 450px; max-width: 95%; box-shadow: 0 10px 40px rgba(0,0,0,0.15); animation: slideUp .35s ease; position: relative; }
.modal h2 { color: var(--accent-dark); text-align: center; margin-bottom: 25px; font-weight: 700; font-size: 20px;}
.modal form label { font-size: 14px; font-weight: 600; color: var(--muted); display: block; margin-top: 15px; margin-bottom: 5px; }
.modal form input, .modal form select { width: 100%; padding: 12px 15px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9; font-size: 14px; transition: all 0.2s ease; font-family:"Poppins",sans-serif; }
.modal form input:focus, .modal form select:focus { outline: none; border-color: var(--accent); background: #fff; box-shadow: 0 0 0 3px rgba(216, 76, 115, 0.15); }
/* MODIFIED: Add style for uppercase input */
.modal form input[name="client_name"] { text-transform: uppercase; }
.modal .actions { display: flex; justify-content: flex-end; margin-top: 25px; gap: 10px; }
@keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
@keyframes slideUp { from { transform: translateY(15px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
.status-paid { color: var(--success); font-weight: 700; }
.status-pending { color: var(--danger); font-weight: 700; }
</style>
</head>
<body>
<aside class="sidebar">
    <nav class="side-menu">
        <?php if ($role === 'admin'): ?>
        <a href="../dashboard.php"><i class="fa fa-chart-pie"></i><span class="label">Dashboard</span></a>
        <?php endif; ?>
        <a href="collections.php"><i class="fa fa-cash-register"></i><span class="label">Transactions</span></a>
        <?php if ($role === 'admin'): ?>
        <a href="../users.php"><i class="fa fa-users-cog"></i><span class="label">Users</span></a>
        <?php endif; ?>
        <a href="../logout.php"><i class="fa fa-sign-out-alt"></i><span class="label">Logout</span></a>
    </nav>
</aside>

<main class="main">
    <div class="header">
        <h1>Receivables</h1>
        <div class="user-info">Logged in as: <b><?= htmlspecialchars($current_display_name) ?></b></div>
    </div>

    <div class="top-tabs">
        <div class="tab" onclick="location.href='collections.php'">Collections</div>
        <div class="tab active">Receivables</div>
        <div class="tab" onclick="location.href='expenses.php'">Expenses</div>
        <?php if ($is_admin): ?>
            <div class="tab" onclick="location.href='transaction_logs.php'">Logs</div>
        <?php endif; ?>
    </div>

    <div class="toolbar">
        <input type="text" id="searchInput" placeholder="🔍 Search...">
        <button class="btn primary" id="openAddBtn"><i class="fa fa-plus"></i> New Receivable</button>
        <button class="btn small" id="showPendingBtn"><i class="fa fa-clock"></i> Pending Only</button>
        <button class="btn small" id="generatePdfBtn" style="margin-left: 10px;"><i class="fa fa-file-pdf"></i> PDF Current View</button>
        <div style="margin-left:auto">
            <input type="number" id="rowsPerPageInput" placeholder="Rows / page" style="width:120px;padding:8px;border-radius:8px;border:1px solid #ddd" value="8" min="1">
        </div>
    </div>

    <div class="table-card">
        <table id="receivablesTable">
            <thead>
                <tr>
                    <th data-key="date_created_only">Date Created <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="client_name">Client <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="affiliation">Affiliation <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="reference_number">Ref # <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="amount">Amount <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="total_paid">Paid <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="balance">Balance <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="person_in_charge">In-Charge <i class="fa fa-sort sort-icon"></i></th> 
                    <th data-key="is_paid">Status <i class="fa fa-sort sort-icon"></i></th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php
                if ($receivables_q) {
                    while ($r = $receivables_q->fetch_assoc()):
                        $primary_key = $r['rec_id'] ?? null;
                        if ($primary_key === null) continue;

                        $data = htmlentities(json_encode($r), ENT_QUOTES, 'UTF-8');
                        $is_paid = intval($r['is_paid']);
                        $row_class = $is_paid ? '' : 'unpaid-row';
                        $date_formatted = !empty($r['date_created_only']) ? date('M d, Y', strtotime($r['date_created_only'])) : '';
                        $status_text = $is_paid ? 'Paid' : 'Pending';
                        $status_class = $is_paid ? 'status-paid' : 'status-pending';
                ?>
                <tr class="<?= $row_class ?>" data-row='<?= $data ?>'>
                    <td><?= $date_formatted ?></td>
                    <td><?= htmlspecialchars(strtoupper($r['client_name'])) ?></td>
                    <td><?= htmlspecialchars($r['affiliation']) ?></td>
                    <td><?= htmlspecialchars($r['reference_number']) ?></td>
                    <td>₱<?= number_format($r['amount'],2) ?></td>
                    <td>₱<?= number_format($r['total_paid'],2) ?></td>
                    <td>₱<?= number_format($r['balance'],2) ?></td>
                    <td><?= htmlspecialchars(strtoupper($r['person_in_charge'])) ?></td> 
                    <td><span class="<?= $status_class ?>"><?= $status_text ?></span></td>
                    <td>
                        <?php if (!$is_paid): ?>
                            <button class="icon-btn payBtn" title="Record payment"><i class="fa fa-money-bill"></i></button>
                        <?php endif; ?>
                        <button class="icon-btn editBtn" title="Edit"><i class="fa fa-pen"></i></button>
                        <?php if ($is_admin): ?>
                            <button class="icon-btn deleteBtn" title="Delete"><i class="fa fa-trash"></i></button>
                        <?php endif; ?>
                    </td>
                </tr>
                <?php
                    endwhile;
                    $receivables_q->free();
                } else {
                    echo "<tr><td colspan='10' style='text-align:center;color:var(--danger);'>Could not load data. An error was reported.</td></tr>";
                }
                ?>
            </tbody>
        </table>
        <div class="pagination" id="pagination"></div>
    </div>
</main>

<div class="modal <?= ($form_action === 'add' || $form_action === 'edit') ? 'active' : '' ?>" id="modalAdd">
    <div class="modal-content">
        <h2 id="addTitle"><?= ($form_action === 'edit') ? 'Edit Receivable' : 'New Receivable' ?></h2>
        <form method="post" id="formAdd" action="receivables.php">
            <input type="hidden" name="action" id="formAddAction" value="<?= htmlspecialchars($form_action ?? 'add') ?>">
            <input type="hidden" name="rec_id" id="formAddId" value="<?= htmlspecialchars($form_data['rec_id'] ?? '') ?>">
            
            <label>Client Name</label>
            <input type="text" name="client_name" id="client_name" value="<?= htmlspecialchars($form_data['client_name'] ?? '') ?>" required>
            
            <label>Affiliation (Optional)</label>
            <input type="text" name="affiliation" id="affiliation" value="<?= htmlspecialchars($form_data['affiliation'] ?? '') ?>">
            
            <label>Amount</label>
            <input type="number" step="0.01" name="amount" id="amount" value="<?= htmlspecialchars($form_data['amount'] ?? '') ?>" required min="0.01">
            
            <label>Amount Paid (<?= ($form_action === 'edit') ? 'Locked' : 'Optional' ?>)</label>
            <input type="number" step="0.01" name="amount_paid" id="amount_paid" value="<?= htmlspecialchars($form_data['amount_paid'] ?? '') ?>" placeholder="0.00" min="0" <?= ($form_action === 'edit') ? 'disabled' : '' ?>>
            
            <label>Mode of Payment (for initial payment)</label>
            <select name="mode_of_payment" id="mode_of_payment" <?= ($form_action === 'edit') ? 'disabled' : '' ?>>
                <option value="">-- Select --</option>
                <option value="Cash" <?= (($form_data['mode_of_payment'] ?? '') === 'Cash') ? 'selected' : '' ?>>Cash</option>
                <option value="Gcash" <?= (($form_data['mode_of_payment'] ?? '') === 'Gcash') ? 'selected' : '' ?>>Gcash</option>
                <option value="Bank" <?= (($form_data['mode_of_payment'] ?? '') === 'Bank') ? 'selected' : '' ?>>Bank</option>
                <option value="Other" <?= (($form_data['mode_of_payment'] ?? '') === 'Other') ? 'selected' : '' ?>>Other</option>
            </select>
            
            <div class="actions">
                <button type="button" class="btn" id="closeAdd">Cancel</button>
                <button type="submit" class="btn primary">Save</button>
            </div>
        </form>
    </div>
</div>

<div class="modal" id="modalPay">
    <div class="modal-content">
        <h2>Record Payment</h2>
        <form method="post" id="formPay" action="receivables.php">
            <input type="hidden" name="action" value="pay">
            <input type="hidden" name="rec_id" id="pay_receivable_id">
            <p style="text-align: center; margin-bottom: 15px;"><strong>Client:</strong> <span id="pay_client_name" style="font-weight: normal;"></span></p>
            <p style="text-align: center; margin-bottom: 20px;"><strong>Current Balance:</strong> <span style="font-weight: bold; color: var(--danger);">₱<span id="pay_balance"></span></span></p>
            <label>Amount to Pay</label>
            <input type="number" step="0.01" name="paid_amount" id="paid_amount" required min="0.01">
            <label>Mode of Payment</label>
            <select name="payment_mode" id="payment_mode" required>
                <option value="">-- Select Mode --</option>
                <option value="Cash">Cash</option>
                <option value="Gcash">Gcash</option>
                <option value="Bank">Bank</option>
                <option value="Other">Other</option>
            </select>
            <div class="actions">
                <button type="button" class="btn" id="closePay">Cancel</button>
                <button type="submit" class="btn primary">Confirm Payment</button>
            </div>
        </form>
    </div>
</div>

<form method="POST" action="receivables.php" id="pdfForm" target="_blank" style="display: none;">
    <input type="hidden" name="action" value="generate_current_view_pdf">
    <input type="hidden" name="pdf_data" id="pdfDataInput">
    <input type="hidden" name="pdf_filters" id="pdfFiltersInput">
</form>

<script>
    const FPDF_MISSING = <?= defined('FPDF_MISSING') ? 'true' : 'false' ?>;
    // MODIFIED: Pass form_action to JS to prevent JS from overriding repopulated modal
    const PHP_FORM_ACTION = '<?= $form_action ?? '' ?>';
</script>

<script>
/* DOM helpers & initial state - Same */
const searchInput = document.getElementById('searchInput');
const showPendingBtn = document.getElementById('showPendingBtn');
const rowsPerPageInput = document.getElementById('rowsPerPageInput');
const allRows = Array.from(document.querySelectorAll('#receivablesTable tbody tr'));
const generatePdfBtn = document.getElementById('generatePdfBtn');
const pdfForm = document.getElementById('pdfForm');
const pdfDataInput = document.getElementById('pdfDataInput');
const pdfFiltersInput = document.getElementById('pdfFiltersInput');

let showingPending = false;
let rowsPerPage = parseInt(rowsPerPageInput.value) || 8;
let currentPage = 1;
let currentSortKey = 'created_at';
let currentSortAsc = false;
let originalEditData = null; // <-- For edit check

/* Add / Edit modal wiring */
const modalAdd = document.getElementById('modalAdd');
const formAdd = document.getElementById('formAdd');
const openAddBtn = document.getElementById('openAddBtn');
const closeAdd = document.getElementById('closeAdd');
const addTitle = document.getElementById('addTitle');

openAddBtn.onclick = () => {
    formAdd.reset(); 
    document.getElementById('formAddAction').value = 'add';
    document.getElementById('formAddId').value = ''; 
    document.getElementById('amount_paid').disabled = false;
    document.getElementById('mode_of_payment').disabled = false;
    addTitle.textContent = 'New Receivable'; 
    originalEditData = null; // Clear original data
    modalAdd.classList.add('active');
};
closeAdd.onclick = () => modalAdd.classList.remove('active');

document.querySelectorAll('.editBtn').forEach(btn=>{
    btn.onclick = (e)=>{
        // MODIFIED: Do not run if PHP is already showing the modal from an error
        if (PHP_FORM_ACTION === 'edit') return;
        
        const tr = btn.closest('tr'); const data = JSON.parse(tr.dataset.row); formAdd.reset();
        document.getElementById('formAddAction').value = 'edit';
        document.getElementById('formAddId').value = data.rec_id;
        document.getElementById('client_name').value = data.client_name;
        document.getElementById('affiliation').value = data.affiliation || '';
        document.getElementById('amount').value = parseFloat(data.amount || 0).toFixed(2);
        document.getElementById('amount_paid').value = parseFloat(data.total_paid || 0).toFixed(2);
        document.getElementById('amount_paid').disabled = true;
        document.getElementById('mode_of_payment').disabled = true;
        addTitle.textContent = 'Edit Receivable'; 
        
        // Store original data
        originalEditData = {
            client_name: data.client_name,
            affiliation: data.affiliation || '',
            amount: parseFloat(data.amount || 0).toFixed(2)
        };

        modalAdd.classList.add('active');
    }
});


/* Delete - SweetAlert */
document.querySelectorAll('.deleteBtn').forEach(btn=>{
    btn.onclick = ()=>{
        const data = JSON.parse(btn.closest('tr').dataset.row);
        const rec_id = data.rec_id;
        // MODIFIED: Clearer alert text
        Swal.fire({
            title: 'Are you sure?',
            text: `This will permanently delete the receivable for '${data.client_name}' (Ref# ${data.reference_number}). This cannot be undone!`,
            icon: 'warning', showCancelButton: true, confirmButtonText: 'Yes, delete it!',
            buttonsStyling: false, customClass: { confirmButton: 'btn primary', cancelButton: 'btn' }
        }).then((result) => {
            if (result.isConfirmed) {
                const form = document.createElement('form'); form.method = 'POST'; form.action = 'receivables.php';
                form.innerHTML = `<input type="hidden" name="action" value="delete"><input type="hidden" name="rec_id" value="${rec_id}">`;
                document.body.appendChild(form); form.submit();
            }
        });
    }
});

/* Pay modal wiring */
const modalPay = document.getElementById('modalPay');
const closePay = document.getElementById('closePay');
const formPay = document.getElementById('formPay');

document.querySelectorAll('.payBtn').forEach(btn=>{
    btn.onclick = ()=>{
        // MODIFIED: Do not run if PHP is showing another modal
        if (PHP_FORM_ACTION) return;
        
        const data = JSON.parse(btn.closest('tr').dataset.row); formPay.reset();
        document.getElementById('pay_receivable_id').value = data.rec_id;
        document.getElementById('pay_client_name').textContent = data.client_name;
        const balance = parseFloat(data.balance || 0);
        document.getElementById('pay_balance').textContent = balance.toFixed(2);
        const amountInput = document.getElementById('paid_amount');
        amountInput.value = '';
        amountInput.placeholder = `Enter amount (Balance: ₱${balance.toFixed(2)})`;
        modalPay.classList.add('active');
    }
});
closePay.onclick = ()=> modalPay.classList.remove('active');

/* --- Filter, Sort, Pagination --- (No change) */
function getFilteredRows() {
    const q = searchInput.value.toLowerCase().trim();
    return allRows.filter(r => {
        const tc = r.textContent.toLowerCase();
        const matchesSearch = !q || tc.includes(q);
        if (!matchesSearch) return false;
        if (showingPending) {
            try {
                const d = JSON.parse(r.dataset.row || '{}');
                const b = parseFloat(d.balance || 0);
                return b > 0.009;
            } catch(e) { return false; }
        }
        return true;
    });
}
function sortRows(rowsToSort, key, asc) {
    rowsToSort.sort((a, b) => {
        let A_d, B_d;
        try { A_d = JSON.parse(a.dataset.row || '{}'); B_d = JSON.parse(b.dataset.row || '{}'); }
        catch(e) { return 0; }
        let A = A_d[key]; let B = B_d[key];
        if (['amount', 'total_paid', 'balance', 'is_paid'].includes(key)) {
            const nA = parseFloat(A) || 0; const nB = parseFloat(B) || 0;
            return asc ? (nA - nB) : (nB - nA);
        }
        if (key === 'date_created_only') {
            A = A_d['created_at'] || 0; B = B_d['created_at'] || 0;
            const dA = A ? new Date(A) : null; const dB = B ? new Date(B) : null;
            if (dA === null && dB === null) return 0; if (dA === null) return asc ? 1 : -1; if (dB === null) return asc ? -1 : 1;
            if (isNaN(dA.getTime()) && isNaN(dB.getTime())) return 0; if (isNaN(dA.getTime())) return asc ? 1 : -1; if (isNaN(dB.getTime())) return asc ? -1 : 1;
            return asc ? dA - dB : dB - dA;
        }
        // Added sort for person_in_charge
        if (key === 'person_in_charge') {
            const sa = (A || '').toString().toLowerCase(); const sb = (B || '').toString().toLowerCase();
            return asc ? sa.localeCompare(sb) : sb.localeCompare(sa);
        }
        const sa = (A || '').toString().toLowerCase(); const sb = (B || '').toString().toLowerCase();
        return asc ? sa.localeCompare(sb) : sb.localeCompare(sa);
    });
}
function renderTable() {
    const fr = getFilteredRows(); sortRows(fr, currentSortKey, currentSortAsc);
    const tb = document.querySelector('#receivablesTable tbody'); tb.innerHTML = '';
    const st = (currentPage - 1) * rowsPerPage; const en = st + rowsPerPage;
    const pr = fr.slice(st, en); const fragment = document.createDocumentFragment();
    pr.forEach(r => fragment.appendChild(r)); tb.appendChild(fragment);
    renderPagination(fr.length);
}
function renderPagination(total) {
    const c = document.getElementById('pagination'); c.innerHTML = '';
    const tp = Math.max(1, Math.ceil(total / rowsPerPage)); if (tp <= 1) return;
    for (let i = 1; i <= tp; i++) {
        const b = document.createElement('button'); b.textContent = i;
        if (i === currentPage) b.classList.add('active');
        b.onclick = () => { currentPage = i; renderTable(); }; c.appendChild(b);
    }
}

/* --- Event Listeners --- (No change) */
searchInput.addEventListener('input', () => { currentPage = 1; renderTable(); });
showPendingBtn.onclick = () => { showingPending = !showingPending; showPendingBtn.innerHTML = showingPending ? '<i class="fa fa-list"></i> Show All' : '<i class="fa fa-clock"></i> Pending Only'; showPendingBtn.classList.toggle('pending', showingPending); currentPage = 1; renderTable(); };
rowsPerPageInput.addEventListener('change', () => { let nr = parseInt(rowsPerPageInput.value); if (nr > 0) { rowsPerPage = nr; } else { rowsPerPageInput.value = rowsPerPage; } currentPage = 1; renderTable(); });
document.querySelectorAll('th[data-key]').forEach(th => {
    th.addEventListener('click', () => {
        const k = th.dataset.key; if (currentSortKey === k) { currentSortAsc = !currentSortAsc; } else { currentSortKey = k; currentSortAsc = true; }
        document.querySelectorAll('#receivablesTable .sort-icon').forEach(i => i.className = 'fa fa-sort sort-icon');
        const currentIcon = th.querySelector('.sort-icon'); if(currentIcon){ currentIcon.className = currentSortAsc ? 'fa fa-sort-up sort-icon' : 'fa fa-sort-down sort-icon'; }
        currentPage = 1; renderTable();
    });
});

/* PDF Generation Button Listener - ADDED incharge */
generatePdfBtn.addEventListener('click', () => {
    if (typeof FPDF_MISSING !== 'undefined' && FPDF_MISSING) {
        Swal.fire({
            icon: 'error',
            title: 'PDF Generation Error',
            text: 'The PDF library (FPDF) is missing on the server. Please contact an administrator to fix the installation.',
            buttonsStyling: false,
            customClass: { confirmButton: 'btn primary' }
        });
        return; // Stop the PDF generation
    }

    const filteredRows = getFilteredRows(); sortRows(filteredRows, currentSortKey, currentSortAsc);
    const dataForPdf = filteredRows.map(row => {
        const rowData = JSON.parse(row.dataset.row || '{}'); const cells = row.getElementsByTagName('td');
        return {
            date: cells[0]?.textContent||'', client: cells[1]?.textContent||'', affiliation: cells[2]?.textContent||'',
            ref: cells[3]?.textContent||'', amount_display: cells[4]?.textContent||'₱ 0.00',
            paid_display: cells[5]?.textContent||'₱ 0.00', balance_display: cells[6]?.textContent||'₱ 0.00',
            incharge: cells[7]?.textContent||'', // Added
            status: cells[8]?.textContent||'', // Now index 8
            amount: parseFloat(rowData.amount||0), paid: parseFloat(rowData.total_paid||0), balance: parseFloat(rowData.balance||0)
        };
    });
    const filtersForPdf = { search: searchInput.value, pending: showingPending, sortKey: currentSortKey, sortAsc: currentSortAsc };
    pdfDataInput.value = JSON.stringify(dataForPdf); pdfFiltersInput.value = JSON.stringify(filtersForPdf); pdfForm.submit();
});


/* --- Form Validation & Modal Close --- */
document.addEventListener('DOMContentLoaded', renderTable);

// --- THIS IS THE NEW SUBMIT HANDLER ---
formAdd.addEventListener('submit', function(e){
    // --- 1. Get values for validation ---
    const clientNameInput = document.getElementById('client_name');
    const amountInput = document.getElementById('amount');
    const amountPaidInput = document.getElementById('amount_paid');
    const modeInput = document.getElementById('mode_of_payment');
    const action = document.getElementById('formAddAction').value;
    
    const clientName = clientNameInput.value.trim();
    const amount = parseFloat(amountInput.value);
    const amountPaid = parseFloat(amountPaidInput.value || 0);
    const mode = modeInput.value;
    
    let errorMessage = '';

    // --- 2. Run Basic Validation ---
    if (!clientName) { errorMessage = 'Please enter a client name.'; }
    else if (isNaN(amount) || amount <= 0) { errorMessage = 'Please enter a valid amount greater than 0.'; }
    
    // Only validate payment fields if not in edit mode
    if (action === 'add') {
        if (isNaN(amountPaid) || amountPaid < 0) { errorMessage = 'Initial paid amount cannot be negative. Please enter 0 or more.'; }
        else if (amountPaid > amount + 0.009) { errorMessage = 'Initial paid amount cannot be more than the total amount.'; }
        else if (amountPaid > 0.009 && !mode) { errorMessage = "Please select a 'Mode of Payment' if you are adding an initial payment.";}
    }

    if (errorMessage) {
        e.preventDefault(); // Stop submission due to validation error
        Swal.fire({ icon: 'error', title: 'Oops... Please check the form', text: errorMessage, buttonsStyling: false, customClass: { confirmButton: 'btn primary' } });
        return false;
    }

    // --- 3. If validation passed, check for Edit/Add ---
    
    // If it's an 'add' action, validation passed, so let the form submit normally.
    if (action === 'add') {
        return; // Don't prevent default, allow submission
    }

    // --- 4. If it's an 'edit' action, prevent default and run custom logic ---
    e.preventDefault(); 
    
    if (action === 'edit' && originalEditData) {
        // Get current values
        const currentClientName = clientNameInput.value.trim();
        const currentAffiliation = document.getElementById('affiliation').value.trim();
        const currentAmount = parseFloat(amountInput.value).toFixed(2);

        // Compare with original data (case-insensitive for names)
        const hasChanged = (
            currentClientName.toUpperCase() !== originalEditData.client_name.toUpperCase() ||
            currentAffiliation !== originalEditData.affiliation ||
            currentAmount !== originalEditData.amount
        );

        if (!hasChanged) {
            // No changes: Show message and stay
            Swal.fire({
                icon: 'info',
                title: 'No Changes Detected',
                text: 'You have not made any changes to the record.',
                buttonsStyling: false,
                customClass: { confirmButton: 'btn primary' }
            });
            // Do not submit
        } else {
            // Changes detected: Ask for confirmation
            Swal.fire({
                title: 'Confirm Update',
                text: 'Are you sure you want to save these changes?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, update it!',
                cancelButtonText: 'Cancel',
                buttonsStyling: false,
                customClass: { confirmButton: 'btn primary', cancelButton: 'btn' }
            }).then((result) => {
                if (result.isConfirmed) {
                    // User confirmed: Manually submit the form
                    formAdd.submit();
                }
                // If cancelled, do nothing. Modal stays open.
            });
        }
    } else if (action === 'edit' && !originalEditData) {
        // This shouldn't happen, but as a fallback...
        console.error("Edit action submitted, but originalEditData is missing.");
        formAdd.submit(); // Submit anyway
    }
});
// --- END OF NEW SUBMIT HANDLER ---


formPay.addEventListener('submit', function(e){
    const amountToPay = parseFloat(document.getElementById('paid_amount').value);
    const paymentMode = document.getElementById('payment_mode').value;
    let errorMessage = '';

    if (isNaN(amountToPay) || amountToPay <= 0) { errorMessage = 'Please enter a valid payment amount greater than 0.'; }
    else if (!paymentMode) { errorMessage = 'Please select a Mode of Payment.'; }

    if (errorMessage) {
        e.preventDefault();
        Swal.fire({ icon: 'error', title: 'Oops... Payment Error', text: errorMessage, buttonsStyling: false, customClass: { confirmButton: 'btn primary' } });
        return false;
    }
});

document.querySelectorAll('.modal').forEach(m=>{ m.addEventListener('click', (ev)=>{ if (ev.target === m) m.classList.remove('active'); }); });

document.addEventListener('DOMContentLoaded', () => {
    // This will now show all errors, warnings, and successes from PHP
    <?php if ($success_message): ?> 
        Swal.fire({ icon: 'success', title: 'Success!', text: '<?= addslashes($success_message) ?>', timer: 2500, showConfirmButton: false }); 
    <?php endif; ?>
    <?php if ($error_message): ?> 
        Swal.fire({ icon: 'error', title: 'An Error Occurred', text: '<?= addslashes($error_message) ?>', confirmButtonText: 'OK', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } }); 
    <?php endif; ?>
    <?php if ($warning_message): ?> 
        Swal.fire({ icon: 'warning', title: 'Please Note', text: '<?= addslashes($warning_message) ?>', confirmButtonText: 'OK', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } }); 
    <?php endif; ?>
    
    // MODIFIED: If PHP opened a modal, disable JS click handlers that would open a *different* one
    if (PHP_FORM_ACTION) {
        if (PHP_FORM_ACTION === 'add' || PHP_FORM_ACTION === 'edit') {
            // Disable pay buttons
            document.querySelectorAll('.payBtn').forEach(btn => btn.disabled = true);
        }
    }
});
</script>
</body>
</html>