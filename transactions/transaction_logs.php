<?php
// transactions/transaction_logs.php
session_start();

// Prevent browser caching
header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
header("Pragma: no-cache");
header("Expires: 0"); // Expire immediately

require_once '../db.php'; // Assumes $conn (mysqli object) is created here

// --- Include FPDF ---
$fpdf_path = __DIR__ . '/../fpdf/fpdf.php';
if (file_exists($fpdf_path)) {
    require_once($fpdf_path);
} else {
    define('FPDF_MISSING', true); // Flag missing library
}

if (!isset($_SESSION['user_id'])) { // Check user_id
    header("Location: ../index.php");
    exit();
}

$current_display_name = $_SESSION['name'] ?? $_SESSION['username'] ?? 'User';
$role = $_SESSION['role'] ?? 'user';
$is_admin = ($role === 'admin');

// --- Restrict access to Admins only ---
if (!$is_admin) {
    $_SESSION['error_message'] = "Access denied.";
    header("Location: collections.php"); // Redirect non-admins
    exit();
}

// --- Enhanced FPDF Class (For Log Report) ---
class PDF extends FPDF {
    private $reportTitle = 'Report'; private $periodLabel = ''; private $generatedBy = '';
    private $colorAccent = [216, 76, 115]; private $colorLightPink = [255, 240, 246]; private $colorMuted = [107, 74, 87]; private $colorDark = [61, 26, 42]; private $colorBorder = [243, 208, 220];
    function setReportHeader($title, $period, $user) {
        if (function_exists('iconv')) {
            $this->reportTitle = @iconv('UTF-8', 'cp1252//IGNORE', $title) ?: $title;
            $this->periodLabel = @iconv('UTF-8', 'cp1252//IGNORE', $period) ?: $period;
            $this->generatedBy = @iconv('UTF-8', 'cp1252//IGNORE', $user) ?: $user;
        } else { $this->reportTitle = $title; $this->periodLabel = $period; $this->generatedBy = $user; }
    }
    function Header() { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->Rect(0, 0, $this->GetPageWidth(), 25, 'F'); $this->SetTextColor(255); $this->SetFont('Arial', 'B', 14); $this->SetY(8); $this->Cell(0, 8, 'RCRAO Accounting - '.$this->reportTitle, 0, 1, 'C'); $this->SetFont('Arial', '', 10); $this->Cell(0, 6, $this->periodLabel, 0, 1, 'C'); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetY(30); }
    function Footer() { $this->SetY(-15); $this->SetFont('Arial', 'I', 8); $this->SetTextColor(150); $generatedByStr = 'Generated By: ' . $this->generatedBy . ' on ' . date('Y-m-d H:i'); if (function_exists('iconv')) { $generatedByStr = @iconv('UTF-8', 'cp1252//IGNORE', $generatedByStr) ?: $generatedByStr; } $this->Cell(0, 5, $generatedByStr, 0, 1, 'L'); $this->Cell(0, 5, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C'); }

    function BasicTable($header, $data) {
        $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->SetTextColor(255); $this->SetDrawColor(max(0, $this->colorAccent[0]-20), max(0, $this->colorAccent[1]-20), max(0, $this->colorAccent[2]-20)); $this->SetLineWidth(.3); $this->SetFont('', 'B', 9);
        $widths = $this->CalculateWidths($header, $data);
        for ($i = 0; $i < count($header); $i++) { $headerText = function_exists('iconv') ? @iconv('UTF-8', 'cp1252//IGNORE', $header[$i]) ?: $header[$i] : $header[$i]; $this->Cell($widths[$i], 7, $headerText, 1, 0, 'C', true); }
        $this->Ln(); $this->SetFont('Arial', '', 8); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetFillColor(255); $this->SetDrawColor($this->colorBorder[0], $this->colorBorder[1], $this->colorBorder[2]); $fill = false;

        foreach ($data as $row) {
            $this->SetFillColor($fill ? 245 : 255);
            for ($i = 0; $i < count($header); $i++) {
                $cellValue = $row[$i] ?? '';
                if (function_exists('iconv') && mb_detect_encoding((string)$cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', (string)$cellValue)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', (string)$cellValue); if ($convertedValue !== false) { $cellValue = $convertedValue; } }

                $align = 'L'; // Default align
                if ($i == 0) $align = 'L'; // Date
                if ($i == 1) $align = 'C'; // User
                if ($i == 2 || $i == 3) $align = 'C'; // Action, Module

                $this->Cell($widths[$i], 6, (string)$cellValue, 'LR', 0, $align, true);
            }
            $this->Ln(); $fill = !$fill;
        }
        $this->Cell(array_sum($widths), 0, '', 'T'); $this->Ln(4);
    }

    function CalculateWidths($header, $data) {
        $num_cols = count($header); $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin; $widths = [];

        // Manually adjust proportions for logs
        if ($num_cols == 5) {
             $widths[0] = $pageWidth * 0.20; // Date
             $widths[1] = $pageWidth * 0.15; // User
             $widths[2] = $pageWidth * 0.10; // Action
             $widths[3] = $pageWidth * 0.12; // Module
             $widths[4] = $pageWidth * 0.43; // Details
        } else {
            // Fallback for auto-sizing
            for ($i = 0; $i < $num_cols; $i++) { $widths[$i] = $this->GetStringWidth($header[$i]) + 8; }
            $sampleData = array_slice($data, 0, 30);
            foreach ($sampleData as $row) {
                 if(!is_array($row)) continue;
                 for ($i = 0; $i < $num_cols; $i++) {
                    $cellValue = $row[$i] ?? '';
                    if (function_exists('iconv') && mb_detect_encoding((string)$cellValue, 'UTF-8', true)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', (string)$cellValue); if ($convertedValue !== false) $cellValue = $convertedValue; }
                    $widths[$i] = max($widths[$i], $this->GetStringWidth((string)$cellValue) + 8);
                 }
            }
            $totalWidth = array_sum($widths); if ($totalWidth <= 0 || $num_cols === 0) { return []; }
            $scaleFactor = $pageWidth / $totalWidth;
            for ($i = 0; $i < $num_cols; $i++) { $widths[$i] *= $scaleFactor; }
        }
        return $widths;
    }
}
// --- END FPDF Class ---


// --- Handle POST actions ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';

    // --- PDF Generation Action ---
    if ($action === 'generate_current_view_pdf') {
        if (defined('FPDF_MISSING') || !file_exists($fpdf_path)) { die("FPDF library not found."); }

        $jsonData = $_POST['pdf_data'] ?? '[]';
        $data = json_decode($jsonData, true);
        $filters = json_decode($_POST['pdf_filters'] ?? '{}', true);
        if (json_last_error() !== JSON_ERROR_NONE) { die("Error decoding PDF data: ".json_last_error_msg()); }

        $pdf = new PDF('L', 'mm', 'A4'); // Landscape
        $pdf->AliasNbPages();

        $reportTitle = "Transaction Logs - Current View";
        $periodLabel = "Filters: ";
        $filterParts = [];
        if (!empty($filters['search'])) $filterParts[] = "Search='{$filters['search']}'";
        if (empty($filterParts)) $filterParts[] = "None";
        $periodLabel .= implode(', ', $filterParts);
        $sortKeyLabel = str_replace(['_','only'], [' ',''], $filters['sortKey'] ?? 'Default');
        $periodLabel .= " | Sorted By: " . ucwords($sortKeyLabel) . " " . ($filters['sortAsc'] ? '(Asc)' : '(Desc)');

        $pdf->setReportHeader($reportTitle, $periodLabel, $current_display_name);
        $pdf->AddPage();
        $pdf->SetFont('Arial', '', 8);

        if (!empty($data)) {
            $header = ['Date', 'User', 'Action', 'Module', 'Details'];
            $table_data = [];

            foreach ($data as $row) {
                // Data mapping for PDF - ensure indices match the PDF header array
                $rowData = [
                    $row['date'] ?? '',
                    $row['user'] ?? '',
                    $row['action'] ?? '',
                    $row['module'] ?? '',
                    $row['details'] ?? ''
                ];
                $table_data[] = $rowData;
            }

            $pdf->BasicTable($header, $table_data);
            $pdf->Ln(5);

        } else {
            $pdf->SetFont('Arial', '', 10);
            $pdf->Cell(0, 10, 'No data matching the current view found.', 0, 1, 'C');
        }

        $filename = "TransactionLogs_CurrentView_" . date('Ymd_His') . ".pdf";
        if (ob_get_level()) { ob_end_clean(); }
        $pdf->Output('D', $filename);
        exit();
    }
    // --- End PDF Generation ---

    // No Add/Edit/Delete actions on this page
    header("Location: transaction_logs.php");
    exit();
}

// --- Fetch initial data ---
// This query reads from the new `transaction_logs` table
$query_string = "
    SELECT
        log_id,
        log_timestamp,
        username,
        action_type,
        entity_type,
        entity_id,
        details
    FROM transaction_logs
    ORDER BY log_timestamp DESC
";
$logs_q = $conn->query($query_string);

$error_message = $_SESSION['error_message'] ?? null;
$success_message = $_SESSION['success_message'] ?? null;
$warning_message = $_SESSION['warning_message'] ?? null;
unset($_SESSION['error_message'], $_SESSION['success_message'], $_SESSION['warning_message']);

?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Transaction Logs — RCRAO Accounting</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
:root {
  --accent:#d84c73; --accent-light:#ffb6c1; --bg1:#fff0f6; --bg2:#ffe6ee; --card:#fff;
  --muted:#6b4a57; --shadow:0 8px 25px rgba(216,76,115,0.1);
  --sidebar-collapsed:72px; --sidebar-expanded:230px;
    --accent-dark: #b83b5e; --success: #28a745; --danger: #dc3545; --warning: #ffc107;
    --info: #007bff; /* Blue for Update/Pay */
}
*{box-sizing:border-box;font-family:"Poppins",sans-serif;margin:0;padding:0}
body{background:linear-gradient(135deg,var(--bg1),var(--bg2));color:var(--muted);overflow-x:hidden}
.sidebar{position:fixed;top:0;left:0;height:100vh;width:var(--sidebar-collapsed);background:linear-gradient(180deg,var(--accent) 0%,#ff7ea1 100%); display:flex;flex-direction:column;justify-content:space-between;padding:12px;transition:width .3s ease;z-index:1001}
.sidebar:hover,.sidebar.expanded{width:var(--sidebar-expanded);box-shadow:var(--shadow)}
/* Sidebar brand / title */
.sidebar .brand{display:flex;align-items:center;gap:10px;padding:8px 6px;margin-bottom:0}
.sidebar .brand .logo{width: 50px;height:40px;border-radius:10px; background:rgba(0, 0, 0, 0.5); display:flex;align-items:center;justify-content:center;overflow:hidden}
.sidebar .brand .logo img{width:40px;height:40px;object-fit:contain;display:block}
.sidebar .brand .title{display:none;color:#fff;font-weight:700;font-size:15px;line-height:1}
.sidebar.expanded .brand .title,.sidebar:hover .brand .title{display:block}
.sidebar.expanded .brand{padding-left:12px}
nav.side-menu{margin-top:20px;display:flex;flex-direction:column;gap:8px}
nav.side-menu a{display:flex;align-items:center;gap:15px;padding:12px;color:#fff;text-decoration:none;border-radius:8px;font-weight:500;transition: all .2s ease;}
nav.side-menu a i{width:24px;text-align:center; font-size: 1.1em; transition: transform 0.2s ease;}
nav.side-menu a .label{display:none; white-space: nowrap; opacity: 0; transition: opacity 0.2s ease;}
.sidebar:hover nav.side-menu a .label,.sidebar.expanded nav.side-menu a .label{display:inline; opacity: 1;}
nav.side-menu a:hover{background:rgba(255,255,255,0.2);transform:translateX(8px); }
nav.side-menu a.active{background:rgba(255,255,255,0.15);}
nav.side-menu a:hover i { transform: scale(1.1); }
.main{margin-left:var(--sidebar-collapsed);padding:28px;transition: margin-left .3s ease;}
.header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}
.header h1{color:var(--accent-dark);font-size:24px;font-weight:700}
.user-info{font-size:14px;font-weight:600;background:var(--card);padding:10px 14px;border-radius:10px;box-shadow:var(--shadow)}
.toolbar{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:18px;background:var(--card);padding:14px 16px;border-radius:12px;box-shadow:var(--shadow)}
.toolbar input{padding:8px 12px;border-radius:8px;border:1px solid #ccc;width:220px}
.btn{ border: none; border-radius: 8px; padding: 10px 18px; font-weight: 600; cursor: pointer; transition: all 0.25s ease; background: var(--accent-light); color: var(--accent-dark); margin: 0 5px; font-family:"Poppins",sans-serif; font-size: 14px;}
.btn:hover { background: var(--accent); color: #fff; transform: translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.2);}
.btn.primary{ background:var(--accent); color:#fff;}
.btn.primary:hover{ background: var(--accent-dark); transform:translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.3);}
.btn.small{padding:8px 12px;font-size:13px}
.btn i { margin-right: 8px; }
.top-tabs{display:flex;gap:8px;margin-bottom:18px}
.top-tabs .tab{background:var(--card);padding:10px 16px;border-radius:8px;cursor:pointer;font-weight:600;color:var(--muted);box-shadow:var(--shadow);transition:.2s}
.top-tabs .tab.active{background:var(--accent);color:#fff}
.table-card{background:var(--card);border-radius:14px;padding:16px;box-shadow:var(--shadow);overflow-x:auto}
table{width:100%;border-collapse:collapse;text-align:left; font-size: 13px;}
th,td{padding:10px 12px;border-bottom:1px solid #f3d0dc; white-space: nowrap;}
th{background:#ffd6e5;color:#6b4a57;cursor:pointer;user-select:none;position:relative; font-weight: 600;}
th .sort-icon{margin-left:6px;font-size:11px;color:#888}
tr:hover{background:#fff6f9}
.icon-btn{background:none;border:none;color:var(--accent);cursor:pointer;font-size:15px;margin:0 4px;transition:.2s}
.icon-btn:hover{transform:scale(1.15); color: var(--accent-dark);}
.pagination{text-align:center;margin-top:18px;display:flex;justify-content:center;gap:6px;flex-wrap:wrap}
.pagination button{border:none;background:var(--accent);color:#fff;padding:6px 12px;border-radius:6px;cursor:pointer; font-size: 13px;}
.pagination button.active{background:#ff91a4}

/* =================================== */
/* START: (1) ADDED CSS FOR LOG COLORS */
/* =================================== */
.log-module-coll { color: var(--success); }
.log-module-recv { color: #b8860b; }
.log-module-expe { color: var(--danger); }

.log-action-create { color: var(--success); font-weight: 700; }
.log-action-update { color: var(--info); font-weight: 700; }
.log-action-pay { color: var(--info); font-weight: 700; } /* Use same color as update */
.log-action-delete { color: var(--danger); font-weight: 700; }
/* =================================== */
/* END: (1) ADDED CSS FOR LOG COLORS   */
/* =================================== */
</style>
</head>
<body>
<aside class="sidebar">
    <div class="brand">
    <div class="logo">
      <img src="../assets/images/rcrao_logo.png" alt="RCRAO Logo">
    </div>
    <div class="title">RCRAO Accounting System</div>
  </div>
  <nav class="side-menu">
    <?php if ($role === 'admin'): ?>
    <a href="../dashboard.php"><i class="fa fa-chart-pie"></i><span class="label">Dashboard</span></a>
    <?php endif; ?>
    <a href="collections.php" class="active"><i class="fa fa-cash-register"></i><span class="label">Transactions</span></a>
    <?php if ($role === 'admin'): ?>
    <a href="../users.php"><i class="fa fa-users-cog"></i><span class="label">Users</span></a>
    <?php endif; ?>
    <a href="../logout.php"><i class="fa fa-sign-out-alt"></i><span class="label">Logout</span></a>
  </nav>
</aside>

<main class="main">
  <div class="header">
    <h1>Transaction Logs</h1>
    <div class="user-info">Logged in as: <b><?= htmlspecialchars($current_display_name) ?></b></div>
  </div>

  <div class="top-tabs">
    <div class="tab" onclick="location.href='collections.php'">Collections</div>
    <div class="tab" onclick="location.href='receivables.php'">Receivables</div>
    <div class="tab" onclick="location.href='expenses.php'">Expenses</div>
    <?php if ($is_admin): ?>
        <div class="tab active">Logs</div>
    <?php endif; ?>
  </div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="🔍 Search...">
    <button class="btn small" id="generatePdfBtn" style="margin-left: 10px;"><i class="fa fa-file-pdf"></i> PDF Current View</button>
    <div style="margin-left:auto">
      <input type="number" id="rowsPerPageInput" placeholder="Rows / page" style="width:120px;padding:8px;border-radius:8px;border:1px solid #ddd" value="10" min="1">
    </div>
  </div>

  <div class="table-card">
    <table id="logsTable">
      <thead>
        <tr>
          <th data-key="log_timestamp">Date & Time <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="username">User <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="action_type">Action <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="entity_type">Module <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="details">Details <i class="fa fa-sort sort-icon"></i></th>
          </tr>
      </thead>
      <tbody>
        <?php
        // Check if query was successful
         if ($logs_q) {
            while ($r = $logs_q->fetch_assoc()):
                // Store raw data for JS sorting/filtering
                $data = htmlentities(json_encode($r), ENT_QUOTES, 'UTF-8');
                $date_formatted = !empty($r['log_timestamp']) ? date('M d, Y H:i:s', strtotime($r['log_timestamp'])) : '';

                // ===================================
                // START: (2) ADDED LOGIC FOR CLASS
                // ===================================

                // --- Color for Module ---
                $module_name = $r['entity_type'];
                $module_class = '';
                switch (strtolower($module_name)) { // Use strtolower for safety
                    case 'collection':
                        $module_class = 'log-module-coll';
                        break;
                    case 'receivable':
                        $module_class = 'log-module-recv';
                        break;
                    case 'expense':
                        $module_class = 'log-module-expe';
                        break;
                }

                // --- Color for Action ---
                $action_name = $r['action_type'];
                $action_class = '';
                 switch (strtoupper($action_name)) { // Use strtoupper for safety
                    case 'CREATE':
                        $action_class = 'log-action-create'; // Green
                        break;
                    case 'UPDATE':
                        $action_class = 'log-action-update'; // Blue
                        break;
                     case 'PAY':
                        $action_class = 'log-action-pay'; // Blue (same as update)
                        break;
                    case 'DELETE':
                        $action_class = 'log-action-delete'; // Red
                        break;
                }
                // ===================================
                // END: (2) ADDED LOGIC FOR CLASS
                // ===================================
        ?>
          <tr data-row='<?= $data ?>'>
            <td><?= $date_formatted ?></td>
            <td><?= htmlspecialchars($r['username']) ?></td>

            <td>
                <span class="<?= $action_class ?>"><?= htmlspecialchars($action_name) ?></span>
            </td>

            <td>
                <span class="<?= $module_class ?>"><?= htmlspecialchars($module_name) ?></span>
            </td>

            <td><?= htmlspecialchars($r['details']) ?></td>
          </tr>
        <?php
            endwhile;
             $logs_q->free(); // Free result set
         } else {
             echo "<tr><td colspan='5'>Error fetching data: " . $conn->error . "</td></tr>";
         }
         ?>
      </tbody>
    </table>
    <div class="pagination" id="pagination"></div>
  </div>
</main>

<form method="POST" action="transaction_logs.php" id="pdfForm" target="_blank" style="display: none;">
    <input type="hidden" name="action" value="generate_current_view_pdf">
    <input type="hidden" name="pdf_data" id="pdfDataInput">
    <input type="hidden" name="pdf_filters" id="pdfFiltersInput">
</form>

<script>
/* DOM helpers & initial state */
const searchInput = document.getElementById('searchInput');
const rowsPerPageInput = document.getElementById('rowsPerPageInput');
const allRows = Array.from(document.querySelectorAll('#logsTable tbody tr'));
const generatePdfBtn = document.getElementById('generatePdfBtn');
const pdfForm = document.getElementById('pdfForm');
const pdfDataInput = document.getElementById('pdfDataInput');
const pdfFiltersInput = document.getElementById('pdfFiltersInput');

let rowsPerPage = parseInt(rowsPerPageInput.value) || 10;
let currentPage = 1;
let currentSortKey = 'log_timestamp'; // Default sort
let currentSortAsc = false;

/* --- Filter, Sort, Pagination, PDF Generation --- */
function getFilteredRows() {
    const q = searchInput.value.toLowerCase().trim();
    return allRows.filter(r => {
        const tc = r.textContent.toLowerCase();
        return !q || tc.includes(q);
    });
}

function sortRows(rowsToSort, key, asc) {
  rowsToSort.sort((a, b) => {
    // Ensure data-row attribute exists and is valid JSON
    let A_d, B_d;
    try {
        A_d = JSON.parse(a.dataset.row || '{}');
        B_d = JSON.parse(b.dataset.row || '{}');
    } catch (e) {
        console.error("Error parsing JSON:", e, a.dataset.row, b.dataset.row);
        return 0; // Don't sort if data is invalid
    }

    let A = A_d[key];
    let B = B_d[key];

    if (key === 'log_timestamp') { // Date sort
      // Handle potential null or invalid dates gracefully
      const dA = A ? new Date(A) : null;
      const dB = B ? new Date(B) : null;

      if (dA === null && dB === null) return 0;
      if (dA === null) return asc ? 1 : -1; // Treat nulls as "later" or "earlier" depending on sort
      if (dB === null) return asc ? -1 : 1;

      // Check for invalid dates
      if (isNaN(dA.getTime()) && isNaN(dB.getTime())) return 0;
      if (isNaN(dA.getTime())) return asc ? 1 : -1;
      if (isNaN(dB.getTime())) return asc ? -1 : 1;

      return asc ? dA - dB : dB - dA;
    }
    // Default string sort (case-insensitive)
    const sa = (A || '').toString().toLowerCase();
    const sb = (B || '').toString().toLowerCase();
    return asc ? sa.localeCompare(sb) : sb.localeCompare(sa);
  });
}


function renderTable() {
    const fr = getFilteredRows();
    sortRows(fr, currentSortKey, currentSortAsc);
    const tb = document.querySelector('#logsTable tbody');
    tb.innerHTML = ''; // Clear existing rows
    const st = (currentPage - 1) * rowsPerPage;
    const en = st + rowsPerPage;
    const pr = fr.slice(st, en);
    // Use DocumentFragment for performance when adding many rows
    const fragment = document.createDocumentFragment();
    pr.forEach(r => fragment.appendChild(r));
    tb.appendChild(fragment);
    renderPagination(fr.length);
}


function renderPagination(total) {
    const c = document.getElementById('pagination');
    c.innerHTML = '';
    const tp = Math.max(1, Math.ceil(total / rowsPerPage));
    if (tp <= 1) return; // No pagination needed for 1 or fewer pages
    for (let i = 1; i <= tp; i++) {
        const b = document.createElement('button');
        b.textContent = i;
        if (i === currentPage) b.classList.add('active');
        b.onclick = () => {
            currentPage = i;
            renderTable();
        };
        c.appendChild(b);
    }
}

/* --- Event Listeners --- */
searchInput.addEventListener('input', () => { currentPage = 1; renderTable(); });

rowsPerPageInput.addEventListener('change', () => {
    let nr = parseInt(rowsPerPageInput.value);
    if (nr > 0) {
        rowsPerPage = nr;
    } else {
        // Optionally reset to a default or keep the old value
        rowsPerPageInput.value = rowsPerPage; // Revert invalid input
    }
    currentPage = 1; // Go to first page on changing rows per page
    renderTable();
});

document.querySelectorAll('th[data-key]').forEach(th => {
    th.addEventListener('click', () => {
        const k = th.dataset.key;
        if (currentSortKey === k) {
            currentSortAsc = !currentSortAsc; // Toggle direction if same key
        } else {
            currentSortKey = k;
            currentSortAsc = true; // Default to ascending on new key
        }
        // Update sort icons visually
        document.querySelectorAll('#logsTable .sort-icon').forEach(i => i.className = 'fa fa-sort sort-icon'); // Reset others
        const currentIcon = th.querySelector('.sort-icon');
        if (currentIcon) {
             currentIcon.className = currentSortAsc ? 'fa fa-sort-up sort-icon' : 'fa fa-sort-down sort-icon';
        }
        currentPage = 1; // Go to first page on sort change
        renderTable();
    });
});


/* PDF Generation Button Listener */
generatePdfBtn.addEventListener('click', () => {
    const filteredRows = getFilteredRows(); // Get currently visible rows based on search
    sortRows(filteredRows, currentSortKey, currentSortAsc); // Apply current sort

    const dataForPdf = filteredRows.map(row => {
        const rowData = JSON.parse(row.dataset.row || '{}'); // Ensure fallback for safety
        const cells = row.getElementsByTagName('td');
        // Safely access cell content, provide default values
        return {
            date: cells[0]?.textContent || '',
            user: cells[1]?.textContent || '',
            action: cells[2]?.textContent.trim() || '', // Use .trim()
            module: cells[3]?.textContent.trim() || '', // Use .trim()
            details: cells[4]?.textContent || '',
        };
    });

    const filtersForPdf = {
        search: searchInput.value,
        sortKey: currentSortKey,
        sortAsc: currentSortAsc
    };

    pdfDataInput.value = JSON.stringify(dataForPdf);
    pdfFiltersInput.value = JSON.stringify(filtersForPdf);
    pdfForm.submit();
});


/* --- Initial Render --- */
// Ensure the table is rendered when the page loads
document.addEventListener('DOMContentLoaded', () => {
    renderTable(); // Initial render

    /* --- Feedback Messages --- */
    <?php if ($success_message): ?>
        Swal.fire({ icon: 'success', title: 'Success', text: '<?= addslashes($success_message) ?>', timer: 2500, showConfirmButton: false });
    <?php elseif ($error_message): ?>
        Swal.fire({ icon: 'error', title: 'Error', text: '<?= addslashes($error_message) ?>', confirmButtonText: 'OK', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } });
    <?php elseif ($warning_message): ?>
        Swal.fire({ icon: 'warning', title: 'Warning', text: '<?= addslashes($warning_message) ?>', confirmButtonText: 'OK', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } });
    <?php endif; ?>
});

</script>
</body>
</html>