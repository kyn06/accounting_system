<?php
// transactions/expenses.php
session_start();
require_once '../db.php';

// --- Include FPDF ---
$fpdf_path = __DIR__ . '/../fpdf/fpdf.php';
if (file_exists($fpdf_path)) {
    require_once($fpdf_path);
} else {
    define('FPDF_MISSING', true); // Flag missing library
}


if (!isset($_SESSION['username'])) {
    header("Location: ../index.php");
    exit();
}

$username = $_SESSION['username'];
$role = $_SESSION['role'];

// --- Enhanced FPDF Class (Copied from collections.php) ---
class PDF extends FPDF {
    private $reportTitle = 'Report'; private $periodLabel = ''; private $generatedBy = '';
    private $colorAccent = [216, 76, 115]; private $colorLightPink = [255, 240, 246]; private $colorMuted = [107, 74, 87]; private $colorDark = [61, 26, 42]; private $colorBorder = [243, 208, 220];

    function setReportHeader($title, $period, $user) {
        if (function_exists('iconv')) {
            $this->reportTitle = @iconv('UTF-8', 'cp1252//IGNORE', $title) ?: $title;
            $this->periodLabel = @iconv('UTF-8', 'cp1252//IGNORE', $period) ?: $period;
            $this->generatedBy = @iconv('UTF-8', 'cp1252//IGNORE', $user) ?: $user;
        } else { $this->reportTitle = $title; $this->periodLabel = $period; $this->generatedBy = $user; }
    }
    function Header() { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->Rect(0, 0, $this->GetPageWidth(), 25, 'F'); $this->SetTextColor(255); $this->SetFont('Arial', 'B', 14); $this->SetY(8); $this->Cell(0, 8, 'RCRAO Accounting - '.$this->reportTitle, 0, 1, 'C'); $this->SetFont('Arial', '', 10); $this->Cell(0, 6, $this->periodLabel, 0, 1, 'C'); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetY(30); }
    function Footer() { $this->SetY(-15); $this->SetFont('Arial', 'I', 8); $this->SetTextColor(150); $generatedByStr = 'Generated By: ' . $this->generatedBy . ' on ' . date('Y-m-d H:i'); if (function_exists('iconv')) { $generatedByStr = @iconv('UTF-8', 'cp1252//IGNORE', $generatedByStr) ?: $generatedByStr; } $this->Cell(0, 5, $generatedByStr, 0, 1, 'L'); $this->Cell(0, 5, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C'); }
    function BasicTable($header, $data) { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->SetTextColor(255); $this->SetDrawColor(max(0, $this->colorAccent[0]-20), max(0, $this->colorAccent[1]-20), max(0, $this->colorAccent[2]-20)); $this->SetLineWidth(.3); $this->SetFont('', 'B', 9); $widths = $this->CalculateWidths($header, $data); for ($i = 0; $i < count($header); $i++) { $headerText = function_exists('iconv') ? @iconv('UTF-8', 'cp1252//IGNORE', $header[$i]) ?: $header[$i] : $header[$i]; $this->Cell($widths[$i], 7, $headerText, 1, 0, 'C', true); } $this->Ln(); $this->SetFont('Arial', '', 8); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetFillColor(255); $this->SetDrawColor($this->colorBorder[0], $this->colorBorder[1], $this->colorBorder[2]); $fill = false;
        foreach ($data as $row) {
            $this->SetFillColor($fill ? 245 : 255);
            for ($i = 0; $i < count($header); $i++) {
                $cellValue = $row[$i] ?? ''; $originalValue = $cellValue;
                if (function_exists('iconv') && mb_detect_encoding($cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', $cellValue)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', $cellValue); if ($convertedValue !== false) { $cellValue = $convertedValue; } }
                $cleanOriginalValue = preg_replace('/[^0-9.]/', '', $originalValue);
                $align = 'L'; if (strpos($originalValue, '₱') !== false) { $align = 'R'; }
                $this->Cell($widths[$i], 6, $cellValue, 'LR', 0, $align, true);
            }
            $this->Ln();
            $fill = !$fill;
        }
        $this->Cell(array_sum($widths), 0, '', 'T'); $this->Ln(4);
    }
    function CalculateWidths($header, $data) { $num_cols = count($header); $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin; $widths = []; for ($i = 0; $i < $num_cols; $i++) { $widths[$i] = $this->GetStringWidth($header[$i]) + 8; } $sampleData = array_slice($data, 0, 30); foreach ($sampleData as $row) { for ($i = 0; $i < $num_cols; $i++) { $cellValue = $row[$i] ?? ''; if (function_exists('iconv') && mb_detect_encoding($cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', $cellValue)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', $cellValue); if($convertedValue !== false) $cellValue = $convertedValue; } $widths[$i] = max($widths[$i], $this->GetStringWidth((string)$cellValue) + 8); } } $totalWidth = array_sum($widths); if ($totalWidth <= 0 || $num_cols === 0) { return []; } $scaleFactor = $pageWidth / $totalWidth; for ($i = 0; $i < $num_cols; $i++) { $widths[$i] *= $scaleFactor; } return $widths; }
}
// --- END FPDF Class ---


// --- Handle POST actions ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';
    function required($key) { return isset($_POST[$key]) && trim($_POST[$key]) !== ''; }

    // --- PDF Generation Action ---
    if ($action === 'generate_current_view_pdf') {
        if (defined('FPDF_MISSING') || !file_exists($fpdf_path)) { die("FPDF library not found."); }

        $jsonData = $_POST['pdf_data'] ?? '[]';
        $data = json_decode($jsonData, true);
        $filters = json_decode($_POST['pdf_filters'] ?? '{}', true);
        if (json_last_error() !== JSON_ERROR_NONE) { die("Error decoding PDF data."); }

        $pdf = new PDF('P', 'mm', 'A4'); // Portrait mode for expenses
        $pdf->AliasNbPages();

        $reportTitle = "Expenses - Current View";
        $periodLabel = "Filters: ";
        $filterParts = [];
        if (!empty($filters['search'])) $filterParts[] = "Search='{$filters['search']}'";
        // No 'pending' filter for expenses
        if (empty($filterParts)) $filterParts[] = "None";
        $periodLabel .= implode(', ', $filterParts);
        $sortKeyLabel = str_replace(['_','only'], [' ',''], $filters['sortKey'] ?? 'Default');
        $periodLabel .= " | Sorted By: " . ucwords($sortKeyLabel) . " " . ($filters['sortAsc'] ? '(Asc)' : '(Desc)');

        $pdf->setReportHeader($reportTitle, $periodLabel, $username);
        $pdf->AddPage();
        $pdf->SetFont('Arial', '', 8);

        if (!empty($data)) {
            $header = ['Date', 'Expense', 'Store/Merchant', 'Amount', 'In-Charge']; // Header for expenses
            $table_data = [];
            $total_amount = 0;

            foreach ($data as $row) {
                // Prepare data using display values passed from JS
                $rowData = [
                    $row['date'] ?? '',
                    $row['expense'] ?? '',
                    $row['store'] ?? '',
                    $row['amount_display'] ?? '₱ 0.00',
                    $row['incharge'] ?? ''
                ];
                $table_data[] = $rowData;
                $total_amount += $row['amount'] ?? 0;
            }

            $pdf->BasicTable($header, $table_data);
            $pdf->Ln(5);
            $pdf->SetFont('Arial', 'B', 10);

            $totalAmountStr = 'Total Expenses: ₱ ' . number_format($total_amount, 2);
            if (function_exists('iconv')) {
                $totalAmountStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalAmountStr) ?: $totalAmountStr;
            }
            $pdf->Cell(0, 6, $totalAmountStr, 0, 1, 'R');
            
        } else {
            $pdf->SetFont('Arial', '', 10);
            $pdf->Cell(0, 10, 'No data matching the current view found.', 0, 1, 'C');
        }

        $filename = "Expenses_CurrentView_" . date('Ymd_His') . ".pdf";
        if (ob_get_level()) { ob_end_clean(); }
        $pdf->Output('D', $filename);
        exit();

    } // --- End PDF Generation Action ---

    elseif ($action === 'add') {
        if (!required('expense') || !required('amount') || !required('person_in_charge') ) { header("Location: expenses.php"); exit(); }
        $expense = trim($_POST['expense']);
        $amount = floatval($_POST['amount']);
        $store_or_merchant = trim($_POST['store_or_merchant'] ?? '');
        $person_in_charge = trim($_POST['person_in_charge']);
        
        $stmt = $conn->prepare("INSERT INTO expenses (expense, amount, store_or_merchant, person_in_charge, created_at, transaction_datetime) VALUES (?, ?, ?, ?, NOW(), NOW())");
        if ($stmt) { $stmt->bind_param("sdss", $expense, $amount, $store_or_merchant, $person_in_charge); $stmt->execute(); $stmt->close(); }
        header("Location: expenses.php"); exit();
    }
    elseif ($action === 'edit') {
        $id = intval($_POST['id'] ?? 0);
        if ($id <= 0 || !required('expense') || !required('amount') || !required('person_in_charge')) { header("Location: expenses.php"); exit(); }
        $expense = trim($_POST['expense']);
        $amount = floatval($_POST['amount']);
        $store_or_merchant = trim($_POST['store_or_merchant'] ?? '');
        $person_in_charge = trim($_POST['person_in_charge']);
        
        $stmt = $conn->prepare("UPDATE expenses SET expense = ?, amount = ?, store_or_merchant = ?, person_in_charge = ?, transaction_datetime = NOW() WHERE id = ?");
        if ($stmt) { $stmt->bind_param("sdssi", $expense, $amount, $store_or_merchant, $person_in_charge, $id); $stmt->execute(); $stmt->close(); }
        header("Location: expenses.php"); exit();
    }
    elseif ($action === 'delete') {
        $id = intval($_POST['id'] ?? 0);
        if ($id > 0) { $conn->query("DELETE FROM expenses WHERE id=" . intval($id)); }
        header("Location: expenses.php"); exit();
    }
}

// Fetch initial data for HTML table display
$expenses_q = $conn->query("
    SELECT *, DATE(created_at) as date_created_only 
    FROM expenses 
    ORDER BY created_at DESC
");
?>
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Expenses — RCRAO Accounting</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
    :root {
      --accent:#d84c73; --accent-light:#ffb6c1; --bg1:#fff0f6; --bg2:#ffe6ee; --card:#fff;
      --muted:#6b4a57; --shadow:0 8px 25px rgba(216,76,115,0.1);
      --sidebar-collapsed:72px; --sidebar-expanded:230px;
       --accent-dark: #b83b5e; /* Added */
    }
    *{box-sizing:border-box;font-family:"Poppins",sans-serif;margin:0;padding:0}
    body{background:linear-gradient(135deg,var(--bg1),var(--bg2));color:var(--muted);overflow-x:hidden}
    .sidebar{position:fixed;top:0;left:0;height:100vh;width:var(--sidebar-collapsed);background:linear-gradient(180deg,var(--accent) 0%,#ff7ea1 100%); display:flex;flex-direction:column;justify-content:space-between;padding:12px;transition:width .3s ease;z-index:1001}
    .sidebar:hover,.sidebar.expanded{width:var(--sidebar-expanded);box-shadow:var(--shadow)}
    nav.side-menu{margin-top:20px;display:flex;flex-direction:column;gap:8px}
    nav.side-menu a{display:flex;align-items:center;gap:15px;padding:12px;color:#fff;text-decoration:none;border-radius:8px;font-weight:500;transition: all .2s ease;}
    nav.side-menu a i{width:24px;text-align:center; font-size: 1.1em; transition: transform 0.2s ease;}
    nav.side-menu a .label{display:none; white-space: nowrap; opacity: 0; transition: opacity 0.2s ease;}
    .sidebar:hover nav.side-menu a .label,.sidebar.expanded nav.side-menu a .label{display:inline; opacity: 1;}
    nav.side-menu a:hover{background:rgba(255,255,255,0.2);transform:translateX(8px); }
    nav.side-menu a.active{background:rgba(255,255,255,0.15);}
    nav.side-menu a:hover i { transform: scale(1.1); }
    .main{margin-left:var(--sidebar-collapsed);padding:28px;transition: margin-left .3s ease;}
    .header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}
    .header h1{color:var(--accent-dark);font-size:24px;font-weight:700}
    .user-info{font-size:14px;font-weight:600;background:var(--card);padding:10px 14px;border-radius:10px;box-shadow:var(--shadow)}
    .toolbar{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:18px;background:var(--card);padding:14px 16px;border-radius:12px;box-shadow:var(--shadow)}
    .toolbar input{padding:8px 12px;border-radius:8px;border:1px solid #ccc;width:220px}

    /* Global Button Styles */
    .btn{ border: none; border-radius: 8px; padding: 10px 18px; font-weight: 600; cursor: pointer; transition: all 0.25s ease; background: var(--accent-light); color: var(--accent-dark); margin: 0 5px; font-family:"Poppins",sans-serif; font-size: 14px;}
    .btn:hover { background: var(--accent); color: #fff; transform: translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.2);}
    .btn.primary{ background:var(--accent); color:#fff;}
    .btn.primary:hover{ background: var(--accent-dark); transform:translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.3);}
    .btn.pending{background:#f5a3b0;color:#fff}
    .btn.pending:hover{background:#ff91a4}
    .btn.small{padding:8px 12px;font-size:13px}
    .btn i { margin-right: 8px; }

    .top-tabs{display:flex;gap:8px;margin-bottom:18px}
    .top-tabs .tab{background:var(--card);padding:10px 16px;border-radius:8px;cursor:pointer;font-weight:600;color:var(--muted);box-shadow:var(--shadow);transition:.2s}
    .top-tabs .tab.active{background:var(--accent);color:#fff}
    .table-card{background:var(--card);border-radius:14px;padding:16px;box-shadow:var(--shadow);overflow-x:auto}
    table{width:100%;border-collapse:collapse;text-align:left; font-size: 13px;}
    th,td{padding:10px 12px;border-bottom:1px solid #f3d0dc; white-space: nowrap;}
    th{background:#ffd6e5;color:#6b4a57;cursor:pointer;user-select:none;position:relative; font-weight: 600;}
    th .sort-icon{margin-left:6px;font-size:11px;color:#888}
    tr:hover{background:#fff6f9}
    .unpaid-row{background:#fff0f4; font-weight: 500;} /* Keep style for consistency even if unused */
    .icon-btn{background:none;border:none;color:var(--accent);cursor:pointer;font-size:15px;margin:0 4px;transition:.2s}
    .icon-btn:hover{transform:scale(1.15); color: var(--accent-dark);}
    .pagination{text-align:center;margin-top:18px;display:flex;justify-content:center;gap:6px;flex-wrap:wrap}
    .pagination button{border:none;background:var(--accent);color:#fff;padding:6px 12px;border-radius:6px;cursor:pointer; font-size: 13px;}
    .pagination button.active{background:#ff91a4}

    /* Modal Styles */
    .modal { position: fixed; inset: 0; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(5px); padding: 15px;}
    .modal.active { display: flex; animation: fadeIn .3s ease; }
    .modal-content { background: var(--card); border-radius: 16px; padding: 30px; width: 450px; max-width: 95%; box-shadow: 0 10px 40px rgba(0,0,0,0.15); animation: slideUp .35s ease; position: relative; }
    .modal h2 { color: var(--accent-dark); text-align: center; margin-bottom: 25px; font-weight: 700; font-size: 20px;}
    .modal form label { font-size: 14px; font-weight: 600; color: var(--muted); display: block; margin-top: 15px; margin-bottom: 5px; }
    .modal form input, .modal form select { width: 100%; padding: 12px 15px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9; font-size: 14px; transition: all 0.2s ease; font-family:"Poppins",sans-serif; }
    .modal form input:focus, .modal form select:focus { outline: none; border-color: var(--accent); background: #fff; box-shadow: 0 0 0 3px rgba(216, 76, 115, 0.15); }
    .modal .actions { display: flex; justify-content: flex-end; margin-top: 25px; gap: 10px; }
    @keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
    @keyframes slideUp { from { transform: translateY(15px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
    </style>
</head>
<body>
<aside class="sidebar">
  <nav class="side-menu">
    <a href="../dashboard.php"><i class="fa fa-chart-pie"></i><span class="label">Dashboard</span></a>
    <a href="collections.php" class="active"><i class="fa fa-cash-register"></i><span class="label">Transactions</span></a>
    <?php if ($role === 'admin'): ?>
    <a href="../users.php"><i class="fa fa-users-cog"></i><span class="label">Users</span></a>
    <?php endif; ?>
    <a href="../logout.php"><i class="fa fa-sign-out-alt"></i><span class="label">Logout</span></a>
  </nav>
</aside>

<main class="main">
  <div class="header">
    <h1>Expenses</h1>
    <div class="user-info">Logged in as: <b><?= htmlspecialchars($username) ?></b></div>
  </div>

  <div class="top-tabs">
    <div class="tab" onclick="location.href='collections.php'">Collections</div>
    <div class="tab" onclick="location.href='receivables.php'">Receivables</div>
    <div class="tab active">Expenses</div>
  </div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="🔍 Search...">
    <button class="btn primary" id="openAddBtn"><i class="fa fa-plus"></i> New Expense</button>
    <button class="btn small" id="generatePdfBtn" style="margin-left: 10px;"><i class="fa fa-file-pdf"></i> PDF Current View</button>
    <div style="margin-left:auto">
      <input type="number" id="rowsPerPageInput" placeholder="Rows / page" style="width:120px;padding:8px;border-radius:8px;border:1px solid #ddd" value="8" min="1">
    </div>
  </div>

  <div class="table-card">
    <table id="expensesTable">
      <thead>
        <tr>
          <th data-key="date_created_only">Date <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="expense">Expense <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="store_or_merchant">Store/Merchant <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="amount">Amount <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="person_in_charge">In-Charge <i class="fa fa-sort sort-icon"></i></th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php while ($r = $expenses_q->fetch_assoc()):
            $data = htmlentities(json_encode($r), ENT_QUOTES, 'UTF-8');
            $date_formatted = !empty($r['date_created_only']) ? date('M d, Y', strtotime($r['date_created_only'])) : '';
        ?>
          <tr data-row='<?= $data ?>'> <td><?= $date_formatted ?></td>
            <td><?= htmlspecialchars($r['expense']) ?></td>
            <td><?= htmlspecialchars($r['store_or_merchant']) ?></td>
            <td>₱<?= number_format($r['amount'],2) ?></td>
            <td><?= htmlspecialchars($r['person_in_charge']) ?></td>
            <td>
              <button class="icon-btn editBtn" title="Edit"><i class="fa fa-pen"></i></button>
              <button class="icon-btn deleteBtn" title="Delete"><i class="fa fa-trash"></i></button>
            </td>
          </tr>
        <?php endwhile; ?>
      </tbody>
    </table>
    <div class="pagination" id="pagination"></div>
  </div>
</main>

<div class="modal" id="modalAdd">
  <div class="modal-content">
    <h2 id="addTitle">New Expense</h2>
    <form method="post" id="formAdd" action="expenses.php"> <input type="hidden" name="action" id="formAddAction" value="add">
      <input type="hidden" name="id" id="formAddId" value="">
      <label>Expense</label>
      <input type="text" name="expense" id="expense" required>
      <label>Store/Merchant (optional)</label>
      <input type="text" name="store_or_merchant" id="store_or_merchant">
      <label>Amount</label>
      <input type="number" step="0.01" name="amount" id="amount" required>
      <label>Person In-Charge</label>
      <input type="text" name="person_in_charge" id="person_in_charge" required>
      <div class="actions">
        <button type="button" class="btn" id="closeAdd">Cancel</button>
        <button type="submit" class="btn primary">Save</button>
      </div>
    </form>
  </div>
</div>

<form method="POST" action="expenses.php" id="pdfForm" target="_blank" style="display: none;">
    <input type="hidden" name="action" value="generate_current_view_pdf">
    <input type="hidden" name="pdf_data" id="pdfDataInput">
    <input type="hidden" name="pdf_filters" id="pdfFiltersInput">
</form>

<script>
/* DOM helpers & initial state */
const searchInput = document.getElementById('searchInput');
// showPendingBtn removed
const rowsPerPageInput = document.getElementById('rowsPerPageInput');
const allRows = Array.from(document.querySelectorAll('#expensesTable tbody tr')); // Updated ID
const generatePdfBtn = document.getElementById('generatePdfBtn');
const pdfForm = document.getElementById('pdfForm');
const pdfDataInput = document.getElementById('pdfDataInput');
const pdfFiltersInput = document.getElementById('pdfFiltersInput');

// showingPending removed
let rowsPerPage = parseInt(rowsPerPageInput.value) || 8;
let currentPage = 1;
let currentSortKey = 'created_at';
let currentSortAsc = false;


/* Add / Edit modal wiring */
const modalAdd = document.getElementById('modalAdd');
const formAdd = document.getElementById('formAdd');
const openAddBtn = document.getElementById('openAddBtn');
const closeAdd = document.getElementById('closeAdd');
const addTitle = document.getElementById('addTitle');

openAddBtn.onclick = () => {
  formAdd.reset();
  document.getElementById('formAddAction').value = 'add';
  document.getElementById('formAddId').value = '';
  addTitle.textContent = 'New Expense';
  modalAdd.classList.add('active');
};

closeAdd.onclick = () => modalAdd.classList.remove('active');

document.querySelectorAll('.editBtn').forEach(btn=>{
  btn.onclick = (e)=>{
    const tr = btn.closest('tr');
    const data = JSON.parse(tr.dataset.row);
    formAdd.reset(); // Reset first
    document.getElementById('formAddAction').value = 'edit';
    document.getElementById('formAddId').value = data.id;
    document.getElementById('expense').value = data.expense;
    document.getElementById('store_or_merchant').value = data.store_or_merchant || '';
    document.getElementById('amount').value = parseFloat(data.amount || 0).toFixed(2);
    document.getElementById('person_in_charge').value = data.person_in_charge || '';
    addTitle.textContent = 'Edit Expense';
    modalAdd.classList.add('active');
  }
});


/* Delete - SweetAlert */
document.querySelectorAll('.deleteBtn').forEach(btn=>{
  btn.onclick = ()=>{
    const data = JSON.parse(btn.closest('tr').dataset.row);
    const id = data.id;
    Swal.fire({
        title: 'Are you sure?',
        text: `Delete expense: ${data.expense}? This cannot be undone.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        buttonsStyling: false,
        customClass: { confirmButton: 'btn primary', cancelButton: 'btn' }
    }).then((result) => {
        if (result.isConfirmed) {
            const fd = new FormData();
            fd.append('action','delete');
            fd.append('id', id);
            fetch('expenses.php', { method:'POST', body: fd }) // Fetch self
              .then(()=> location.reload());
        }
    });
  }
});

/* Pay modal logic removed */


/* --- Filter, Sort, Pagination --- */

function getFilteredRows() {
  const q = searchInput.value.toLowerCase().trim();
  return allRows.filter(r => {
    const textContent = r.textContent.toLowerCase();
    const matchesSearch = !q || textContent.includes(q);
    return matchesSearch; // No pending filter
  });
}

function sortRows(rowsToSort, key, asc) {
    rowsToSort.sort((a, b) => {
      const A_data = JSON.parse(a.dataset.row);
      const B_data = JSON.parse(b.dataset.row);
      const A = A_data[key];
      const B = B_data[key];
      // Numeric sort for amount
      if (key === 'amount') {
          const numA = parseFloat(A) || 0;
          const numB = parseFloat(B) || 0;
          return asc ? (numA - numB) : (numB - numA);
      }
      // Date sort
      if (key === 'date_created_only') {
            const dateA = new Date(A_data['created_at'] || 0);
            const dateB = new Date(B_data['created_at'] || 0);
            return asc ? dateA - dateB : dateB - dateA;
       }
      // String sort
      const sa = (A || '').toString().toLowerCase();
      const sb = (B || '').toString().toLowerCase();
      return asc ? sa.localeCompare(sb) : sb.localeCompare(sa);
    });
}

function renderTable() {
    const filteredRows = getFilteredRows();
    sortRows(filteredRows, currentSortKey, currentSortAsc);
    const tbody = document.querySelector('#expensesTable tbody'); // Updated ID
    tbody.innerHTML = '';
    const start = (currentPage - 1) * rowsPerPage;
    const end = start + rowsPerPage;
    const pageRows = filteredRows.slice(start, end);
    allRows.forEach(r => r.style.display = 'none'); // Hide all
    pageRows.forEach(r => {
        r.style.display = ''; // Show current page's rows
        tbody.appendChild(r);
    });
    renderPagination(filteredRows.length);
}

function renderPagination(totalFilteredRows) {
  const container = document.getElementById('pagination');
  container.innerHTML = '';
  const totalPages = Math.max(1, Math.ceil(totalFilteredRows / rowsPerPage));
  if (totalPages <= 1) return;
  for (let i = 1; i <= totalPages; i++) {
    const b = document.createElement('button');
    b.textContent = i;
    if (i === currentPage) b.classList.add('active');
    b.onclick = () => { currentPage = i; renderTable(); };
    container.appendChild(b);
  }
}

/* --- Event Listeners --- */
searchInput.addEventListener('input', () => { currentPage = 1; renderTable(); });
// showPendingBtn listener removed
rowsPerPageInput.addEventListener('change', () => { let newRows = parseInt(rowsPerPageInput.value); if (newRows > 0) { rowsPerPage = newRows; } else { rowsPerPageInput.value = rowsPerPage; } currentPage = 1; renderTable(); });

document.querySelectorAll('th[data-key]').forEach(th => {
  th.addEventListener('click', () => {
    const key = th.dataset.key;
    if (currentSortKey === key) { currentSortAsc = !currentSortAsc; } else { currentSortKey = key; currentSortAsc = true; }
    document.querySelectorAll('.sort-icon').forEach(i => i.className = 'fa fa-sort sort-icon');
    th.querySelector('.sort-icon').className = currentSortAsc ? 'fa fa-sort-up sort-icon' : 'fa fa-sort-down sort-icon';
    currentPage = 1; renderTable();
  });
});

/* PDF Generation Button Listener */
generatePdfBtn.addEventListener('click', () => {
    const filteredAndSortedRows = getFilteredRows();
    sortRows(filteredAndSortedRows, currentSortKey, currentSortAsc);

    const dataForPdf = filteredAndSortedRows.map(row => {
        const rowData = JSON.parse(row.dataset.row);
        const cells = row.getElementsByTagName('td');
        return {
            date: cells[0]?.textContent || '',
            expense: cells[1]?.textContent || '',
            store: cells[2]?.textContent || '',
            amount_display: cells[3]?.textContent || '₱ 0.00',
            incharge: cells[4]?.textContent || '',
            // Raw numeric values
            amount: parseFloat(rowData.amount || 0)
        };
    });
    const filtersForPdf = { search: searchInput.value, pending: false, /* No pending */ sortKey: currentSortKey, sortAsc: currentSortAsc };
    pdfDataInput.value = JSON.stringify(dataForPdf);
    pdfFiltersInput.value = JSON.stringify(filtersForPdf);
    pdfForm.submit();
});


/* --- Form Validation & Modal Close --- */
renderTable(); // Initial render

formAdd.addEventListener('submit', function(e){
  const expense = document.getElementById('expense').value.trim();
  const amount = parseFloat(document.getElementById('amount').value);
  const person = document.getElementById('person_in_charge').value.trim();

  if (!expense || isNaN(amount) || amount <= 0 || !person) {
    e.preventDefault();
    Swal.fire({ icon: 'error', title: 'Validation Error', text: 'Expense name, valid amount (>0), and Person In-Charge are required.', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } });
    return false;
  }
});

document.querySelectorAll('.modal').forEach(m=>{
  m.addEventListener('click', (ev)=>{ if (ev.target === m) m.classList.remove('active'); });
});
</script>
</body>
</html>