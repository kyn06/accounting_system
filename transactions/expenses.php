<?php
// transactions/expenses.php
session_start();

// Prevent browser caching
header("Cache-Control: no-store, no-cache, must-revalidate, max-age=0");
header("Pragma: no-cache");
header("Expires: 0"); // Expire immediately

require_once '../db.php';

// --- Include FPDF ---
$fpdf_path = __DIR__ . '/../fpdf/fpdf.php';
if (file_exists($fpdf_path)) {
    require_once($fpdf_path);
} else {
    define('FPDF_MISSING', true); // Flag missing library
}


if (!isset($_SESSION['user_id'])) { // Check user_id
    header("Location: ../index.php");
    exit();
}

$user_id = $_SESSION['user_id'];
// MODIFIED: Ensure display name is uppercase
$current_display_name = strtoupper($_SESSION['name'] ?? $_SESSION['username'] ?? 'User');
$role = $_SESSION['role'] ?? 'user';
$is_admin = ($_SESSION['role'] === 'admin');

// --- Enhanced FPDF Class (Keep as before) ---
class PDF extends FPDF {
    private $reportTitle = 'Report'; private $periodLabel = ''; private $generatedBy = '';
    private $colorAccent = [216, 76, 115]; private $colorLightPink = [255, 240, 246]; private $colorMuted = [107, 74, 87]; private $colorDark = [61, 26, 42]; private $colorBorder = [243, 208, 220];

    function setReportHeader($title, $period, $user) {
        // MODIFIED: $user is already uppercase
        if (function_exists('iconv')) {
            $this->reportTitle = @iconv('UTF-8', 'cp1252//IGNORE', $title) ?: $title;
            $this->periodLabel = @iconv('UTF-8', 'cp1252//IGNORE', $period) ?: $period;
            $this->generatedBy = @iconv('UTF-8', 'cp1252//IGNORE', $user) ?: $user;
        } else { $this->reportTitle = $title; $this->periodLabel = $period; $this->generatedBy = $user; }
    }
    function Header() { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->Rect(0, 0, $this->GetPageWidth(), 25, 'F'); $this->SetTextColor(255); $this->SetFont('Arial', 'B', 14); $this->SetY(8); $this->Cell(0, 8, 'RCRAO Accounting - '.$this->reportTitle, 0, 1, 'C'); $this->SetFont('Arial', '', 10); $this->Cell(0, 6, $this->periodLabel, 0, 1, 'C'); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetY(30); }
    function Footer() { $this->SetY(-15); $this->SetFont('Arial', 'I', 8); $this->SetTextColor(150); $generatedByStr = 'Generated By: ' . $this->generatedBy . ' on ' . date('Y-m-d H:i'); if (function_exists('iconv')) { $generatedByStr = @iconv('UTF-8', 'cp1252//IGNORE', $generatedByStr) ?: $generatedByStr; } $this->Cell(0, 5, $generatedByStr, 0, 1, 'L'); $this->Cell(0, 5, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C'); }
    function BasicTable($header, $data) { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->SetTextColor(255); $this->SetDrawColor(max(0, $this->colorAccent[0]-20), max(0, $this->colorAccent[1]-20), max(0, $this->colorAccent[2]-20)); $this->SetLineWidth(.3); $this->SetFont('', 'B', 9); $widths = $this->CalculateWidths($header, $data); for ($i = 0; $i < count($header); $i++) { $headerText = function_exists('iconv') ? @iconv('UTF-8', 'cp1252//IGNORE', $header[$i]) ?: $header[$i] : $header[$i]; $this->Cell($widths[$i], 7, $headerText, 1, 0, 'C', true); } $this->Ln(); $this->SetFont('Arial', '', 8); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetFillColor(255); $this->SetDrawColor($this->colorBorder[0], $this->colorBorder[1], $this->colorBorder[2]); $fill = false;
        foreach ($data as $row) {
            $this->SetFillColor($fill ? 245 : 255);
            for ($i = 0; $i < count($header); $i++) {
                $cellValue = $row[$i] ?? ''; $originalValue = $cellValue;
                // MODIFIED: Names (idx 4) are already uppercase from JS
                if (function_exists('iconv') && mb_detect_encoding((string)$cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', (string)$cellValue)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', (string)$cellValue); if ($convertedValue !== false) { $cellValue = $convertedValue; } }
                $cleanOriginalValue = preg_replace('/[^0-9.]/', '', (string)$originalValue);
                // MODIFIED: Align right if numeric OR starts with ₱
                $align = (is_numeric($cleanOriginalValue) || strpos(trim((string)$originalValue), '₱') === 0) ? 'R' : 'L';
                $this->Cell($widths[$i], 6, (string)$cellValue, 'LR', 0, $align, true);
            }
            $this->Ln(); $fill = !$fill;
        }
        $this->Cell(array_sum($widths), 0, '', 'T'); $this->Ln(4);
    }
    function CalculateWidths($header, $data) { $num_cols = count($header); $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin; $widths = []; for ($i = 0; $i < $num_cols; $i++) { $widths[$i] = $this->GetStringWidth($header[$i]) + 8; } $sampleData = array_slice($data, 0, 30); foreach ($sampleData as $row) { if(!is_array($row)) continue; for ($i = 0; $i < $num_cols; $i++) { $cellValue = $row[$i] ?? ''; if (function_exists('iconv') && mb_detect_encoding((string)$cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', (string)$cellValue)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', (string)$cellValue); if($convertedValue !== false) $cellValue = $convertedValue; } $widths[$i] = max($widths[$i], $this->GetStringWidth((string)$cellValue) + 8); } } $totalWidth = array_sum($widths); if ($totalWidth <= 0 || $num_cols === 0) { return []; } $scaleFactor = $pageWidth / $totalWidth; for ($i = 0; $i < $num_cols; $i++) { $widths[$i] *= $scaleFactor; } return $widths; }
}
// --- END FPDF Class ---

// --- NEW: Function to redirect with error and form data ---
function redirectWithError($message, $modal_id = null) {
    $_SESSION['error_message'] = $message;
    // Save POST data to session to repopulate form
    $_SESSION['form_data'] = $_POST;
    if ($modal_id) {
        // Tell the page to reopen this specific modal
        $_SESSION['open_modal'] = $modal_id;
    }
    header("Location: expenses.php");
    exit();
}


// --- Handle POST actions ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';
    function required($key) { return isset($_POST[$key]) && trim((string)$_POST[$key]) !== ''; } // Ensure string

    // --- PDF Generation Action ---
    if ($action === 'generate_current_view_pdf') {
        if (defined('FPDF_MISSING') || !file_exists($fpdf_path)) {
            // User-friendly fallback. JS will catch this first.
            echo "Error: The PDF generation library (FPDF) is missing. Please contact an administrator.";
            exit();
        }

        $jsonData = $_POST['pdf_data'] ?? '[]';
        $data = json_decode($jsonData, true);
        $filters = json_decode($_POST['pdf_filters'] ?? '{}', true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            // User-friendly fallback
            echo "Error: Could not read the data to generate the PDF. The data from the page was corrupted.";
            exit();
        }

        $pdf = new PDF('P', 'mm', 'A4'); $pdf->AliasNbPages();

        $reportTitle = "Expenses - Current View"; $periodLabel = "Filters: ";
        $filterParts = [];
        if (!empty($filters['search'])) $filterParts[] = "Search='{$filters['search']}'";
        if (empty($filterParts)) $filterParts[] = "None";
        $periodLabel .= implode(', ', $filterParts);
        $sortKeyLabel = str_replace(['_','only'], [' ',''], $filters['sortKey'] ?? 'Default');
        $periodLabel .= " | Sorted By: " . ucwords($sortKeyLabel) . " " . ($filters['sortAsc'] ? '(Asc)' : '(Desc)');

        // MODIFIED: $current_display_name is already uppercase
        $pdf->setReportHeader($reportTitle, $periodLabel, $current_display_name);
        $pdf->AddPage(); $pdf->SetFont('Arial', '', 8);

        if (!empty($data)) {
            $header = ['Date', 'Expense', 'Store/Merchant', 'Amount', 'In-Charge'];
            $table_data = []; $total_amount = 0;
            foreach ($data as $row) {
                // MODIFIED: Data from JS textContent is already uppercase
                $rowData = [ $row['date'] ?? '', $row['expense'] ?? '', $row['store'] ?? '', $row['amount_display'] ?? '₱ 0.00', $row['incharge'] ?? '' ];
                $table_data[] = $rowData; $total_amount += $row['amount'] ?? 0;
            }
            $pdf->BasicTable($header, $table_data); $pdf->Ln(5); $pdf->SetFont('Arial', 'B', 10);
            $totalAmountStr = 'Total Expenses: ₱ ' . number_format($total_amount, 2);
            if (function_exists('iconv')) { $totalAmountStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalAmountStr) ?: $totalAmountStr; }
            $pdf->Cell(0, 6, $totalAmountStr, 0, 1, 'R');
        } else { $pdf->SetFont('Arial', '', 10); $pdf->Cell(0, 10, 'No data found.', 0, 1, 'C'); }

        $filename = "Expenses_CurrentView_" . date('Ymd_His') . ".pdf";
        if (ob_get_level()) { ob_end_clean(); } $pdf->Output('D', $filename); exit();
    }
    // --- End PDF ---

    elseif ($action === 'add') {
        // Store/Merchant is optional, so it's not checked here
        if (!required('expense') || !isset($_POST['amount'])) {
            // User-friendly error with data retention
            redirectWithError("Please fill in all required fields: Expense Name and Amount.", '#modalAdd');
        }
        $expense = trim($_POST['expense']);
        $amount = floatval($_POST['amount']);
        $store_or_merchant = trim($_POST['store_or_merchant'] ?? '');
        $person_in_charge = $current_display_name; // Already uppercase
        $transaction_dt = date('Y-m-d H:i:s');

        if ($amount <= 0) {
            // User-friendly error with data retention
            redirectWithError("The 'Amount' must be a positive number (greater than 0).", '#modalAdd');
        }

        $stmt = $conn->prepare("INSERT INTO expenses (expense, amount, store_or_merchant, person_in_charge, created_at, transaction_datetime) VALUES (?, ?, ?, ?, ?, ?)");
        if ($stmt) {
            $stmt->bind_param("sdssss", $expense, $amount, $store_or_merchant, $person_in_charge, $transaction_dt, $transaction_dt);
            if ($stmt->execute()) {
                $_SESSION['success_message'] = "Expense added successfully.";

                // --- ADD LOGGING ---
                try {
                    $new_expense_id = $conn->insert_id;
                    $log_user_id = $_SESSION['user_id'] ?? 0;
                    $log_username = $person_in_charge; // Already uppercase
                    $log_details = "User '{$log_username}' created Expense '{$expense}'. Amount: ₱" . number_format($amount, 2) . (!empty($store_or_merchant) ? " at '{$store_or_merchant}'" : "");
                    $log_stmt = $conn->prepare("INSERT INTO transaction_logs (user_id, username, action_type, entity_type, entity_id, details, log_timestamp) VALUES (?, ?, 'CREATE', 'Expense', ?, ?, ?)");
                    if ($log_stmt) {
                        $log_stmt->bind_param("isiss", $log_user_id, $log_username, $new_expense_id, $log_details, $transaction_dt);
                        $log_stmt->execute();
                        $log_stmt->close();
                    }
                } catch (Exception $log_e) { /* Optional: Log error to file */ }
                // --- END LOGGING ---

            } else {
                // User-friendly error with data retention
                redirectWithError("A database error occurred while saving. Please try again or contact support.", '#modalAdd');
            }
            $stmt->close();
        } else {
            // User-friendly error with data retention
            redirectWithError("A database error occurred. Could not prepare to save the expense.", '#modalAdd');
        }
    }
    elseif ($action === 'edit') {
        $expe_id = intval($_POST['expe_id'] ?? 0);

        // Store/Merchant is optional
        if ($expe_id <= 0 || !required('expense') || !isset($_POST['amount'])) {
            // User-friendly error with data retention
            redirectWithError("Missing required fields. Please fill in all fields to edit the expense.", '#modalAdd');
        }
        $expense = trim($_POST['expense']);
        $amount = floatval($_POST['amount']);
        $store_or_merchant = trim($_POST['store_or_merchant'] ?? '');
        $person_in_charge = $current_display_name; // User doing the edit (already uppercase)

        if ($amount <= 0) {
            // User-friendly error with data retention
            redirectWithError("The 'Amount' must be a positive number (greater than 0).", '#modalAdd');
        }

        $stmt = $conn->prepare("UPDATE expenses SET expense = ?, amount = ?, store_or_merchant = ?, person_in_charge = ?, transaction_datetime = NOW() WHERE expe_id = ?");
        if ($stmt) {
            $stmt->bind_param("sdssi", $expense, $amount, $store_or_merchant, $person_in_charge, $expe_id);
            if ($stmt->execute()) {
                $_SESSION['success_message'] = "Expense updated successfully.";

                // --- ADD LOGGING ---
                try {
                    $log_user_id = $_SESSION['user_id'] ?? 0;
                    $log_username = $person_in_charge; // Already uppercase
                    $log_details = "User '{$log_username}' edited Expense ID {$expe_id}. New details: '{$expense}', Amount: ₱" . number_format($amount, 2);
                    $log_stmt = $conn->prepare("INSERT INTO transaction_logs (user_id, username, action_type, entity_type, entity_id, details) VALUES (?, ?, 'UPDATE', 'Expense', ?, ?)");
                    if ($log_stmt) {
                        $log_stmt->bind_param("isis", $log_user_id, $log_username, $expe_id, $log_details);
                        $log_stmt->execute();
                        $log_stmt->close();
                    }
                } catch (Exception $log_e) { /* Optional: Log error to file */ }
                // --- END LOGGING ---

            } else {
                // User-friendly error with data retention
                redirectWithError("A database error occurred while updating. The changes were not saved.", '#modalAdd');
            }
            $stmt->close();
        } else {
            // User-friendly error with data retention
            redirectWithError("A database error occurred. Could not prepare the update.", '#modalAdd');
        }
    }
    elseif ($action === 'delete') {
        $expe_id = intval($_POST['expe_id'] ?? 0);
        if ($expe_id > 0) {

            // --- ADD LOGGING (Must happen before delete) ---
            try {
                $expense_log = 'ID ' . $expe_id;
                $amount_log = 0;
                $stmt_get = $conn->prepare("SELECT expense, amount FROM expenses WHERE expe_id = ?");
                if($stmt_get){
                    $stmt_get->bind_param("i", $expe_id);
                    if($stmt_get->execute()) {
                        $stmt_get->bind_result($expense_log, $amount_log);
                        $stmt_get->fetch();
                    }
                    $stmt_get->close();
                }

                $log_user_id = $_SESSION['user_id'] ?? 0;
                $log_username = $current_display_name; // Already uppercase
                $log_details = "User '{$log_username}' DELETED Expense '{$expense_log}' (Amount: ₱" . number_format($amount_log, 2) . ").";
                $log_stmt = $conn->prepare("INSERT INTO transaction_logs (user_id, username, action_type, entity_type, entity_id, details) VALUES (?, ?, 'DELETE', 'Expense', ?, ?)");
                if ($log_stmt) {
                    $log_stmt->bind_param("isis", $log_user_id, $log_username, $expe_id, $log_details);
                    $log_stmt->execute();
                    $log_stmt->close();
                }
            } catch (Exception $log_e) { /* Optional: Log error to file */ }
            // --- END LOGGING ---

            $stmt = $conn->prepare("DELETE FROM expenses WHERE expe_id = ?");
            if ($stmt) {
                $stmt->bind_param("i", $expe_id);
                if ($stmt->execute()) {
                    $_SESSION['success_message'] = "Expense deleted successfully.";
                } else {
                    // User-friendly error
                    $_SESSION['error_message'] = "Could not delete the item. It might be in use or protected by the database.";
                }
                $stmt->close();
            } else {
                // User-friendly error
                $_SESSION['error_message'] = "A database error occurred. Could not prepare the delete operation.";
            }
        } else {
            // User-friendly error
            $_SESSION['error_message'] = "Invalid ID provided. The item could not be found to delete.";
        }
    }
    // Default redirect if no other action
    header("Location: expenses.php"); 
    exit();
}

// --- NEW: Check for saved form data from a previous error ---
$form_data = $_SESSION['form_data'] ?? [];
$open_modal = $_SESSION['open_modal'] ?? null;
unset($_SESSION['form_data'], $_SESSION['open_modal']);


// Fetch initial data
$expenses_q = $conn->query("
    SELECT expe_id, expense, amount, store_or_merchant, person_in_charge, created_at, DATE(created_at) as date_created_only
    FROM expenses
    ORDER BY created_at DESC
");

// Feedback messages
$error_message = $_SESSION['error_message'] ?? null;
$success_message = $_SESSION['success_message'] ?? null;
unset($_SESSION['error_message'], $_SESSION['success_message']);

// --- NEW: Check for main query failure ---
if ($expenses_q === false && !$error_message) {
    // Only set this if no other error is pending
    $error_message = "A fatal error occurred. Could not load expenses data from the database. Please refresh the page.";
}

?>
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Expenses — RCRAO Accounting</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style> /* CSS remains the same */
    :root { --accent:#d84c73; --accent-light:#ffb6c1; --bg1:#fff0f6; --bg2:#ffe6ee; --card:#fff; --muted:#6b4a57; --shadow:0 8px 25px rgba(216,76,115,0.1); --sidebar-collapsed:72px; --sidebar-expanded:230px; --accent-dark: #b83b5e; }
    *{box-sizing:border-box;font-family:"Poppins",sans-serif;margin:0;padding:0}
    body{background:linear-gradient(135deg,var(--bg1),var(--bg2));color:var(--muted);overflow-x:hidden}
    .sidebar{position:fixed;top:0;left:0;height:100vh;width:var(--sidebar-collapsed);background:linear-gradient(180deg,var(--accent) 0%,#ff7ea1 100%); display:flex;flex-direction:column;justify-content:space-between;padding:12px;transition:width .3s ease;z-index:1001}
    .sidebar:hover,.sidebar.expanded{width:var(--sidebar-expanded);box-shadow:var(--shadow)}
    nav.side-menu{margin-top:20px;display:flex;flex-direction:column;gap:8px}
    nav.side-menu a{display:flex;align-items:center;gap:15px;padding:12px;color:#fff;text-decoration:none;border-radius:8px;font-weight:500;transition: all .2s ease;}
    nav.side-menu a i{width:24px;text-align:center; font-size: 1.1em; transition: transform 0.2s ease;}
    nav.side-menu a .label{display:none; white-space: nowrap; opacity: 0; transition: opacity 0.2s ease;}
    .sidebar:hover nav.side-menu a .label,.sidebar.expanded nav.side-menu a .label{display:inline; opacity: 1;}
    nav.side-menu a:hover{background:rgba(255,255,255,0.2);transform:translateX(8px); }
    nav.side-menu a.active{background:rgba(255,255,255,0.15);}
    nav.side-menu a:hover i { transform: scale(1.1); }
    .main{margin-left:var(--sidebar-collapsed);padding:28px;transition: margin-left .3s ease;}
    .header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}
    .header h1{color:var(--accent-dark);font-size:24px;font-weight:700}
    .user-info{font-size:14px;font-weight:600;background:var(--card);padding:10px 14px;border-radius:10px;box-shadow:var(--shadow)}
    .toolbar{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:18px;background:var(--card);padding:14px 16px;border-radius:12px;box-shadow:var(--shadow)}
    .toolbar input{padding:8px 12px;border-radius:8px;border:1px solid #ccc;width:220px}
    .btn{ border: none; border-radius: 8px; padding: 10px 18px; font-weight: 600; cursor: pointer; transition: all 0.25s ease; background: var(--accent-light); color: var(--accent-dark); margin: 0 5px; font-family:"Poppins",sans-serif; font-size: 14px;}
    .btn:hover { background: var(--accent); color: #fff; transform: translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.2);}
    .btn.primary{ background:var(--accent); color:#fff;}
    .btn.primary:hover{ background: var(--accent-dark); transform:translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.3);}
    .btn.small{padding:8px 12px;font-size:13px}
    .btn i { margin-right: 8px; }
    .top-tabs{display:flex;gap:8px;margin-bottom:18px}
    .top-tabs .tab{background:var(--card);padding:10px 16px;border-radius:8px;cursor:pointer;font-weight:600;color:var(--muted);box-shadow:var(--shadow);transition:.2s}
    .top-tabs .tab.active{background:var(--accent);color:#fff}
    .table-card{background:var(--card);border-radius:14px;padding:16px;box-shadow:var(--shadow);overflow-x:auto}
    table{width:100%;border-collapse:collapse;text-align:left; font-size: 13px;}
    th,td{padding:10px 12px;border-bottom:1px solid #f3d0dc; white-space: nowrap;}
    th{background:#ffd6e5;color:#6b4a57;cursor:pointer;user-select:none;position:relative; font-weight: 600;}
    th .sort-icon{margin-left:6px;font-size:11px;color:#888}
    tr:hover{background:#fff6f9}
    .icon-btn{background:none;border:none;color:var(--accent);cursor:pointer;font-size:15px;margin:0 4px;transition:.2s}
    .icon-btn:hover{transform:scale(1.15); color: var(--accent-dark);}
    .pagination{text-align:center;margin-top:18px;display:flex;justify-content:center;gap:6px;flex-wrap:wrap}
    .pagination button{border:none;background:var(--accent);color:#fff;padding:6px 12px;border-radius:6px;cursor:pointer; font-size: 13px;}
    .pagination button.active{background:#ff91a4}
    .modal { position: fixed; inset: 0; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(5px); padding: 15px;}
    .modal.active { display: flex; animation: fadeIn .3s ease; }
    .modal-content { background: var(--card); border-radius: 16px; padding: 30px; width: 450px; max-width: 95%; box-shadow: 0 10px 40px rgba(0,0,0,0.15); animation: slideUp .35s ease; position: relative; }
    .modal h2 { color: var(--accent-dark); text-align: center; margin-bottom: 25px; font-weight: 700; font-size: 20px;}
    .modal form label { font-size: 14px; font-weight: 600; color: var(--muted); display: block; margin-top: 15px; margin-bottom: 5px; }
    .modal form input { width: 100%; padding: 12px 15px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9; font-size: 14px; transition: all 0.2s ease; font-family:"Poppins",sans-serif; }
    .modal form input:focus { outline: none; border-color: var(--accent); background: #fff; box-shadow: 0 0 0 3px rgba(216, 76, 115, 0.15); }
    .modal .actions { display: flex; justify-content: flex-end; margin-top: 25px; gap: 10px; }
    @keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
    @keyframes slideUp { from { transform: translateY(15px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
    </style>
</head>
<body>
<aside class="sidebar">
    <nav class="side-menu">
        <?php if ($role === 'admin'): ?>
        <a href="../dashboard.php"><i class="fa fa-chart-pie"></i><span class="label">Dashboard</span></a>
        <?php endif; ?>
        <a href="collections.php" ><i class="fa fa-cash-register"></i><span class="label">Transactions</span></a>
        <?php if ($role === 'admin'): ?>
        <a href="../users.php"><i class="fa fa-users-cog"></i><span class="label">Users</span></a>
        <?php endif; ?>
        <a href="../logout.php"><i class="fa fa-sign-out-alt"></i><span class="label">Logout</span></a>
    </nav>
</aside>

<main class="main">
    <div class="header">
        <h1>Expenses</h1>
        <div class="user-info">Logged in as: <b><?= htmlspecialchars($current_display_name) ?></b></div>
    </div>

    <div class="top-tabs">
        <div class="tab" onclick="location.href='collections.php'">Collections</div>
        <div class="tab" onclick="location.href='receivables.php'">Receivables</div>
        <div class="tab active">Expenses</div>
        <?php if ($is_admin): ?>
            <div class="tab" onclick="location.href='transaction_logs.php'">Logs</div>
        <?php endif; ?>
    </div>

    <div class="toolbar">
        <input type="text" id="searchInput" placeholder="🔍 Search...">
        <button class="btn primary" id="openAddBtn"><i class="fa fa-plus"></i> New Expense</button>
        <button class="btn small" id="generatePdfBtn" style="margin-left: 10px;"><i class="fa fa-file-pdf"></i> PDF Current View</button>
        <div style="margin-left:auto">
            <input type="number" id="rowsPerPageInput" placeholder="Rows / page" style="width:120px;padding:8px;border-radius:8px;border:1px solid #ddd" value="8" min="1">
        </div>
    </div>

    <div class="table-card">
        <table id="expensesTable">
            <thead>
                <tr>
                    <th data-key="date_created_only">Date <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="expense">Expense <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="store_or_merchant">Store/Merchant <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="amount">Amount <i class="fa fa-sort sort-icon"></i></th>
                    <th data-key="person_in_charge">In-Charge <i class="fa fa-sort sort-icon"></i></th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <?php
                // Use the check for $expenses_q from before the <html> tag
                if ($expenses_q) {
                    while ($r = $expenses_q->fetch_assoc()):
                        $primary_key = $r['expe_id'] ?? null; // Use expe_id
                        if ($primary_key === null) continue;

                        $data = htmlentities(json_encode($r), ENT_QUOTES, 'UTF-8');
                        $date_formatted = !empty($r['date_created_only']) ? date('M d, Y', strtotime($r['date_created_only'])) : '';
                ?>
                <tr data-row='<?= $data ?>'>
                    <td><?= $date_formatted ?></td>
                    <td><?= htmlspecialchars($r['expense']) ?></td>
                    <td><?= htmlspecialchars($r['store_or_merchant']) ?></td>
                    <td>₱<?= number_format($r['amount'],2) ?></td>
                    <td><?= htmlspecialchars(strtoupper($r['person_in_charge'])) ?></td>
                    <td>
                        <button class="icon-btn editBtn" title="Edit"><i class="fa fa-pen"></i></button>
                        <?php if ($is_admin): ?>
                            <button class="icon-btn deleteBtn" title="Delete"><i class="fa fa-trash"></i></button>
                        <?php endif; ?>
                    </td>
                </tr>
                <?php
                    endwhile;
                    $expenses_q->free(); // Free result set
                } else {
                    // The main error is now shown in a SweetAlert
                    echo "<tr><td colspan='6' style='text-align:center;color:var(--danger);'>Could not load data. An error was reported.</td></tr>";
                }
                ?>
            </tbody>
        </table>
        <div class="pagination" id="pagination"></div>
    </div>
</main>

<div class="modal" id="modalAdd">
    <div class="modal-content">
        <h2 id="addTitle">New Expense</h2>
        <form method="post" id="formAdd" action="expenses.php">
            <input type="hidden" name="action" id="formAddAction" value="<?= htmlspecialchars($form_data['action'] ?? 'add') ?>">
            <input type="hidden" name="expe_id" id="formAddId" value="<?= htmlspecialchars($form_data['expe_id'] ?? '') ?>">
            
            <label>Expense</label>
            <input type="text" name="expense" id="expense" required value="<?= htmlspecialchars($form_data['expense'] ?? '') ?>">
            
            <label>Store/Merchant (optional)</label>
            <input type="text" name="store_or_merchant" id="store_or_merchant" value="<?= htmlspecialchars($form_data['store_or_merchant'] ?? '') ?>">
            
            <label>Amount</label>
            <input type="number" step="0.01" name="amount" id="amount" required min="0.01" value="<?= htmlspecialchars($form_data['amount'] ?? '') ?>">
            
            <div class="actions">
                <button type="button" class="btn" id="closeAdd">Cancel</button>
                <button type="submit" class="btn primary">Save</button>
            </div>
        </form>
    </div>
</div>


<form method="POST" action="expenses.php" id="pdfForm" target="_blank" style="display: none;">
    <input type="hidden" name="action" value="generate_current_view_pdf">
    <input type="hidden" name="pdf_data" id="pdfDataInput">
    <input type="hidden" name="pdf_filters" id="pdfFiltersInput">
</form>

<script>
    const FPDF_MISSING = <?= defined('FPDF_MISSING') ? 'true' : 'false' ?>;
    const MODAL_TO_OPEN = '<?= $open_modal ?? '' ?>';
</script>

<script>
/* DOM helpers & initial state - Same */
const searchInput = document.getElementById('searchInput');
const rowsPerPageInput = document.getElementById('rowsPerPageInput');
const allRows = Array.from(document.querySelectorAll('#expensesTable tbody tr[data-row]')); // Only select data rows
const generatePdfBtn = document.getElementById('generatePdfBtn');
const pdfForm = document.getElementById('pdfForm');
const pdfDataInput = document.getElementById('pdfDataInput');
const pdfFiltersInput = document.getElementById('pdfFiltersInput');

let rowsPerPage = parseInt(rowsPerPageInput.value) || 8;
let currentPage = 1;
let currentSortKey = 'created_at';
let currentSortAsc = false;

/* Add / Edit modal wiring - Use expe_id */
const modalAdd = document.getElementById('modalAdd');
const formAdd = document.getElementById('formAdd');
const openAddBtn = document.getElementById('openAddBtn');
const closeAdd = document.getElementById('closeAdd');
const addTitle = document.getElementById('addTitle');

// --- NEW: Helper function to clear original data ---
function clearModalData() {
    delete formAdd.dataset.originalExpense;
    delete formAdd.dataset.originalStore;
    delete formAdd.dataset.originalAmount;
}

openAddBtn.onclick = () => {
    formAdd.reset(); 
    document.getElementById('formAddAction').value = 'add';
    document.getElementById('formAddId').value = ''; 
    addTitle.textContent = 'New Expense';
    
    // --- NEW: Clear original data cache ---
    clearModalData();
    
    modalAdd.classList.add('active');
};
closeAdd.onclick = () => {
    modalAdd.classList.remove('active');
    clearModalData(); // --- NEW: Clear data on cancel ---
};

document.querySelectorAll('.editBtn').forEach(btn=>{
    btn.onclick = (e)=>{
        // Clear form first in case it was repopulated from an error
        formAdd.reset();
        const tr = btn.closest('tr'); const data = JSON.parse(tr.dataset.row);
        const originalAmount = parseFloat(data.amount || 0).toFixed(2);
        const originalStore = data.store_or_merchant || '';

        document.getElementById('formAddAction').value = 'edit';
        document.getElementById('formAddId').value = data.expe_id; // Use expe_id
        document.getElementById('expense').value = data.expense;
        document.getElementById('store_or_merchant').value = originalStore;
        document.getElementById('amount').value = originalAmount;
        
        // --- NEW: Store original data ---
        formAdd.dataset.originalExpense = data.expense;
        formAdd.dataset.originalStore = originalStore;
        formAdd.dataset.originalAmount = originalAmount;

        addTitle.textContent = 'Edit Expense'; 
        modalAdd.classList.add('active');
    }
});


/* Delete - SweetAlert - Use expe_id */
document.querySelectorAll('.deleteBtn').forEach(btn=>{
    btn.onclick = ()=>{
        const data = JSON.parse(btn.closest('tr').dataset.row); const expe_id = data.expe_id; // Use expe_id
        // MODIFIED: More descriptive user-friendly text
        Swal.fire({
            title: 'Are you sure?',
            text: `This will permanently delete the expense '${data.expense}'. You cannot undo this.`,
            icon: 'warning',
            showCancelButton: true, confirmButtonText: 'Yes, delete it!', buttonsStyling: false,
            customClass: { confirmButton: 'btn primary', cancelButton: 'btn' }
        }).then((result) => {
            if (result.isConfirmed) {
                const form = document.createElement('form'); form.method = 'POST'; form.action = 'expenses.php';
                form.innerHTML = `<input type="hidden" name="action" value="delete"><input type="hidden" name="expe_id" value="${expe_id}">`;
                document.body.appendChild(form); form.submit();
            }
        });
    }
});

/* --- Filter, Sort, Pagination --- Same */
function getFilteredRows() { const q = searchInput.value.toLowerCase().trim(); return allRows.filter(r => { const tc = r.textContent.toLowerCase(); return !q || tc.includes(q); }); }
function sortRows(rowsToSort, key, asc) { rowsToSort.sort((a, b) => { const A_d = JSON.parse(a.dataset.row); const B_d = JSON.parse(b.dataset.row); let A = A_d[key]; let B = B_d[key]; if (key === 'amount') { const nA = parseFloat(A) || 0; const nB = parseFloat(B) || 0; return asc ? (nA - nB) : (nB - nA); } if (key === 'date_created_only') { A = A_d['created_at'] || 0; B = B_d['created_at'] || 0; const dA = new Date(A); const dB = new Date(B); return asc ? dA - dB : dB - dA; } const sa = (A || '').toString().toLowerCase(); const sb = (B || '').toString().toLowerCase(); return asc ? sa.localeCompare(sb) : sb.localeCompare(sa); }); }
function renderTable() { 
    const fr = getFilteredRows(); 
    sortRows(fr, currentSortKey, currentSortAsc); 
    const tb = document.querySelector('#expensesTable tbody'); 
    tb.innerHTML = ''; 
    const st = (currentPage - 1) * rowsPerPage; 
    const en = st + rowsPerPage; 
    const pr = fr.slice(st, en); 
    
    if (pr.length === 0 && allRows.length > 0) {
        tb.innerHTML = '<tr><td colspan="6" style="text-align:center;">No expenses found matching your search.</td></tr>';
    } else if (allRows.length === 0 && <?= $expenses_q ? 'true' : 'false' ?>) {
        tb.innerHTML = '<tr><td colspan="6" style="text-align:center;">No expenses have been recorded yet.</td></tr>';
    } else {
        pr.forEach(r => tb.appendChild(r)); 
    }
    
    renderPagination(fr.length); 
}
function renderPagination(total) { const c = document.getElementById('pagination'); c.innerHTML = ''; const tp = Math.max(1, Math.ceil(total / rowsPerPage)); if (tp <= 1) return; for (let i = 1; i <= tp; i++) { const b = document.createElement('button'); b.textContent = i; if (i === currentPage) b.classList.add('active'); b.onclick = () => { currentPage = i; renderTable(); }; c.appendChild(b); } }

/* --- Event Listeners --- Same */
searchInput.addEventListener('input', () => { currentPage = 1; renderTable(); });
rowsPerPageInput.addEventListener('change', () => { let nr = parseInt(rowsPerPageInput.value); if (nr > 0) { rowsPerPage = nr; } else { rowsPerPageInput.value = rowsPerPage; } currentPage = 1; renderTable(); });
document.querySelectorAll('th[data-key]').forEach(th => { th.addEventListener('click', () => { const k = th.dataset.key; if (currentSortKey === k) { currentSortAsc = !currentSortAsc; } else { currentSortKey = k; currentSortAsc = true; } document.querySelectorAll('.sort-icon').forEach(i => i.className = 'fa fa-sort sort-icon'); th.querySelector('.sort-icon').className = currentSortAsc ? 'fa fa-sort-up sort-icon' : 'fa fa-sort-down sort-icon'; currentPage = 1; renderTable(); }); });

/* PDF Generation Button Listener - NEW FPDF Check */
generatePdfBtn.addEventListener('click', () => {
    // NEW: User-friendly SweetAlert check for missing library
    if (typeof FPDF_MISSING !== 'undefined' && FPDF_MISSING) {
        Swal.fire({
            icon: 'error',
            title: 'PDF Generation Error',
            text: 'The PDF library (FPDF) is missing on the server. Please contact an administrator to fix the installation.',
            buttonsStyling: false,
            customClass: { confirmButton: 'btn primary' }
        });
        return; // Stop the PDF generation
    }

    const filteredAndSortedRows = getFilteredRows(); sortRows(filteredAndSortedRows, currentSortKey, currentSortAsc);
    const dataForPdf = filteredAndSortedRows.map(row => {
        const rowData = JSON.parse(row.dataset.row); const cells = row.getElementsByTagName('td');
        // MODIFIED: textContent from cells is now uppercase for incharge
        return {
            date: cells[0]?.textContent||'',
            expense: cells[1]?.textContent||'',
            store: cells[2]?.textContent||'',
            amount_display: cells[3]?.textContent||'₱ 0.00',
            incharge: cells[4]?.textContent||'', // Already uppercase
            amount: parseFloat(rowData.amount||0)
        };
    });
    const filtersForPdf = { search: searchInput.value, sortKey: currentSortKey, sortAsc: currentSortAsc };
    pdfDataInput.value = JSON.stringify(dataForPdf); pdfFiltersInput.value = JSON.stringify(filtersForPdf); pdfForm.submit();
});

/* --- Form Validation & Modal Close --- */
renderTable();

// --- MODIFIED: Form submit listener with "no change" and "confirm" logic ---
formAdd.addEventListener('submit', function(e){
    // Prevent immediate submission to validate first
    e.preventDefault(); 
    
    const action = document.getElementById('formAddAction').value;
    const expense = document.getElementById('expense').value.trim();
    const store = document.getElementById('store_or_merchant').value.trim();
    const amountFloat = parseFloat(document.getElementById('amount').value);
    let err = '';
    
    // --- 1. Client-side Validation (for both add and edit) ---
    if (!expense) {
        err = 'Please enter an expense name.';
    } else if (isNaN(amountFloat) || amountFloat <= 0) {
        err = 'Please enter a valid amount that is greater than 0.';
    }
    
    if (err) {
        Swal.fire({
            icon: 'error',
            title: 'Oops... Please check the form',
            text: err,
            buttonsStyling: false,
            customClass: { confirmButton: 'btn primary' }
        });
        return false; // Stop processing
    }
    
    // --- 2. Handle based on action ---
    if (action === 'add') {
        // For 'add', just submit. No confirmation needed.
        formAdd.submit();
        
    } else if (action === 'edit') {
        // --- 3. Check for changes (for 'edit' only) ---
        const originalExpense = formAdd.dataset.originalExpense || '';
        const originalStore = formAdd.dataset.originalStore || '';
        const originalAmount = formAdd.dataset.originalAmount || '0.00';
        
        const currentAmountFormatted = amountFloat.toFixed(2);
        
        const noChanges = (
            expense === originalExpense &&
            store === originalStore &&
            currentAmountFormatted === originalAmount
        );
    
        if (noChanges) {
            // --- Goal 1: No changes detected ---
            Swal.fire({
                icon: 'info',
                title: 'No Changes Detected',
                text: 'You have not made any changes to the expense.',
                confirmButtonText: 'OK',
                buttonsStyling: false,
                customClass: { confirmButton: 'btn primary' }
            });
            // Stay in modal, submission is already prevented
            
        } else {
            // --- Goal 2: Changes detected, ask for confirmation ---
            Swal.fire({
                title: 'Confirm Update',
                text: 'Are you sure you want to save these changes?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, update it!',
                cancelButtonText: 'Cancel',
                buttonsStyling: false,
                customClass: {
                    confirmButton: 'btn primary',
                    cancelButton: 'btn'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    // User confirmed, now we submit the form
                    formAdd.submit();
                }
                // If result.isDismissed (cancel), do nothing. Modal stays open.
            });
        }
    }
});

document.querySelectorAll('.modal').forEach(m=>{ 
    m.addEventListener('click', (ev)=>{ 
        if (ev.target === m) {
            m.classList.remove('active');
            clearModalData(); // --- NEW: Clear data on backdrop click ---
        }
    }); 
});

// Display feedback messages from PHP
document.addEventListener('DOMContentLoaded', () => {
    <?php if ($success_message): ?>
    Swal.fire({
        icon: 'success', title: 'Success!',
        text: '<?= addslashes($success_message) ?>',
        timer: 2500, showConfirmButton: false
    });
    <?php elseif ($error_message): ?>
    Swal.fire({
        icon: 'error', title: 'An Error Occurred',
        text: '<?= addslashes($error_message) ?>', // This now shows the user-friendly PHP message
        confirmButtonText: 'OK', buttonsStyling: false,
        customClass: { confirmButton: 'btn primary' }
    });
    <?php endif; ?>

    // --- NEW: Check if PHP told us to re-open a modal ---
    if (MODAL_TO_OPEN) {
        const modalToOpen = document.querySelector(MODAL_TO_OPEN);
        if (modalToOpen) {
            // Repopulate title based on action
            const action = document.getElementById('formAddAction').value;
            if (action === 'edit') {
                document.getElementById('addTitle').textContent = 'Edit Expense';
            } else {
                document.getElementById('addTitle').textContent = 'New Expense';
            }
            modalToOpen.classList.add('active');
        }
    }
});
</script>
</body>
</html>