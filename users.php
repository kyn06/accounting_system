<?php
// users.php
session_start();
require_once 'db.php'; // Assumes db.php is in the parent directory

// --- Include FPDF ---
$fpdf_path = __DIR__ . '/fpdf/fpdf.php'; // Path from root
if (file_exists($fpdf_path)) {
    require_once($fpdf_path);
} else {
    define('FPDF_MISSING', true);
}


// --- Security Check: Ensure user is logged in and is an admin ---
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: dashboard.php");
    exit();
}

$current_user_id = $_SESSION['user_id']; // Get current user's ID for delete check
// Use name from session for display, fallback to username
$current_display_name = $_SESSION['name'] ?? $_SESSION['username'] ?? 'Admin';
$current_role = $_SESSION['role']; // Should be 'admin' based on check above

// --- Enhanced FPDF Class ---
class PDF extends FPDF {
    private $reportTitle = 'Report'; private $periodLabel = ''; private $generatedBy = '';
    private $colorAccent = [216, 76, 115]; private $colorLightPink = [255, 240, 246]; private $colorMuted = [107, 74, 87]; private $colorDark = [61, 26, 42]; private $colorBorder = [243, 208, 220];

    function setReportHeader($title, $period, $user) {
        if (function_exists('iconv')) {
            $this->reportTitle = @iconv('UTF-8', 'cp1252//IGNORE', $title) ?: $title;
            $this->periodLabel = @iconv('UTF-8', 'cp1252//IGNORE', $period) ?: $period;
            $this->generatedBy = @iconv('UTF-8', 'cp1252//IGNORE', $user) ?: $user;
        } else { $this->reportTitle = $title; $this->periodLabel = $period; $this->generatedBy = $user; }
    }
    function Header() { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->Rect(0, 0, $this->GetPageWidth(), 25, 'F'); $this->SetTextColor(255); $this->SetFont('Arial', 'B', 14); $this->SetY(8); $this->Cell(0, 8, 'RCRAO Accounting - '.$this->reportTitle, 0, 1, 'C'); $this->SetFont('Arial', '', 10); $this->Cell(0, 6, $this->periodLabel, 0, 1, 'C'); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetY(30); }
    function Footer() { $this->SetY(-15); $this->SetFont('Arial', 'I', 8); $this->SetTextColor(150); $generatedByStr = 'Generated By: ' . $this->generatedBy . ' on ' . date('Y-m-d H:i'); if (function_exists('iconv')) { $generatedByStr = @iconv('UTF-8', 'cp1252//IGNORE', $generatedByStr) ?: $generatedByStr; } $this->Cell(0, 5, $generatedByStr, 0, 1, 'L'); $this->Cell(0, 5, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C'); }
    function BasicTable($header, $data) { $this->SetFillColor($this->colorAccent[0], $this->colorAccent[1], $this->colorAccent[2]); $this->SetTextColor(255); $this->SetDrawColor(max(0, $this->colorAccent[0]-20), max(0, $this->colorAccent[1]-20), max(0, $this->colorAccent[2]-20)); $this->SetLineWidth(.3); $this->SetFont('', 'B', 9); $widths = $this->CalculateWidths($header, $data); for ($i = 0; $i < count($header); $i++) { $headerText = function_exists('iconv') ? @iconv('UTF-8', 'cp1252//IGNORE', $header[$i]) ?: $header[$i] : $header[$i]; $this->Cell($widths[$i], 7, $headerText, 1, 0, 'C', true); } $this->Ln(); $this->SetFont('Arial', '', 8); $this->SetTextColor($this->colorDark[0], $this->colorDark[1], $this->colorDark[2]); $this->SetFillColor(255); $this->SetDrawColor($this->colorBorder[0], $this->colorBorder[1], $this->colorBorder[2]); $fill = false;
        foreach ($data as $row) {
            $this->SetFillColor($fill ? 245 : 255);
            for ($i = 0; $i < count($header); $i++) {
                $cellValue = $row[$i] ?? ''; $originalValue = $cellValue;
                if (function_exists('iconv') && mb_detect_encoding($cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', $cellValue)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', $cellValue); if ($convertedValue !== false) { $cellValue = $convertedValue; } }
                $cleanOriginalValue = preg_replace('/[^0-9.]/', '', $originalValue);
                $align = 'L'; if (strpos($originalValue, '₱') !== false) { $align = 'R'; } elseif (in_array($header[$i], ['Status', 'Role'])) { $align = 'C'; }
                $this->Cell($widths[$i], 6, $cellValue, 'LR', 0, $align, true);
            }
            $this->Ln();
            $fill = !$fill;
        }
        $this->Cell(array_sum($widths), 0, '', 'T'); $this->Ln(4);
    }
    function CalculateWidths($header, $data) { $num_cols = count($header); $pageWidth = $this->GetPageWidth() - $this->lMargin - $this->rMargin; $widths = []; for ($i = 0; $i < $num_cols; $i++) { $widths[$i] = $this->GetStringWidth($header[$i]) + 8; } $sampleData = array_slice($data, 0, 30); foreach ($sampleData as $row) { for ($i = 0; $i < $num_cols; $i++) { $cellValue = $row[$i] ?? ''; if (function_exists('iconv') && mb_detect_encoding($cellValue, 'UTF-8', true) && preg_match('/[^\x00-\x7F]/', $cellValue)) { $convertedValue = @iconv('UTF-8', 'cp1252//IGNORE', $cellValue); if($convertedValue !== false) $cellValue = $convertedValue; } $widths[$i] = max($widths[$i], $this->GetStringWidth((string)$cellValue) + 8); } } $totalWidth = array_sum($widths); if ($totalWidth <= 0 || $num_cols === 0) { return []; } $scaleFactor = $pageWidth / $totalWidth; for ($i = 0; $i < $num_cols; $i++) { $widths[$i] *= $scaleFactor; } return $widths; }
}
// --- END FPDF Class ---


// --- Handle POST actions: add, edit, delete ---
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';

    function required($key) { return isset($_POST[$key]) && trim($_POST[$key]) !== ''; }

    // --- PDF Generation Action ---
    if ($action === 'generate_current_view_pdf') {
        if (defined('FPDF_MISSING') || !file_exists($fpdf_path)) { die("FPDF library not found."); }
        
        $jsonData = $_POST['pdf_data'] ?? '[]';
        $data = json_decode($jsonData, true);
        $filters = json_decode($_POST['pdf_filters'] ?? '{}', true);
        if (json_last_error() !== JSON_ERROR_NONE) { die("Error decoding PDF data."); }

        $pdf = new PDF('P', 'mm', 'A4'); // Portrait
        $pdf->AliasNbPages();

        $reportTitle = "Users List - Current View";
        $periodLabel = "Filters: ";
        $filterParts = [];
        if (!empty($filters['search'])) $filterParts[] = "Search='{$filters['search']}'";
        if (empty($filterParts)) $filterParts[] = "None";
        $periodLabel .= implode(', ', $filterParts);
        $sortKeyLabel = str_replace(['_','only'], [' ',''], $filters['sortKey'] ?? 'Default');
        $periodLabel .= " | Sorted By: " . ucwords($sortKeyLabel) . " " . ($filters['sortAsc'] ? '(Asc)' : '(Desc)');

        // Use the display name for the PDF header
        $pdf->setReportHeader($reportTitle, $periodLabel, $current_display_name);
        $pdf->AddPage();
        $pdf->SetFont('Arial', '', 8);

        if (!empty($data)) {
            $header = ['Name', 'Username', 'Role', 'Status', 'Date Created'];
            $table_data = [];
            $total_users = 0;

            foreach ($data as $row) {
                $rowData = [
                    $row['name'] ?? '',
                    $row['username'] ?? '',
                    $row['role'] ?? '',
                    $row['status'] ?? '',
                    $row['date'] ?? ''
                ];
                $table_data[] = $rowData;
                $total_users++; // Count users
            }

            $pdf->BasicTable($header, $table_data);
            $pdf->Ln(5);
            $pdf->SetFont('Arial', 'B', 10);
            
            $totalStr = 'Total Users: ' . number_format($total_users);
            if (function_exists('iconv')) {
                $totalStr = @iconv('UTF-8', 'cp1252//IGNORE', $totalStr) ?: $totalStr;
            }
            $pdf->Cell(0, 6, $totalStr, 0, 1, 'R');
        } else {
            $pdf->SetFont('Arial', '', 10);
            $pdf->Cell(0, 10, 'No data matching the current view found.', 0, 1, 'C');
        }

        $filename = "Users_CurrentView_" . date('Ymd_His') . ".pdf";
        if (ob_get_level()) { ob_end_clean(); }
        $pdf->Output('D', $filename);
        exit();
    }
    // --- END PDF BLOCK ---

    elseif ($action === 'add') {
        if (!required('username') || !required('name') || !required('password') || !required('role') || !required('status') ) {
            $_SESSION['error_message'] = "All fields are required."; // Add feedback
            header("Location: users.php"); exit();
        }
        $new_username = trim($_POST['username']);
        $new_name = trim($_POST['name']);
        $new_password = $_POST['password'];
        $new_role = trim($_POST['role']);
        $new_status = trim($_POST['status']);
        
        // Basic password length validation
        if (strlen($new_password) < 6) {
             $_SESSION['error_message'] = "Password must be at least 6 characters long.";
             header("Location: users.php"); exit();
        }
        $hashed_password = password_hash($new_password, PASSWORD_DEFAULT);

        // Check if username already exists
  $check_stmt = $conn->prepare("SELECT user_id FROM users WHERE username = ?");
        $check_stmt->bind_param("s", $new_username);
        $check_stmt->execute();
        $check_result = $check_stmt->get_result();

        if ($check_result->num_rows > 0) {
             $_SESSION['error_message'] = "Username already exists.";
        } else {
            // Insert new user
            $stmt = $conn->prepare("INSERT INTO users (username, name, password, role, status, created_at) VALUES (?, ?, ?, ?, ?, NOW())");
            if ($stmt) {
                $stmt->bind_param("sssss", $new_username, $new_name, $hashed_password, $new_role, $new_status);
                if($stmt->execute()){
                     $_SESSION['success_message'] = "User added successfully.";
                } else {
                     $_SESSION['error_message'] = "Error adding user: " . $stmt->error;
                }
                $stmt->close();
            } else {
                 $_SESSION['error_message'] = "Database error preparing statement: " . $conn->error;
            }
        }
        $check_stmt->close();
        header("Location: users.php");
        exit();

    } elseif ($action === 'edit') {
        $id = intval($_POST['id'] ?? 0);
        if ($id <= 0 || !required('username') || !required('name') || !required('role') || !required('status')) {
             $_SESSION['error_message'] = "Missing required fields for editing.";
            header("Location: users.php"); exit();
        }
        $edit_username = trim($_POST['username']);
        $edit_name = trim($_POST['name']);
        $edit_role = trim($_POST['role']);
        $edit_status = trim($_POST['status']);

        // Check if username exists for another user
  $check_stmt = $conn->prepare("SELECT user_id FROM users WHERE username = ? AND user_id != ?");
  $check_stmt->bind_param("si", $edit_username, $id);
        $check_stmt->execute();
        $check_result = $check_stmt->get_result();

        if ($check_result->num_rows > 0) {
             $_SESSION['error_message'] = "Username already exists for another user.";
        } else {
            // Update user details
            $stmt = $conn->prepare("UPDATE users SET username = ?, name = ?, role = ?, status = ? WHERE user_id = ?");
            if ($stmt) {
                $stmt->bind_param("ssssi", $edit_username, $edit_name, $edit_role, $edit_status, $id);
                 if($stmt->execute()){
                     $_SESSION['success_message'] = "User updated successfully.";
                     // *** ADDED: Update session name if editing own profile ***
                     if ($id === $current_user_id) {
                         $_SESSION['name'] = $edit_name; // Update the session immediately
                     }
                     // *******************************************************
                } else {
                     $_SESSION['error_message'] = "Error updating user: " . $stmt->error;
                }
                $stmt->close();
            } else {
                 $_SESSION['error_message'] = "Database error preparing statement: " . $conn->error;
            }
        }
        $check_stmt->close();
        header("Location: users.php"); exit();

    } elseif ($action === 'delete') {
        $id = intval($_POST['id'] ?? 0);
        // Prevent deleting the currently logged-in user
        if ($id > 0 && $id !== $current_user_id) {
            $stmt = $conn->prepare("DELETE FROM users WHERE user_id = ?");
            if ($stmt) {
                $stmt->bind_param("i", $id);
                if($stmt->execute()){
                     $_SESSION['success_message'] = "User deleted successfully.";
                } else {
                     $_SESSION['error_message'] = "Error deleting user: " . $stmt->error;
                }
                $stmt->close();
            } else {
                 $_SESSION['error_message'] = "Database error preparing statement: " . $conn->error;
            }
        } elseif ($id === $current_user_id) {
            $_SESSION['error_message'] = "You cannot delete your own account.";
        } else {
            $_SESSION['error_message'] = "Invalid user ID for deletion.";
        }
        header("Location: users.php"); exit();
    }
}

// Fetch users data for display
$users_q = $conn->query("
    SELECT user_id, username, name, role, status, created_at, DATE(created_at) as date_created_only
    FROM users
    ORDER BY created_at DESC
");

// Get potential feedback messages from session
$error_message = $_SESSION['error_message'] ?? null;
$success_message = $_SESSION['success_message'] ?? null;
unset($_SESSION['error_message'], $_SESSION['success_message']); // Clear messages after reading

?>
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Users — RCRAO Accounting</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
:root {
  --accent:#d84c73; --accent-light:#ffb6c1; --bg1:#fff0f6; --bg2:#ffe6ee; --card:#fff;
  --muted:#6b4a57; --shadow:0 8px 25px rgba(216,76,115,0.1);
  --sidebar-collapsed:72px; --sidebar-expanded:230px;
   --accent-dark: #b83b5e;
   --success: #28a745; --danger: #dc3545; /* Status colors */
}
*{box-sizing:border-box;font-family:"Poppins",sans-serif;margin:0;padding:0}
body{background:linear-gradient(135deg,var(--bg1),var(--bg2));color:var(--muted);overflow-x:hidden}
.sidebar{position:fixed;top:0;left:0;height:100vh;width:var(--sidebar-collapsed);background:linear-gradient(180deg,var(--accent) 0%,#ff7ea1 100%); display:flex;flex-direction:column;justify-content:space-between;padding:12px;transition:width .3s ease;z-index:1001}
.sidebar:hover,.sidebar.expanded{width:var(--sidebar-expanded);box-shadow:var(--shadow)}
nav.side-menu{margin-top:20px;display:flex;flex-direction:column;gap:8px}
nav.side-menu a{display:flex;align-items:center;gap:15px;padding:12px;color:#fff;text-decoration:none;border-radius:8px;font-weight:500;transition: all .2s ease;}
nav.side-menu a i{width:24px;text-align:center; font-size: 1.1em; transition: transform 0.2s ease;}
nav.side-menu a .label{display:none; white-space: nowrap; opacity: 0; transition: opacity 0.2s ease;}
.sidebar:hover nav.side-menu a .label,.sidebar.expanded nav.side-menu a .label{display:inline; opacity: 1;}
nav.side-menu a:hover{background:rgba(255,255,255,0.2);transform:translateX(8px); }
nav.side-menu a.active{background:rgba(255,255,255,0.15);}
nav.side-menu a:hover i { transform: scale(1.1); }
.main{margin-left:var(--sidebar-collapsed);padding:28px;transition: margin-left .3s ease;}
.header{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px}
.header h1{color:var(--accent-dark);font-size:24px;font-weight:700}
.user-info{font-size:14px;font-weight:600;background:var(--card);padding:10px 14px;border-radius:10px;box-shadow:var(--shadow)}
.toolbar{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:18px;background:var(--card);padding:14px 16px;border-radius:12px;box-shadow:var(--shadow)}
.toolbar input{padding:8px 12px;border-radius:8px;border:1px solid #ccc;width:220px}

/* Global Button Styles */
.btn{ border: none; border-radius: 8px; padding: 10px 18px; font-weight: 600; cursor: pointer; transition: all 0.25s ease; background: var(--accent-light); color: var(--accent-dark); margin: 0 5px; font-family:"Poppins",sans-serif; font-size: 14px;}
.btn:hover { background: var(--accent); color: #fff; transform: translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.2);}
.btn.primary{ background:var(--accent); color:#fff;}
.btn.primary:hover{ background: var(--accent-dark); transform:translateY(-2px); box-shadow: 0 4px 15px rgba(216,76,115,0.3);}
.btn.small{padding:8px 12px;font-size:13px}
.btn i { margin-right: 8px; }

.table-card{background:var(--card);border-radius:14px;padding:16px;box-shadow:var(--shadow);overflow-x:auto}
table{width:100%;border-collapse:collapse;text-align:left; font-size: 13px;}
th,td{padding:10px 12px;border-bottom:1px solid #f3d0dc; white-space: nowrap;}
th{background:#ffd6e5;color:#6b4a57;cursor:pointer;user-select:none;position:relative; font-weight: 600;}
th .sort-icon{margin-left:6px;font-size:11px;color:#888}
tr:hover{background:#fff6f9}
.icon-btn{background:none;border:none;color:var(--accent);cursor:pointer;font-size:15px;margin:0 4px;transition:.2s}
.icon-btn:hover{transform:scale(1.15); color: var(--accent-dark);}
.pagination{text-align:center;margin-top:18px;display:flex;justify-content:center;gap:6px;flex-wrap:wrap}
.pagination button{border:none;background:var(--accent);color:#fff;padding:6px 12px;border-radius:6px;cursor:pointer; font-size: 13px;}
.pagination button.active{background:#ff91a4}

/* Modal Styles */
.modal { position: fixed; inset: 0; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 1000; backdrop-filter: blur(5px); padding: 15px;}
.modal.active { display: flex; animation: fadeIn .3s ease; }
.modal-content { background: var(--card); border-radius: 16px; padding: 30px; width: 450px; max-width: 95%; box-shadow: 0 10px 40px rgba(0,0,0,0.15); animation: slideUp .35s ease; position: relative; }
.modal h2 { color: var(--accent-dark); text-align: center; margin-bottom: 25px; font-weight: 700; font-size: 20px;}
.modal form label { font-size: 14px; font-weight: 600; color: var(--muted); display: block; margin-top: 15px; margin-bottom: 5px; }
.modal form input, .modal form select { width: 100%; padding: 12px 15px; margin-bottom: 12px; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9; font-size: 14px; transition: all 0.2s ease; font-family:"Poppins",sans-serif; }
.modal form input:focus, .modal form select:focus { outline: none; border-color: var(--accent); background: #fff; box-shadow: 0 0 0 3px rgba(216, 76, 115, 0.15); }
.modal .actions { display: flex; justify-content: flex-end; margin-top: 25px; gap: 10px; }
@keyframes fadeIn { from { opacity: 0; transform: scale(0.95); } to { opacity: 1; transform: scale(1); } }
@keyframes slideUp { from { transform: translateY(15px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }

/* Style for password field shown only on add */
.password-field { display: block; } /* Default visible */
form[data-mode="edit"] .password-field { display: none; } /* Hide in edit mode */

/* Status styling */
.status-active { color: var(--success); font-weight: 700; }
.status-inactive { color: var(--danger); font-weight: 700; }
</style>
</head>
<body>
<aside class="sidebar">
  <nav class="side-menu">
    <?php if ($current_role === 'admin'): ?>
    <a href="dashboard.php"><i class="fa fa-chart-pie"></i><span class="label">Dashboard</span></a>
    <?php endif; ?>
    <a href="transactions/collections.php"><i class="fa fa-cash-register"></i><span class="label">Transactions</span></a>
    <?php if ($current_role === 'admin'): // Use variable already defined ?>
    <a href="users.php" class="active"><i class="fa fa-users-cog"></i><span class="label">Users</span></a>
    <?php endif; ?>
    <a href="logout.php"><i class="fa fa-sign-out-alt"></i><span class="label">Logout</span></a>
  </nav>
</aside>

<main class="main">
  <div class="header">
    <h1>Manage Users</h1>
    <div class="user-info">Logged in as: <b><?= htmlspecialchars($current_display_name) ?></b></div>
    </div>

  <div class="toolbar">
    <input type="text" id="searchInput" placeholder="🔍 Search user...">
    <button class="btn primary" id="openAddBtn"><i class="fa fa-plus"></i> New User</button>
    <button class="btn small" id="generatePdfBtn" style="margin-left: 10px;"><i class="fa fa-file-pdf"></i> PDF Current View</button>
    <div style="margin-left:auto">
      <input type="number" id="rowsPerPageInput" placeholder="Rows / page" style="width:120px;padding:8px;border-radius:8px;border:1px solid #ddd" value="8" min="1">
    </div>
  </div>

  <div class="table-card">
    <table id="usersTable">
      <thead>
        <tr>
          <th data-key="name">Name <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="username">Username <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="role">Role <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="status">Status <i class="fa fa-sort sort-icon"></i></th>
          <th data-key="date_created_only">Date Created <i class="fa fa-sort sort-icon"></i></th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        <?php while ($r = $users_q->fetch_assoc()):
            // Encode the full row data, including the name, for JavaScript
            $data = htmlentities(json_encode($r), ENT_QUOTES, 'UTF-8');
            $status_text = ucfirst($r['status']);
            $status_class = $r['status'] === 'active' ? 'status-active' : 'status-inactive';
            $date_formatted = !empty($r['date_created_only']) ? date('M d, Y', strtotime($r['date_created_only'])) : '';
        ?>
          <tr data-row='<?= $data ?>'>
            <td><?= htmlspecialchars($r['name']) ?></td>
            <td><?= htmlspecialchars($r['username']) ?></td>
            <td><?= htmlspecialchars(ucfirst($r['role'])) ?></td>
            <td><span class="<?= $status_class ?>"><?= htmlspecialchars($status_text) ?></span></td>
            <td><?= $date_formatted ?></td>
            <td>
              <button class="icon-btn editBtn" title="Edit"><i class="fa fa-pen"></i></button>
              <?php if ($r['user_id'] !== $current_user_id): // Check against current user ID ?>
                <button class="icon-btn deleteBtn" title="Delete"><i class="fa fa-trash"></i></button>
              <?php endif; ?>
            </td>
          </tr>
        <?php endwhile; ?>
      </tbody>
    </table>
    <div class="pagination" id="pagination"></div>
  </div>
</main>

<div class="modal" id="modalAdd">
  <div class="modal-content">
    <h2 id="addTitle">New User</h2>
    <form method="post" id="formAdd" action="users.php" data-mode="add">
      <input type="hidden" name="action" id="formAddAction" value="add">
      <input type="hidden" name="id" id="formAddId" value="">

      <label>Full Name</label>
      <input type="text" name="name" id="name" required>

      <label>Username</label>
      <input type="text" name="username" id="username" required>

      <div class="password-field">
          <label>Password</label>
          <input type="password" name="password" id="password"> </div>

      <label>Role</label>
      <select name="role" id="role" required>
        <option value="">-- Select Role --</option>
        <option value="user">User</option>
        <option value="admin">Admin</option>
      </select>

      <label>Status</label>
      <select name="status" id="status" required>
         <option value="">-- Select Status --</option>
        <option value="active">Active</option>
        <option value="inactive">Inactive</option>
      </select>

      <div class="actions">
        <button type="button" class="btn" id="closeAdd">Cancel</button>
        <button type="submit" class="btn primary">Save</button>
      </div>
    </form>
  </div>
</div>

<form method="POST" action="users.php" id="pdfForm" target="_blank" style="display: none;">
    <input type="hidden" name="action" value="generate_current_view_pdf">
    <input type="hidden" name="pdf_data" id="pdfDataInput">
    <input type="hidden" name="pdf_filters" id="pdfFiltersInput">
</form>

<script>
/* DOM helpers & initial state */
const searchInput = document.getElementById('searchInput');
const rowsPerPageInput = document.getElementById('rowsPerPageInput');
const allRows = Array.from(document.querySelectorAll('#usersTable tbody tr'));
const generatePdfBtn = document.getElementById('generatePdfBtn');
const pdfForm = document.getElementById('pdfForm');
const pdfDataInput = document.getElementById('pdfDataInput');
const pdfFiltersInput = document.getElementById('pdfFiltersInput');

let rowsPerPage = parseInt(rowsPerPageInput.value) || 8;
let currentPage = 1;
let currentSortKey = 'created_at';
let currentSortAsc = false;

/* Add / Edit modal wiring */
const modalAdd = document.getElementById('modalAdd');
const formAdd = document.getElementById('formAdd');
const openAddBtn = document.getElementById('openAddBtn');
const closeAdd = document.getElementById('closeAdd');
const addTitle = document.getElementById('addTitle');
const passwordInput = document.getElementById('password');
const nameInput = document.getElementById('name'); // Get name input

openAddBtn.onclick = () => {
  formAdd.reset();
  formAdd.dataset.mode = 'add'; // Set mode for validation
  passwordInput.required = true; // Password required for adding
  document.getElementById('formAddAction').value = 'add';
  document.getElementById('formAddId').value = '';
  addTitle.textContent = 'New User';
  modalAdd.classList.add('active');
};

closeAdd.onclick = () => modalAdd.classList.remove('active');

document.querySelectorAll('.editBtn').forEach(btn=>{
  btn.onclick = (e)=>{
  const tr = btn.closest('tr');
  const data = JSON.parse(tr.dataset.row); // This now contains the 'name' and user_id
  formAdd.reset();
  formAdd.dataset.mode = 'edit'; // Set mode for validation
  passwordInput.required = false; // Password not required for editing
  document.getElementById('formAddAction').value = 'edit';
  document.getElementById('formAddId').value = data.user_id;
  nameInput.value = data.name || ''; // Populate name field from data
    document.getElementById('username').value = data.username;
    document.getElementById('role').value = data.role;
    document.getElementById('status').value = data.status;
    addTitle.textContent = 'Edit User';
    modalAdd.classList.add('active');
  }
});


/* Delete - SweetAlert */
document.querySelectorAll('.deleteBtn').forEach(btn=>{
  btn.onclick = ()=>{
  const data = JSON.parse(btn.closest('tr').dataset.row);
  const id = Number(data.user_id);
    // Get current user ID from PHP session variable embedded in JS
    const currentUserId = <?= $current_user_id ?>;

    if (id === currentUserId) {
         Swal.fire({ icon: 'error', title: 'Action Denied', text: 'You cannot delete your own account.', buttonsStyling: false, customClass: { confirmButton: 'btn primary' } });
         return; // Stop execution
    }

    Swal.fire({
        title: 'Are you sure?',
        text: `Delete user: ${data.username}? This cannot be undone.`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel', // Added cancel text
        buttonsStyling: false,
        customClass: { confirmButton: 'btn primary', cancelButton: 'btn' } // Apply button styles
    }).then((result) => {
        if (result.isConfirmed) {
            // Use a form submission for delete for simplicity and consistency
            const deleteForm = document.createElement('form');
            deleteForm.method = 'POST';
            deleteForm.action = 'users.php';
      deleteForm.innerHTML = `
        <input type="hidden" name="action" value="delete">
        <input type="hidden" name="id" value="${id}">
      `;
            document.body.appendChild(deleteForm);
            deleteForm.submit();
        }
    });
  }
});

/* --- Filter, Sort, Pagination --- */

function getFilteredRows() {
  const q = searchInput.value.toLowerCase().trim();
  return allRows.filter(r => {
      const textContent = r.textContent.toLowerCase();
      return !q || textContent.includes(q);
  });
}

function sortRows(rowsToSort, key, asc) {
    rowsToSort.sort((a, b) => {
      const A_data = JSON.parse(a.dataset.row);
      const B_data = JSON.parse(b.dataset.row);
      let A = A_data[key]; // Use let for potential modification
      let B = B_data[key];

      // Handle date sorting using the full timestamp
      if (key === 'date_created_only') {
          A = A_data['created_at'] || 0; // Use full timestamp
          B = B_data['created_at'] || 0;
          const dateA = new Date(A);
          const dateB = new Date(B);
          return asc ? dateA - dateB : dateB - dateA;
      }
      
      // Default string comparison (case-insensitive)
      const sa = (A || '').toString().toLowerCase();
      const sb = (B || '').toString().toLowerCase();
      return asc ? sa.localeCompare(sb) : sb.localeCompare(sa);
    });
}

function renderTable() {
    const filteredRows = getFilteredRows();
    sortRows(filteredRows, currentSortKey, currentSortAsc);
    const tbody = document.querySelector('#usersTable tbody');
    tbody.innerHTML = ''; // Clear existing rows
    const start = (currentPage - 1) * rowsPerPage;
    const end = start + rowsPerPage;
    const pageRows = filteredRows.slice(start, end);
    // No need to hide all rows if tbody is cleared
    pageRows.forEach(r => {
        // r.style.display = ''; // No longer needed
        tbody.appendChild(r);
    });
    renderPagination(filteredRows.length);
}

function renderPagination(totalFilteredRows) {
  const container = document.getElementById('pagination');
  container.innerHTML = ''; // Clear existing pagination
  const totalPages = Math.max(1, Math.ceil(totalFilteredRows / rowsPerPage));
  if (totalPages <= 1) return; // No pagination needed for 1 page or less

  for (let i = 1; i <= totalPages; i++) {
    const b = document.createElement('button');
    b.textContent = i;
    if (i === currentPage) b.classList.add('active');
    b.onclick = () => { currentPage = i; renderTable(); };
    container.appendChild(b);
  }
}

/* --- Event Listeners --- */
searchInput.addEventListener('input', () => { currentPage = 1; renderTable(); });
rowsPerPageInput.addEventListener('change', () => {
    let newRows = parseInt(rowsPerPageInput.value);
    if (newRows > 0) {
        rowsPerPage = newRows;
    } else {
        rowsPerPageInput.value = rowsPerPage; // Reset input if invalid
    }
    currentPage = 1;
    renderTable();
});

document.querySelectorAll('th[data-key]').forEach(th => {
  th.addEventListener('click', () => {
    const key = th.dataset.key;
    if (currentSortKey === key) {
        currentSortAsc = !currentSortAsc; // Toggle direction
    } else {
        currentSortKey = key; // Set new key
        currentSortAsc = true; // Default to ascending
    }
    // Update icons visually
    document.querySelectorAll('#usersTable th .sort-icon').forEach(i => i.className = 'fa fa-sort sort-icon'); // Reset others
    th.querySelector('.sort-icon').className = currentSortAsc ? 'fa fa-sort-up sort-icon' : 'fa fa-sort-down sort-icon'; // Set current

    currentPage = 1; // Reset to first page on sort
    renderTable();
  });
});

/* PDF Generation Button Listener */
generatePdfBtn.addEventListener('click', () => {
    const filteredAndSortedRows = getFilteredRows(); // Get all currently filtered rows
    sortRows(filteredAndSortedRows, currentSortKey, currentSortAsc); // Ensure they are sorted

    const dataForPdf = filteredAndSortedRows.map(row => {
        const cells = row.getElementsByTagName('td');
        // Extract text content from table cells to match display
        return {
            name: cells[0]?.textContent || '',
            username: cells[1]?.textContent || '',
            role: cells[2]?.textContent || '',
            status: cells[3]?.textContent || '',
            date: cells[4]?.textContent || ''
        };
    });
    const filtersForPdf = {
        search: searchInput.value,
        sortKey: currentSortKey,
        sortAsc: currentSortAsc
    };

    pdfDataInput.value = JSON.stringify(dataForPdf);
    pdfFiltersInput.value = JSON.stringify(filtersForPdf);
    pdfForm.submit(); // Submit the hidden form
});

/* --- Form Validation & Modal Close --- */
renderTable(); // Initial render on page load

formAdd.addEventListener('submit', function(e){
  // Trim values and get mode
  const name = nameInput.value.trim();
  const username = document.getElementById('username').value.trim();
  const password = passwordInput.value; // Don't trim password
  const role = document.getElementById('role').value;
  const status = document.getElementById('status').value;
  const mode = formAdd.dataset.mode; // 'add' or 'edit'
  let errorMessage = '';

  // Basic Validations
  if (!name) { errorMessage = 'Please provide a full name.'; }
  else if (!username) { errorMessage = 'Please provide a username.'; }
  // Password validation only needed when adding
  else if (mode === 'add' && (!password || password.length < 6)) {
      errorMessage = 'Please provide a password (at least 6 characters).';
  }
  else if (!role) { errorMessage = 'Please select a role.'; }
  else if (!status) { errorMessage = 'Please select a status.'; }

  // If validation fails, prevent submission and show error
  if (errorMessage) {
      e.preventDefault(); // Stop form submission
      Swal.fire({
          icon: 'error',
          title: 'Validation Error',
          text: errorMessage,
          buttonsStyling: false,
          customClass: { confirmButton: 'btn primary' }
      });
      return false; // Indicate failure
  }
  // Allow form submission if validation passes
});

// Close modal if clicking outside content
document.querySelectorAll('.modal').forEach(m=>{
  m.addEventListener('click', (ev)=>{
      if (ev.target === m) { // Check if click is on the backdrop
          m.classList.remove('active');
      }
  });
});

// Display feedback messages from PHP using SweetAlert
document.addEventListener('DOMContentLoaded', () => {
    <?php if ($success_message): ?>
        Swal.fire({
            icon: 'success', title: 'Success', text: '<?= addslashes($success_message) ?>',
            timer: 2000, showConfirmButton: false
        });
    <?php elseif ($error_message): ?>
        Swal.fire({
             icon: 'error', title: 'Error', text: '<?= addslashes($error_message) ?>',
             confirmButtonText: 'OK', buttonsStyling: false,
             customClass: { confirmButton: 'btn primary' }
         });
    <?php endif; ?>
});

</script>
</body>
</html>